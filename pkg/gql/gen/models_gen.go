// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"fmt"
	"io"
	"strconv"
)

type AbilityScore struct {
	ID       string    `json:"_id"`
	Desc     []*string `json:"desc,omitempty"`
	FullName *string   `json:"full_name,omitempty"`
	Index    *string   `json:"index,omitempty"`
	Name     *string   `json:"name,omitempty"`
	Skills   []*Skill  `json:"skills,omitempty"`
	URL      *string   `json:"url,omitempty"`
}

type Alignment struct {
	ID           string  `json:"_id"`
	Desc         *string `json:"desc,omitempty"`
	Abbreviation *string `json:"abbreviation,omitempty"`
	Index        *string `json:"index,omitempty"`
	Name         *string `json:"name,omitempty"`
	URL          *string `json:"url,omitempty"`
}

type Background struct {
	ID                       string                                `json:"_id"`
	Index                    *string                               `json:"index,omitempty"`
	Name                     *string                               `json:"name,omitempty"`
	StartingProficiencies    []*Proficiency                        `json:"starting_proficiencies,omitempty"`
	LanguageOptions          *BackgroundLanguageOptions            `json:"language_options,omitempty"`
	URL                      *string                               `json:"url,omitempty"`
	StartingEquipment        []*BackgroundStartingEquipment        `json:"starting_equipment,omitempty"`
	StartingEquipmentOptions []*BackgroundStartingEquipmentOptions `json:"starting_equipment_options,omitempty"`
	Feature                  *BackgroundFeature                    `json:"feature,omitempty"`
	PersonalityTraits        *BackgroundPersonalityTraits          `json:"personality_traits,omitempty"`
	Ideals                   *BackgroundIdeals                     `json:"ideals,omitempty"`
	Bonds                    *BackgroundBonds                      `json:"bonds,omitempty"`
	Flaws                    *BackgroundFlaws                      `json:"flaws,omitempty"`
}

type BackgroundBonds struct {
	Choose *float64  `json:"choose,omitempty"`
	From   []*string `json:"from,omitempty"`
	Type   *string   `json:"type,omitempty"`
}

type BackgroundFeature struct {
	Name *string   `json:"name,omitempty"`
	Desc []*string `json:"desc,omitempty"`
}

type BackgroundFlaws struct {
	Choose *float64  `json:"choose,omitempty"`
	From   []*string `json:"from,omitempty"`
	Type   *string   `json:"type,omitempty"`
}

type BackgroundIdeals struct {
	Choose *float64                `json:"choose,omitempty"`
	From   []*BackgroundIdealsFrom `json:"from,omitempty"`
	Type   *string                 `json:"type,omitempty"`
}

type BackgroundIdealsFrom struct {
	Desc       *string                           `json:"desc,omitempty"`
	Alignments []*BackgroundIdealsFromAlignments `json:"alignments,omitempty"`
	ID         *string                           `json:"_id,omitempty"`
}

type BackgroundIdealsFromAlignments struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type BackgroundLanguageOptions struct {
	Choose *float64                         `json:"choose,omitempty"`
	From   []*BackgroundLanguageOptionsFrom `json:"from,omitempty"`
	Type   *string                          `json:"type,omitempty"`
}

type BackgroundLanguageOptionsFrom struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type BackgroundPersonalityTraits struct {
	Choose *float64  `json:"choose,omitempty"`
	From   []*string `json:"from,omitempty"`
	Type   *string   `json:"type,omitempty"`
}

type BackgroundStartingEquipment struct {
	Equipment *BackgroundStartingEquipmentEquipment `json:"equipment,omitempty"`
	Quantity  *float64                              `json:"quantity,omitempty"`
}

type BackgroundStartingEquipmentEquipment struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type BackgroundStartingEquipmentOptions struct {
	Choose *float64                                  `json:"choose,omitempty"`
	From   []*BackgroundStartingEquipmentOptionsFrom `json:"from,omitempty"`
	Type   *string                                   `json:"type,omitempty"`
}

type BackgroundStartingEquipmentOptionsFrom struct {
	Equipment *BackgroundStartingEquipmentOptionsFromEquipment `json:"equipment,omitempty"`
	Quantity  *float64                                         `json:"quantity,omitempty"`
}

type BackgroundStartingEquipmentOptionsFromEquipment struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type Class struct {
	ID                       string                           `json:"_id"`
	ClassLevels              []*Level                         `json:"class_levels,omitempty"`
	MultiClassing            *ClassMultiClassing              `json:"multi_classing,omitempty"`
	HitDie                   *float64                         `json:"hit_die,omitempty"`
	Index                    *string                          `json:"index,omitempty"`
	Name                     *string                          `json:"name,omitempty"`
	Proficiencies            []*Proficiency                   `json:"proficiencies,omitempty"`
	ProficiencyChoices       []*ClassProficiencyChoices       `json:"proficiency_choices,omitempty"`
	SavingThrows             []*ClassSavingThrows             `json:"saving_throws,omitempty"`
	Spellcasting             *ClassSpellcasting               `json:"spellcasting,omitempty"`
	Spells                   []*Spell                         `json:"spells,omitempty"`
	StartingEquipment        []*ClassStartingEquipment        `json:"starting_equipment,omitempty"`
	StartingEquipmentOptions []*ClassStartingEquipmentOptions `json:"starting_equipment_options,omitempty"`
	Subclasses               []*ClassSubclasses               `json:"subclasses,omitempty"`
	URL                      *string                          `json:"url,omitempty"`
}

type ClassMultiClassing struct {
	Prerequisites       []*ClassMultiClassingPrerequisites      `json:"prerequisites,omitempty"`
	PrerequisiteOptions *ClassMultiClassingPrerequisiteOptions  `json:"prerequisite_options,omitempty"`
	Proficiencies       []*ClassMultiClassingProficiencies      `json:"proficiencies,omitempty"`
	ProficiencyChoices  []*ClassMultiClassingProficiencyChoices `json:"proficiency_choices,omitempty"`
}

type ClassMultiClassingPrerequisiteOptions struct {
	Choose *float64                                     `json:"choose,omitempty"`
	From   []*ClassMultiClassingPrerequisiteOptionsFrom `json:"from,omitempty"`
	Type   *string                                      `json:"type,omitempty"`
}

type ClassMultiClassingPrerequisiteOptionsFrom struct {
	AbilityScore *ClassMultiClassingPrerequisiteOptionsFromAbilityScore `json:"ability_score,omitempty"`
	MinimumScore *float64                                               `json:"minimum_score,omitempty"`
	ID           *string                                                `json:"_id,omitempty"`
}

type ClassMultiClassingPrerequisiteOptionsFromAbilityScore struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type ClassMultiClassingPrerequisites struct {
	AbilityScore *ClassMultiClassingPrerequisitesAbilityScore `json:"ability_score,omitempty"`
	MinimumScore *float64                                     `json:"minimum_score,omitempty"`
	ID           *string                                      `json:"_id,omitempty"`
}

type ClassMultiClassingPrerequisitesAbilityScore struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type ClassMultiClassingProficiencies struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type ClassMultiClassingProficiencyChoices struct {
	Choose *float64                                    `json:"choose,omitempty"`
	From   []*ClassMultiClassingProficiencyChoicesFrom `json:"from,omitempty"`
	Type   *string                                     `json:"type,omitempty"`
	ID     *string                                     `json:"_id,omitempty"`
}

type ClassMultiClassingProficiencyChoicesFrom struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type ClassProficiencyChoices struct {
	Choose *float64                       `json:"choose,omitempty"`
	From   []*ClassProficiencyChoicesFrom `json:"from,omitempty"`
	Type   *string                        `json:"type,omitempty"`
	ID     *string                        `json:"_id,omitempty"`
}

type ClassProficiencyChoicesFrom struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type ClassSavingThrows struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type ClassSpellcasting struct {
	Info                []*ClassSpellcastingInfo              `json:"info,omitempty"`
	Level               *float64                              `json:"level,omitempty"`
	SpellcastingAbility *ClassSpellcastingSpellcastingAbility `json:"spellcasting_ability,omitempty"`
}

type ClassSpellcastingInfo struct {
	Desc []*string `json:"desc,omitempty"`
	Name *string   `json:"name,omitempty"`
	ID   *string   `json:"_id,omitempty"`
}

type ClassSpellcastingSpellcastingAbility struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type ClassStartingEquipment struct {
	Equipment *ClassStartingEquipmentEquipment `json:"equipment,omitempty"`
	Quantity  *float64                         `json:"quantity,omitempty"`
	ID        *string                          `json:"_id,omitempty"`
}

type ClassStartingEquipmentEquipment struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type ClassStartingEquipmentOptions struct {
	Choose *float64                             `json:"choose,omitempty"`
	From   []*ClassStartingEquipmentOptionsFrom `json:"from,omitempty"`
	Type   *string                              `json:"type,omitempty"`
	ID     *string                              `json:"_id,omitempty"`
}

type ClassStartingEquipmentOptionsFrom struct {
	Equipment *ClassStartingEquipmentOptionsFromEquipment `json:"equipment,omitempty"`
	Quantity  *float64                                    `json:"quantity,omitempty"`
	ID        *string                                     `json:"_id,omitempty"`
}

type ClassStartingEquipmentOptionsFromEquipment struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type ClassSubclasses struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type Condition struct {
	ID    string    `json:"_id"`
	Desc  []*string `json:"desc,omitempty"`
	Index *string   `json:"index,omitempty"`
	Name  *string   `json:"name,omitempty"`
	URL   *string   `json:"url,omitempty"`
}

type DamageType struct {
	ID    string    `json:"_id"`
	Desc  []*string `json:"desc,omitempty"`
	Index *string   `json:"index,omitempty"`
	Name  *string   `json:"name,omitempty"`
	URL   *string   `json:"url,omitempty"`
}

type Equipment struct {
	ID                  string                      `json:"_id"`
	ArmorCategory       *string                     `json:"armor_category,omitempty"`
	ArmorClass          *EquipmentArmorClass        `json:"armor_class,omitempty"`
	Capacity            *string                     `json:"capacity,omitempty"`
	CategoryRange       *string                     `json:"category_range,omitempty"`
	Contents            []*EquipmentContents        `json:"contents,omitempty"`
	Cost                *EquipmentCost              `json:"cost,omitempty"`
	Damage              *EquipmentDamage            `json:"damage,omitempty"`
	Desc                []*string                   `json:"desc,omitempty"`
	EquipmentCategory   *EquipmentEquipmentCategory `json:"equipment_category,omitempty"`
	GearCategory        *EquipmentGearCategory      `json:"gear_category,omitempty"`
	Index               *string                     `json:"index,omitempty"`
	Name                *string                     `json:"name,omitempty"`
	Properties          []*WeaponProperty           `json:"properties,omitempty"`
	Quantity            *float64                    `json:"quantity,omitempty"`
	Range               *EquipmentRange             `json:"range,omitempty"`
	Special             []*string                   `json:"special,omitempty"`
	Speed               *EquipmentSpeed             `json:"speed,omitempty"`
	StealthDisadvantage *bool                       `json:"stealth_disadvantage,omitempty"`
	StrMinimum          *float64                    `json:"str_minimum,omitempty"`
	ThrowRange          *EquipmentThrowRange        `json:"throw_range,omitempty"`
	ToolCategory        *string                     `json:"tool_category,omitempty"`
	TwoHandedDamage     *EquipmentTwoHandedDamage   `json:"two_handed_damage,omitempty"`
	URL                 *string                     `json:"url,omitempty"`
	VehicleCategory     *string                     `json:"vehicle_category,omitempty"`
	WeaponCategory      *string                     `json:"weapon_category,omitempty"`
	WeaponRange         *string                     `json:"weapon_range,omitempty"`
	Weight              *float64                    `json:"weight,omitempty"`
}

type EquipmentArmorClass struct {
	Base     *float64 `json:"base,omitempty"`
	DexBonus *bool    `json:"dex_bonus,omitempty"`
	MaxBonus *float64 `json:"max_bonus,omitempty"`
}

type EquipmentCategory struct {
	ID        string       `json:"_id"`
	Equipment []*Equipment `json:"equipment,omitempty"`
	Index     *string      `json:"index,omitempty"`
	Name      *string      `json:"name,omitempty"`
	URL       *string      `json:"url,omitempty"`
}

type EquipmentContents struct {
	Item     *EquipmentContentsItem `json:"item,omitempty"`
	Quantity *float64               `json:"quantity,omitempty"`
	ID       *string                `json:"_id,omitempty"`
}

type EquipmentContentsItem struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type EquipmentCost struct {
	Quantity *float64 `json:"quantity,omitempty"`
	Unit     *string  `json:"unit,omitempty"`
}

type EquipmentDamage struct {
	DamageDice *string                    `json:"damage_dice,omitempty"`
	DamageType *EquipmentDamageDamageType `json:"damage_type,omitempty"`
}

type EquipmentDamageDamageType struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type EquipmentEquipmentCategory struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type EquipmentGearCategory struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type EquipmentRange struct {
	Long   *float64 `json:"long,omitempty"`
	Normal *float64 `json:"normal,omitempty"`
}

type EquipmentSpeed struct {
	Quantity *float64 `json:"quantity,omitempty"`
	Unit     *string  `json:"unit,omitempty"`
}

type EquipmentThrowRange struct {
	Long   *float64 `json:"long,omitempty"`
	Normal *float64 `json:"normal,omitempty"`
}

type EquipmentTwoHandedDamage struct {
	DamageDice *string                             `json:"damage_dice,omitempty"`
	DamageType *EquipmentTwoHandedDamageDamageType `json:"damage_type,omitempty"`
}

type EquipmentTwoHandedDamageDamageType struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type Feat struct {
	ID            string               `json:"_id"`
	Index         *string              `json:"index,omitempty"`
	Name          *string              `json:"name,omitempty"`
	Prerequisites []*FeatPrerequisites `json:"prerequisites,omitempty"`
	Desc          []*string            `json:"desc,omitempty"`
	URL           *string              `json:"url,omitempty"`
}

type FeatPrerequisites struct {
	AbilityScore *FeatPrerequisitesAbilityScore `json:"ability_score,omitempty"`
	MinimumScore *float64                       `json:"minimum_score,omitempty"`
	ID           *string                        `json:"_id,omitempty"`
}

type FeatPrerequisitesAbilityScore struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type Feature struct {
	ID              string                  `json:"_id"`
	Choice          *FeatureChoice          `json:"choice,omitempty"`
	Class           *Class                  `json:"class,omitempty"`
	Desc            []*string               `json:"desc,omitempty"`
	Parent          *FeatureParent          `json:"parent,omitempty"`
	Index           *string                 `json:"index,omitempty"`
	Level           *float64                `json:"level,omitempty"`
	Name            *string                 `json:"name,omitempty"`
	Prerequisites   []*FeaturePrerequisites `json:"prerequisites,omitempty"`
	Reference       *string                 `json:"reference,omitempty"`
	Subclass        *Subclass               `json:"subclass,omitempty"`
	FeatureSpecific *FeatureFeatureSpecific `json:"feature_specific,omitempty"`
	URL             *string                 `json:"url,omitempty"`
}

type FeatureChoice struct {
	Choose *float64             `json:"choose,omitempty"`
	From   []*FeatureChoiceFrom `json:"from,omitempty"`
	Type   *string              `json:"type,omitempty"`
}

type FeatureChoiceFrom struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FeatureFeatureSpecific struct {
	SubfeatureOptions *FeatureFeatureSpecificSubfeatureOptions `json:"subfeature_options,omitempty"`
	ExpertiseOptions  *FeatureFeatureSpecificExpertiseOptions  `json:"expertise_options,omitempty"`
}

type FeatureFeatureSpecificExpertiseOptions struct {
	Choose *float64                                      `json:"choose,omitempty"`
	From   []*FeatureFeatureSpecificExpertiseOptionsFrom `json:"from,omitempty"`
	Type   *string                                       `json:"type,omitempty"`
}

type FeatureFeatureSpecificExpertiseOptionsFrom struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FeatureFeatureSpecificSubfeatureOptions struct {
	Choose *float64                                       `json:"choose,omitempty"`
	From   []*FeatureFeatureSpecificSubfeatureOptionsFrom `json:"from,omitempty"`
	Type   *string                                        `json:"type,omitempty"`
}

type FeatureFeatureSpecificSubfeatureOptionsFrom struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FeatureParent struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FeaturePrerequisites struct {
	Level *float64 `json:"level,omitempty"`
	Type  *string  `json:"type,omitempty"`
	ID    *string  `json:"_id,omitempty"`
}

type FilterFindManyAbilityScoreDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyAbilityScoreFullNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyAbilityScoreIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyAbilityScoreInput struct {
	ID       *string                                  `json:"_id,omitempty"`
	Desc     []*string                                `json:"desc,omitempty"`
	FullName *string                                  `json:"full_name,omitempty"`
	Index    *string                                  `json:"index,omitempty"`
	Name     *string                                  `json:"name,omitempty"`
	Skills   []*FilterFindManyAbilityScoreSkillsInput `json:"skills,omitempty"`
	URL      *string                                  `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyAbilityScoreOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyAbilityScoreInput        `json:"OR,omitempty"`
	And       []*FilterFindManyAbilityScoreInput        `json:"AND,omitempty"`
}

type FilterFindManyAbilityScoreNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyAbilityScoreOperatorsInput struct {
	ID       *FilterFindManyAbilityScoreIDOperatorsInput       `json:"_id,omitempty"`
	Desc     *FilterFindManyAbilityScoreDescOperatorsInput     `json:"desc,omitempty"`
	FullName *FilterFindManyAbilityScoreFullNameOperatorsInput `json:"full_name,omitempty"`
	Index    *FilterFindManyAbilityScoreIndexOperatorsInput    `json:"index,omitempty"`
	Name     *FilterFindManyAbilityScoreNameOperatorsInput     `json:"name,omitempty"`
	URL      *FilterFindManyAbilityScoreURLOperatorsInput      `json:"url,omitempty"`
}

type FilterFindManyAbilityScoreSkillsInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyAbilityScoreURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyAbilityScoreIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyAlignmentAbbreviationOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyAlignmentDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyAlignmentIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyAlignmentInput struct {
	ID           *string `json:"_id,omitempty"`
	Desc         *string `json:"desc,omitempty"`
	Abbreviation *string `json:"abbreviation,omitempty"`
	Index        *string `json:"index,omitempty"`
	Name         *string `json:"name,omitempty"`
	URL          *string `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyAlignmentOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyAlignmentInput        `json:"OR,omitempty"`
	And       []*FilterFindManyAlignmentInput        `json:"AND,omitempty"`
}

type FilterFindManyAlignmentNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyAlignmentOperatorsInput struct {
	ID           *FilterFindManyAlignmentIDOperatorsInput           `json:"_id,omitempty"`
	Desc         *FilterFindManyAlignmentDescOperatorsInput         `json:"desc,omitempty"`
	Abbreviation *FilterFindManyAlignmentAbbreviationOperatorsInput `json:"abbreviation,omitempty"`
	Index        *FilterFindManyAlignmentIndexOperatorsInput        `json:"index,omitempty"`
	Name         *FilterFindManyAlignmentNameOperatorsInput         `json:"name,omitempty"`
	URL          *FilterFindManyAlignmentURLOperatorsInput          `json:"url,omitempty"`
}

type FilterFindManyAlignmentURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyAlignmentIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyBackgroundBondsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyBackgroundBondsFromOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyBackgroundBondsInput struct {
	Choose *float64  `json:"choose,omitempty"`
	From   []*string `json:"from,omitempty"`
	Type   *string   `json:"type,omitempty"`
}

type FilterFindManyBackgroundBondsOperatorsInput struct {
	Choose *FilterFindManyBackgroundBondsChooseOperatorsInput `json:"choose,omitempty"`
	From   *FilterFindManyBackgroundBondsFromOperatorsInput   `json:"from,omitempty"`
	Type   *FilterFindManyBackgroundBondsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyBackgroundBondsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyBackgroundFeatureDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyBackgroundFeatureInput struct {
	Name *string   `json:"name,omitempty"`
	Desc []*string `json:"desc,omitempty"`
}

type FilterFindManyBackgroundFeatureNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyBackgroundFeatureOperatorsInput struct {
	Name *FilterFindManyBackgroundFeatureNameOperatorsInput `json:"name,omitempty"`
	Desc *FilterFindManyBackgroundFeatureDescOperatorsInput `json:"desc,omitempty"`
}

type FilterFindManyBackgroundFlawsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyBackgroundFlawsFromOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyBackgroundFlawsInput struct {
	Choose *float64  `json:"choose,omitempty"`
	From   []*string `json:"from,omitempty"`
	Type   *string   `json:"type,omitempty"`
}

type FilterFindManyBackgroundFlawsOperatorsInput struct {
	Choose *FilterFindManyBackgroundFlawsChooseOperatorsInput `json:"choose,omitempty"`
	From   *FilterFindManyBackgroundFlawsFromOperatorsInput   `json:"from,omitempty"`
	Type   *FilterFindManyBackgroundFlawsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyBackgroundFlawsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyBackgroundIdealsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyBackgroundIdealsFromAlignmentsInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyBackgroundIdealsFromInput struct {
	Desc       *string                                              `json:"desc,omitempty"`
	Alignments []*FilterFindManyBackgroundIdealsFromAlignmentsInput `json:"alignments,omitempty"`
	ID         *string                                              `json:"_id,omitempty"`
}

type FilterFindManyBackgroundIdealsInput struct {
	Choose *float64                                   `json:"choose,omitempty"`
	From   []*FilterFindManyBackgroundIdealsFromInput `json:"from,omitempty"`
	Type   *string                                    `json:"type,omitempty"`
}

type FilterFindManyBackgroundIdealsOperatorsInput struct {
	Choose *FilterFindManyBackgroundIdealsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindManyBackgroundIdealsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyBackgroundIdealsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyBackgroundIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyBackgroundInput struct {
	ID                       *string                                                  `json:"_id,omitempty"`
	Index                    *string                                                  `json:"index,omitempty"`
	Name                     *string                                                  `json:"name,omitempty"`
	StartingProficiencies    []*FilterFindManyBackgroundStartingProficienciesInput    `json:"starting_proficiencies,omitempty"`
	LanguageOptions          *FilterFindManyBackgroundLanguageOptionsInput            `json:"language_options,omitempty"`
	URL                      *string                                                  `json:"url,omitempty"`
	StartingEquipment        []*FilterFindManyBackgroundStartingEquipmentInput        `json:"starting_equipment,omitempty"`
	StartingEquipmentOptions []*FilterFindManyBackgroundStartingEquipmentOptionsInput `json:"starting_equipment_options,omitempty"`
	Feature                  *FilterFindManyBackgroundFeatureInput                    `json:"feature,omitempty"`
	PersonalityTraits        *FilterFindManyBackgroundPersonalityTraitsInput          `json:"personality_traits,omitempty"`
	Ideals                   *FilterFindManyBackgroundIdealsInput                     `json:"ideals,omitempty"`
	Bonds                    *FilterFindManyBackgroundBondsInput                      `json:"bonds,omitempty"`
	Flaws                    *FilterFindManyBackgroundFlawsInput                      `json:"flaws,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyBackgroundOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyBackgroundInput        `json:"OR,omitempty"`
	And       []*FilterFindManyBackgroundInput        `json:"AND,omitempty"`
}

type FilterFindManyBackgroundLanguageOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyBackgroundLanguageOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyBackgroundLanguageOptionsInput struct {
	Choose *float64                                            `json:"choose,omitempty"`
	From   []*FilterFindManyBackgroundLanguageOptionsFromInput `json:"from,omitempty"`
	Type   *string                                             `json:"type,omitempty"`
}

type FilterFindManyBackgroundLanguageOptionsOperatorsInput struct {
	Choose *FilterFindManyBackgroundLanguageOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindManyBackgroundLanguageOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyBackgroundLanguageOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyBackgroundNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyBackgroundOperatorsInput struct {
	ID                *FilterFindManyBackgroundIDOperatorsInput                `json:"_id,omitempty"`
	Index             *FilterFindManyBackgroundIndexOperatorsInput             `json:"index,omitempty"`
	Name              *FilterFindManyBackgroundNameOperatorsInput              `json:"name,omitempty"`
	LanguageOptions   *FilterFindManyBackgroundLanguageOptionsOperatorsInput   `json:"language_options,omitempty"`
	URL               *FilterFindManyBackgroundURLOperatorsInput               `json:"url,omitempty"`
	Feature           *FilterFindManyBackgroundFeatureOperatorsInput           `json:"feature,omitempty"`
	PersonalityTraits *FilterFindManyBackgroundPersonalityTraitsOperatorsInput `json:"personality_traits,omitempty"`
	Ideals            *FilterFindManyBackgroundIdealsOperatorsInput            `json:"ideals,omitempty"`
	Bonds             *FilterFindManyBackgroundBondsOperatorsInput             `json:"bonds,omitempty"`
	Flaws             *FilterFindManyBackgroundFlawsOperatorsInput             `json:"flaws,omitempty"`
}

type FilterFindManyBackgroundPersonalityTraitsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyBackgroundPersonalityTraitsFromOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyBackgroundPersonalityTraitsInput struct {
	Choose *float64  `json:"choose,omitempty"`
	From   []*string `json:"from,omitempty"`
	Type   *string   `json:"type,omitempty"`
}

type FilterFindManyBackgroundPersonalityTraitsOperatorsInput struct {
	Choose *FilterFindManyBackgroundPersonalityTraitsChooseOperatorsInput `json:"choose,omitempty"`
	From   *FilterFindManyBackgroundPersonalityTraitsFromOperatorsInput   `json:"from,omitempty"`
	Type   *FilterFindManyBackgroundPersonalityTraitsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyBackgroundPersonalityTraitsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyBackgroundStartingEquipmentEquipmentInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyBackgroundStartingEquipmentInput struct {
	Equipment *FilterFindManyBackgroundStartingEquipmentEquipmentInput `json:"equipment,omitempty"`
	Quantity  *float64                                                 `json:"quantity,omitempty"`
}

type FilterFindManyBackgroundStartingEquipmentOptionsFromEquipmentInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyBackgroundStartingEquipmentOptionsFromInput struct {
	Equipment *FilterFindManyBackgroundStartingEquipmentOptionsFromEquipmentInput `json:"equipment,omitempty"`
	Quantity  *float64                                                            `json:"quantity,omitempty"`
}

type FilterFindManyBackgroundStartingEquipmentOptionsInput struct {
	Choose *float64                                                     `json:"choose,omitempty"`
	From   []*FilterFindManyBackgroundStartingEquipmentOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                      `json:"type,omitempty"`
}

type FilterFindManyBackgroundStartingProficienciesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyBackgroundURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyBackgroundIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyClassClassLevelsOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyClassHitDieOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyClassIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyClassInput struct {
	ID                       *string                                             `json:"_id,omitempty"`
	ClassLevels              *string                                             `json:"class_levels,omitempty"`
	MultiClassing            *FilterFindManyClassMultiClassingInput              `json:"multi_classing,omitempty"`
	HitDie                   *float64                                            `json:"hit_die,omitempty"`
	Index                    *string                                             `json:"index,omitempty"`
	Name                     *string                                             `json:"name,omitempty"`
	Proficiencies            []*FilterFindManyClassProficienciesInput            `json:"proficiencies,omitempty"`
	ProficiencyChoices       []*FilterFindManyClassProficiencyChoicesInput       `json:"proficiency_choices,omitempty"`
	SavingThrows             []*FilterFindManyClassSavingThrowsInput             `json:"saving_throws,omitempty"`
	Spellcasting             *FilterFindManyClassSpellcastingInput               `json:"spellcasting,omitempty"`
	Spells                   *string                                             `json:"spells,omitempty"`
	StartingEquipment        []*FilterFindManyClassStartingEquipmentInput        `json:"starting_equipment,omitempty"`
	StartingEquipmentOptions []*FilterFindManyClassStartingEquipmentOptionsInput `json:"starting_equipment_options,omitempty"`
	Subclasses               []*FilterFindManyClassSubclassesInput               `json:"subclasses,omitempty"`
	URL                      *string                                             `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyClassOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyClassInput        `json:"OR,omitempty"`
	And       []*FilterFindManyClassInput        `json:"AND,omitempty"`
}

type FilterFindManyClassMultiClassingInput struct {
	Prerequisites       []*FilterFindManyClassMultiClassingPrerequisitesInput      `json:"prerequisites,omitempty"`
	PrerequisiteOptions *FilterFindManyClassMultiClassingPrerequisiteOptionsInput  `json:"prerequisite_options,omitempty"`
	Proficiencies       []*FilterFindManyClassMultiClassingProficienciesInput      `json:"proficiencies,omitempty"`
	ProficiencyChoices  []*FilterFindManyClassMultiClassingProficiencyChoicesInput `json:"proficiency_choices,omitempty"`
}

type FilterFindManyClassMultiClassingOperatorsInput struct {
	PrerequisiteOptions *FilterFindManyClassMultiClassingPrerequisiteOptionsOperatorsInput `json:"prerequisite_options,omitempty"`
}

type FilterFindManyClassMultiClassingPrerequisiteOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyClassMultiClassingPrerequisiteOptionsFromAbilityScoreInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyClassMultiClassingPrerequisiteOptionsFromInput struct {
	AbilityScore *FilterFindManyClassMultiClassingPrerequisiteOptionsFromAbilityScoreInput `json:"ability_score,omitempty"`
	MinimumScore *float64                                                                  `json:"minimum_score,omitempty"`
	ID           *string                                                                   `json:"_id,omitempty"`
}

type FilterFindManyClassMultiClassingPrerequisiteOptionsInput struct {
	Choose *float64                                                        `json:"choose,omitempty"`
	From   []*FilterFindManyClassMultiClassingPrerequisiteOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                         `json:"type,omitempty"`
}

type FilterFindManyClassMultiClassingPrerequisiteOptionsOperatorsInput struct {
	Choose *FilterFindManyClassMultiClassingPrerequisiteOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindManyClassMultiClassingPrerequisiteOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyClassMultiClassingPrerequisiteOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyClassMultiClassingPrerequisitesAbilityScoreInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyClassMultiClassingPrerequisitesInput struct {
	AbilityScore *FilterFindManyClassMultiClassingPrerequisitesAbilityScoreInput `json:"ability_score,omitempty"`
	MinimumScore *float64                                                        `json:"minimum_score,omitempty"`
	ID           *string                                                         `json:"_id,omitempty"`
}

type FilterFindManyClassMultiClassingProficienciesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyClassMultiClassingProficiencyChoicesFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyClassMultiClassingProficiencyChoicesInput struct {
	Choose *float64                                                       `json:"choose,omitempty"`
	From   []*FilterFindManyClassMultiClassingProficiencyChoicesFromInput `json:"from,omitempty"`
	Type   *string                                                        `json:"type,omitempty"`
	ID     *string                                                        `json:"_id,omitempty"`
}

type FilterFindManyClassNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyClassOperatorsInput struct {
	ID            *FilterFindManyClassIDOperatorsInput            `json:"_id,omitempty"`
	ClassLevels   *FilterFindManyClassClassLevelsOperatorsInput   `json:"class_levels,omitempty"`
	MultiClassing *FilterFindManyClassMultiClassingOperatorsInput `json:"multi_classing,omitempty"`
	HitDie        *FilterFindManyClassHitDieOperatorsInput        `json:"hit_die,omitempty"`
	Index         *FilterFindManyClassIndexOperatorsInput         `json:"index,omitempty"`
	Name          *FilterFindManyClassNameOperatorsInput          `json:"name,omitempty"`
	Spellcasting  *FilterFindManyClassSpellcastingOperatorsInput  `json:"spellcasting,omitempty"`
	Spells        *FilterFindManyClassSpellsOperatorsInput        `json:"spells,omitempty"`
	URL           *FilterFindManyClassURLOperatorsInput           `json:"url,omitempty"`
}

type FilterFindManyClassProficienciesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyClassProficiencyChoicesFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyClassProficiencyChoicesInput struct {
	Choose *float64                                          `json:"choose,omitempty"`
	From   []*FilterFindManyClassProficiencyChoicesFromInput `json:"from,omitempty"`
	Type   *string                                           `json:"type,omitempty"`
	ID     *string                                           `json:"_id,omitempty"`
}

type FilterFindManyClassSavingThrowsInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyClassSpellcastingInfoInput struct {
	Desc []*string `json:"desc,omitempty"`
	Name *string   `json:"name,omitempty"`
	ID   *string   `json:"_id,omitempty"`
}

type FilterFindManyClassSpellcastingInput struct {
	Info                []*FilterFindManyClassSpellcastingInfoInput              `json:"info,omitempty"`
	Level               *float64                                                 `json:"level,omitempty"`
	SpellcastingAbility *FilterFindManyClassSpellcastingSpellcastingAbilityInput `json:"spellcasting_ability,omitempty"`
}

type FilterFindManyClassSpellcastingLevelOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyClassSpellcastingOperatorsInput struct {
	Level               *FilterFindManyClassSpellcastingLevelOperatorsInput               `json:"level,omitempty"`
	SpellcastingAbility *FilterFindManyClassSpellcastingSpellcastingAbilityOperatorsInput `json:"spellcasting_ability,omitempty"`
}

type FilterFindManyClassSpellcastingSpellcastingAbilityIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyClassSpellcastingSpellcastingAbilityInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyClassSpellcastingSpellcastingAbilityNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyClassSpellcastingSpellcastingAbilityOperatorsInput struct {
	Index *FilterFindManyClassSpellcastingSpellcastingAbilityIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyClassSpellcastingSpellcastingAbilityNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyClassSpellcastingSpellcastingAbilityURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyClassSpellcastingSpellcastingAbilityURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyClassSpellsOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyClassStartingEquipmentEquipmentInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyClassStartingEquipmentInput struct {
	Equipment *FilterFindManyClassStartingEquipmentEquipmentInput `json:"equipment,omitempty"`
	Quantity  *float64                                            `json:"quantity,omitempty"`
	ID        *string                                             `json:"_id,omitempty"`
}

type FilterFindManyClassStartingEquipmentOptionsFromEquipmentInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyClassStartingEquipmentOptionsFromInput struct {
	Equipment *FilterFindManyClassStartingEquipmentOptionsFromEquipmentInput `json:"equipment,omitempty"`
	Quantity  *float64                                                       `json:"quantity,omitempty"`
	ID        *string                                                        `json:"_id,omitempty"`
}

type FilterFindManyClassStartingEquipmentOptionsInput struct {
	Choose *float64                                                `json:"choose,omitempty"`
	From   []*FilterFindManyClassStartingEquipmentOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                 `json:"type,omitempty"`
	ID     *string                                                 `json:"_id,omitempty"`
}

type FilterFindManyClassSubclassesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyClassURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyClassIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyConditionDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyConditionIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyConditionInput struct {
	ID    *string   `json:"_id,omitempty"`
	Desc  []*string `json:"desc,omitempty"`
	Index *string   `json:"index,omitempty"`
	Name  *string   `json:"name,omitempty"`
	URL   *string   `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyConditionOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyConditionInput        `json:"OR,omitempty"`
	And       []*FilterFindManyConditionInput        `json:"AND,omitempty"`
}

type FilterFindManyConditionNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyConditionOperatorsInput struct {
	ID    *FilterFindManyConditionIDOperatorsInput    `json:"_id,omitempty"`
	Desc  *FilterFindManyConditionDescOperatorsInput  `json:"desc,omitempty"`
	Index *FilterFindManyConditionIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyConditionNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyConditionURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyConditionURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyConditionIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyDamageTypeDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyDamageTypeIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyDamageTypeInput struct {
	ID    *string   `json:"_id,omitempty"`
	Desc  []*string `json:"desc,omitempty"`
	Index *string   `json:"index,omitempty"`
	Name  *string   `json:"name,omitempty"`
	URL   *string   `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyDamageTypeOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyDamageTypeInput        `json:"OR,omitempty"`
	And       []*FilterFindManyDamageTypeInput        `json:"AND,omitempty"`
}

type FilterFindManyDamageTypeNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyDamageTypeOperatorsInput struct {
	ID    *FilterFindManyDamageTypeIDOperatorsInput    `json:"_id,omitempty"`
	Desc  *FilterFindManyDamageTypeDescOperatorsInput  `json:"desc,omitempty"`
	Index *FilterFindManyDamageTypeIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyDamageTypeNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyDamageTypeURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyDamageTypeURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyDamageTypeIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentArmorCategoryOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentArmorClassBaseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyEquipmentArmorClassDexBonusOperatorsInput struct {
	Gt     *bool   `json:"gt,omitempty"`
	Gte    *bool   `json:"gte,omitempty"`
	Lt     *bool   `json:"lt,omitempty"`
	Lte    *bool   `json:"lte,omitempty"`
	Ne     *bool   `json:"ne,omitempty"`
	In     []*bool `json:"in,omitempty"`
	Nin    []*bool `json:"nin,omitempty"`
	Exists *bool   `json:"exists,omitempty"`
}

type FilterFindManyEquipmentArmorClassInput struct {
	Base     *float64 `json:"base,omitempty"`
	DexBonus *bool    `json:"dex_bonus,omitempty"`
	MaxBonus *float64 `json:"max_bonus,omitempty"`
}

type FilterFindManyEquipmentArmorClassMaxBonusOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyEquipmentArmorClassOperatorsInput struct {
	Base     *FilterFindManyEquipmentArmorClassBaseOperatorsInput     `json:"base,omitempty"`
	DexBonus *FilterFindManyEquipmentArmorClassDexBonusOperatorsInput `json:"dex_bonus,omitempty"`
	MaxBonus *FilterFindManyEquipmentArmorClassMaxBonusOperatorsInput `json:"max_bonus,omitempty"`
}

type FilterFindManyEquipmentCapacityOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentCategoryEquipmentInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyEquipmentCategoryIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentCategoryInput struct {
	ID        *string                                          `json:"_id,omitempty"`
	Equipment []*FilterFindManyEquipmentCategoryEquipmentInput `json:"equipment,omitempty"`
	Index     *string                                          `json:"index,omitempty"`
	Name      *string                                          `json:"name,omitempty"`
	URL       *string                                          `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyEquipmentCategoryOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyEquipmentCategoryInput        `json:"OR,omitempty"`
	And       []*FilterFindManyEquipmentCategoryInput        `json:"AND,omitempty"`
}

type FilterFindManyEquipmentCategoryNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyEquipmentCategoryOperatorsInput struct {
	ID    *FilterFindManyEquipmentCategoryIDOperatorsInput    `json:"_id,omitempty"`
	Index *FilterFindManyEquipmentCategoryIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyEquipmentCategoryNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyEquipmentCategoryURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyEquipmentCategoryURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentCategoryIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentCategoryRangeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentContentsInput struct {
	Item     *FilterFindManyEquipmentContentsItemInput `json:"item,omitempty"`
	Quantity *float64                                  `json:"quantity,omitempty"`
	ID       *string                                   `json:"_id,omitempty"`
}

type FilterFindManyEquipmentContentsItemInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyEquipmentCostInput struct {
	Quantity *float64 `json:"quantity,omitempty"`
	Unit     *string  `json:"unit,omitempty"`
}

type FilterFindManyEquipmentCostOperatorsInput struct {
	Quantity *FilterFindManyEquipmentCostQuantityOperatorsInput `json:"quantity,omitempty"`
	Unit     *FilterFindManyEquipmentCostUnitOperatorsInput     `json:"unit,omitempty"`
}

type FilterFindManyEquipmentCostQuantityOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyEquipmentCostUnitOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentDamageDamageDiceOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentDamageDamageTypeIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentDamageDamageTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyEquipmentDamageDamageTypeNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentDamageDamageTypeOperatorsInput struct {
	Index *FilterFindManyEquipmentDamageDamageTypeIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyEquipmentDamageDamageTypeNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyEquipmentDamageDamageTypeURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyEquipmentDamageDamageTypeURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentDamageInput struct {
	DamageDice *string                                       `json:"damage_dice,omitempty"`
	DamageType *FilterFindManyEquipmentDamageDamageTypeInput `json:"damage_type,omitempty"`
}

type FilterFindManyEquipmentDamageOperatorsInput struct {
	DamageDice *FilterFindManyEquipmentDamageDamageDiceOperatorsInput `json:"damage_dice,omitempty"`
	DamageType *FilterFindManyEquipmentDamageDamageTypeOperatorsInput `json:"damage_type,omitempty"`
}

type FilterFindManyEquipmentDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentEquipmentCategoryIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentEquipmentCategoryInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyEquipmentEquipmentCategoryNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentEquipmentCategoryOperatorsInput struct {
	Index *FilterFindManyEquipmentEquipmentCategoryIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyEquipmentEquipmentCategoryNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyEquipmentEquipmentCategoryURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyEquipmentEquipmentCategoryURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentGearCategoryIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentGearCategoryInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyEquipmentGearCategoryNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentGearCategoryOperatorsInput struct {
	Index *FilterFindManyEquipmentGearCategoryIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyEquipmentGearCategoryNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyEquipmentGearCategoryURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyEquipmentGearCategoryURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentInput struct {
	ID                  *string                                        `json:"_id,omitempty"`
	ArmorCategory       *string                                        `json:"armor_category,omitempty"`
	ArmorClass          *FilterFindManyEquipmentArmorClassInput        `json:"armor_class,omitempty"`
	Capacity            *string                                        `json:"capacity,omitempty"`
	CategoryRange       *string                                        `json:"category_range,omitempty"`
	Contents            []*FilterFindManyEquipmentContentsInput        `json:"contents,omitempty"`
	Cost                *FilterFindManyEquipmentCostInput              `json:"cost,omitempty"`
	Damage              *FilterFindManyEquipmentDamageInput            `json:"damage,omitempty"`
	Desc                []*string                                      `json:"desc,omitempty"`
	EquipmentCategory   *FilterFindManyEquipmentEquipmentCategoryInput `json:"equipment_category,omitempty"`
	GearCategory        *FilterFindManyEquipmentGearCategoryInput      `json:"gear_category,omitempty"`
	Index               *string                                        `json:"index,omitempty"`
	Name                *string                                        `json:"name,omitempty"`
	Properties          []*FilterFindManyEquipmentPropertiesInput      `json:"properties,omitempty"`
	Quantity            *float64                                       `json:"quantity,omitempty"`
	Range               *FilterFindManyEquipmentRangeInput             `json:"range,omitempty"`
	Special             []*string                                      `json:"special,omitempty"`
	Speed               *FilterFindManyEquipmentSpeedInput             `json:"speed,omitempty"`
	StealthDisadvantage *bool                                          `json:"stealth_disadvantage,omitempty"`
	StrMinimum          *float64                                       `json:"str_minimum,omitempty"`
	ThrowRange          *FilterFindManyEquipmentThrowRangeInput        `json:"throw_range,omitempty"`
	ToolCategory        *string                                        `json:"tool_category,omitempty"`
	TwoHandedDamage     *FilterFindManyEquipmentTwoHandedDamageInput   `json:"two_handed_damage,omitempty"`
	URL                 *string                                        `json:"url,omitempty"`
	VehicleCategory     *string                                        `json:"vehicle_category,omitempty"`
	WeaponCategory      *string                                        `json:"weapon_category,omitempty"`
	WeaponRange         *string                                        `json:"weapon_range,omitempty"`
	Weight              *float64                                       `json:"weight,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyEquipmentOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyEquipmentInput        `json:"OR,omitempty"`
	And       []*FilterFindManyEquipmentInput        `json:"AND,omitempty"`
}

type FilterFindManyEquipmentNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyEquipmentOperatorsInput struct {
	ID                  *FilterFindManyEquipmentIDOperatorsInput                  `json:"_id,omitempty"`
	ArmorCategory       *FilterFindManyEquipmentArmorCategoryOperatorsInput       `json:"armor_category,omitempty"`
	ArmorClass          *FilterFindManyEquipmentArmorClassOperatorsInput          `json:"armor_class,omitempty"`
	Capacity            *FilterFindManyEquipmentCapacityOperatorsInput            `json:"capacity,omitempty"`
	CategoryRange       *FilterFindManyEquipmentCategoryRangeOperatorsInput       `json:"category_range,omitempty"`
	Cost                *FilterFindManyEquipmentCostOperatorsInput                `json:"cost,omitempty"`
	Damage              *FilterFindManyEquipmentDamageOperatorsInput              `json:"damage,omitempty"`
	Desc                *FilterFindManyEquipmentDescOperatorsInput                `json:"desc,omitempty"`
	EquipmentCategory   *FilterFindManyEquipmentEquipmentCategoryOperatorsInput   `json:"equipment_category,omitempty"`
	GearCategory        *FilterFindManyEquipmentGearCategoryOperatorsInput        `json:"gear_category,omitempty"`
	Index               *FilterFindManyEquipmentIndexOperatorsInput               `json:"index,omitempty"`
	Name                *FilterFindManyEquipmentNameOperatorsInput                `json:"name,omitempty"`
	Quantity            *FilterFindManyEquipmentQuantityOperatorsInput            `json:"quantity,omitempty"`
	Range               *FilterFindManyEquipmentRangeOperatorsInput               `json:"range,omitempty"`
	Special             *FilterFindManyEquipmentSpecialOperatorsInput             `json:"special,omitempty"`
	Speed               *FilterFindManyEquipmentSpeedOperatorsInput               `json:"speed,omitempty"`
	StealthDisadvantage *FilterFindManyEquipmentStealthDisadvantageOperatorsInput `json:"stealth_disadvantage,omitempty"`
	StrMinimum          *FilterFindManyEquipmentStrMinimumOperatorsInput          `json:"str_minimum,omitempty"`
	ThrowRange          *FilterFindManyEquipmentThrowRangeOperatorsInput          `json:"throw_range,omitempty"`
	ToolCategory        *FilterFindManyEquipmentToolCategoryOperatorsInput        `json:"tool_category,omitempty"`
	TwoHandedDamage     *FilterFindManyEquipmentTwoHandedDamageOperatorsInput     `json:"two_handed_damage,omitempty"`
	URL                 *FilterFindManyEquipmentURLOperatorsInput                 `json:"url,omitempty"`
	VehicleCategory     *FilterFindManyEquipmentVehicleCategoryOperatorsInput     `json:"vehicle_category,omitempty"`
	WeaponCategory      *FilterFindManyEquipmentWeaponCategoryOperatorsInput      `json:"weapon_category,omitempty"`
	WeaponRange         *FilterFindManyEquipmentWeaponRangeOperatorsInput         `json:"weapon_range,omitempty"`
	Weight              *FilterFindManyEquipmentWeightOperatorsInput              `json:"weight,omitempty"`
}

type FilterFindManyEquipmentPropertiesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyEquipmentQuantityOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyEquipmentRangeInput struct {
	Long   *float64 `json:"long,omitempty"`
	Normal *float64 `json:"normal,omitempty"`
}

type FilterFindManyEquipmentRangeLongOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyEquipmentRangeNormalOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyEquipmentRangeOperatorsInput struct {
	Long   *FilterFindManyEquipmentRangeLongOperatorsInput   `json:"long,omitempty"`
	Normal *FilterFindManyEquipmentRangeNormalOperatorsInput `json:"normal,omitempty"`
}

type FilterFindManyEquipmentSpecialOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentSpeedInput struct {
	Quantity *float64 `json:"quantity,omitempty"`
	Unit     *string  `json:"unit,omitempty"`
}

type FilterFindManyEquipmentSpeedOperatorsInput struct {
	Quantity *FilterFindManyEquipmentSpeedQuantityOperatorsInput `json:"quantity,omitempty"`
	Unit     *FilterFindManyEquipmentSpeedUnitOperatorsInput     `json:"unit,omitempty"`
}

type FilterFindManyEquipmentSpeedQuantityOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyEquipmentSpeedUnitOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentStealthDisadvantageOperatorsInput struct {
	Gt     *bool   `json:"gt,omitempty"`
	Gte    *bool   `json:"gte,omitempty"`
	Lt     *bool   `json:"lt,omitempty"`
	Lte    *bool   `json:"lte,omitempty"`
	Ne     *bool   `json:"ne,omitempty"`
	In     []*bool `json:"in,omitempty"`
	Nin    []*bool `json:"nin,omitempty"`
	Exists *bool   `json:"exists,omitempty"`
}

type FilterFindManyEquipmentStrMinimumOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyEquipmentThrowRangeInput struct {
	Long   *float64 `json:"long,omitempty"`
	Normal *float64 `json:"normal,omitempty"`
}

type FilterFindManyEquipmentThrowRangeLongOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyEquipmentThrowRangeNormalOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyEquipmentThrowRangeOperatorsInput struct {
	Long   *FilterFindManyEquipmentThrowRangeLongOperatorsInput   `json:"long,omitempty"`
	Normal *FilterFindManyEquipmentThrowRangeNormalOperatorsInput `json:"normal,omitempty"`
}

type FilterFindManyEquipmentToolCategoryOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentTwoHandedDamageDamageDiceOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentTwoHandedDamageDamageTypeIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentTwoHandedDamageDamageTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyEquipmentTwoHandedDamageDamageTypeNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentTwoHandedDamageDamageTypeOperatorsInput struct {
	Index *FilterFindManyEquipmentTwoHandedDamageDamageTypeIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyEquipmentTwoHandedDamageDamageTypeNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyEquipmentTwoHandedDamageDamageTypeURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyEquipmentTwoHandedDamageDamageTypeURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentTwoHandedDamageInput struct {
	DamageDice *string                                                `json:"damage_dice,omitempty"`
	DamageType *FilterFindManyEquipmentTwoHandedDamageDamageTypeInput `json:"damage_type,omitempty"`
}

type FilterFindManyEquipmentTwoHandedDamageOperatorsInput struct {
	DamageDice *FilterFindManyEquipmentTwoHandedDamageDamageDiceOperatorsInput `json:"damage_dice,omitempty"`
	DamageType *FilterFindManyEquipmentTwoHandedDamageDamageTypeOperatorsInput `json:"damage_type,omitempty"`
}

type FilterFindManyEquipmentURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentVehicleCategoryOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentWeaponCategoryOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentWeaponRangeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyEquipmentWeightOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyEquipmentIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatInput struct {
	ID            *string                                 `json:"_id,omitempty"`
	Index         *string                                 `json:"index,omitempty"`
	Name          *string                                 `json:"name,omitempty"`
	Prerequisites []*FilterFindManyFeatPrerequisitesInput `json:"prerequisites,omitempty"`
	Desc          []*string                               `json:"desc,omitempty"`
	URL           *string                                 `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyFeatOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyFeatInput        `json:"OR,omitempty"`
	And       []*FilterFindManyFeatInput        `json:"AND,omitempty"`
}

type FilterFindManyFeatNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyFeatOperatorsInput struct {
	ID    *FilterFindManyFeatIDOperatorsInput    `json:"_id,omitempty"`
	Index *FilterFindManyFeatIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyFeatNameOperatorsInput  `json:"name,omitempty"`
	Desc  *FilterFindManyFeatDescOperatorsInput  `json:"desc,omitempty"`
	URL   *FilterFindManyFeatURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyFeatPrerequisitesAbilityScoreInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyFeatPrerequisitesInput struct {
	AbilityScore *FilterFindManyFeatPrerequisitesAbilityScoreInput `json:"ability_score,omitempty"`
	MinimumScore *float64                                          `json:"minimum_score,omitempty"`
	ID           *string                                           `json:"_id,omitempty"`
}

type FilterFindManyFeatURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureChoiceChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyFeatureChoiceFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyFeatureChoiceInput struct {
	Choose *float64                                `json:"choose,omitempty"`
	From   []*FilterFindManyFeatureChoiceFromInput `json:"from,omitempty"`
	Type   *string                                 `json:"type,omitempty"`
}

type FilterFindManyFeatureChoiceOperatorsInput struct {
	Choose *FilterFindManyFeatureChoiceChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindManyFeatureChoiceTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyFeatureChoiceTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureClassIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureClassInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyFeatureClassNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureClassOperatorsInput struct {
	Index *FilterFindManyFeatureClassIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyFeatureClassNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyFeatureClassURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyFeatureClassURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureFeatureSpecificExpertiseOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyFeatureFeatureSpecificExpertiseOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyFeatureFeatureSpecificExpertiseOptionsInput struct {
	Choose *float64                                                         `json:"choose,omitempty"`
	From   []*FilterFindManyFeatureFeatureSpecificExpertiseOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                          `json:"type,omitempty"`
}

type FilterFindManyFeatureFeatureSpecificExpertiseOptionsOperatorsInput struct {
	Choose *FilterFindManyFeatureFeatureSpecificExpertiseOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindManyFeatureFeatureSpecificExpertiseOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyFeatureFeatureSpecificExpertiseOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureFeatureSpecificInput struct {
	SubfeatureOptions *FilterFindManyFeatureFeatureSpecificSubfeatureOptionsInput `json:"subfeature_options,omitempty"`
	ExpertiseOptions  *FilterFindManyFeatureFeatureSpecificExpertiseOptionsInput  `json:"expertise_options,omitempty"`
}

type FilterFindManyFeatureFeatureSpecificOperatorsInput struct {
	SubfeatureOptions *FilterFindManyFeatureFeatureSpecificSubfeatureOptionsOperatorsInput `json:"subfeature_options,omitempty"`
	ExpertiseOptions  *FilterFindManyFeatureFeatureSpecificExpertiseOptionsOperatorsInput  `json:"expertise_options,omitempty"`
}

type FilterFindManyFeatureFeatureSpecificSubfeatureOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyFeatureFeatureSpecificSubfeatureOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyFeatureFeatureSpecificSubfeatureOptionsInput struct {
	Choose *float64                                                          `json:"choose,omitempty"`
	From   []*FilterFindManyFeatureFeatureSpecificSubfeatureOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                           `json:"type,omitempty"`
}

type FilterFindManyFeatureFeatureSpecificSubfeatureOptionsOperatorsInput struct {
	Choose *FilterFindManyFeatureFeatureSpecificSubfeatureOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindManyFeatureFeatureSpecificSubfeatureOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyFeatureFeatureSpecificSubfeatureOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureInput struct {
	ID              *string                                    `json:"_id,omitempty"`
	Choice          *FilterFindManyFeatureChoiceInput          `json:"choice,omitempty"`
	Class           *FilterFindManyFeatureClassInput           `json:"class,omitempty"`
	Desc            []*string                                  `json:"desc,omitempty"`
	Parent          *FilterFindManyFeatureParentInput          `json:"parent,omitempty"`
	Index           *string                                    `json:"index,omitempty"`
	Level           *float64                                   `json:"level,omitempty"`
	Name            *string                                    `json:"name,omitempty"`
	Prerequisites   []*FilterFindManyFeaturePrerequisitesInput `json:"prerequisites,omitempty"`
	Reference       *string                                    `json:"reference,omitempty"`
	Subclass        *FilterFindManyFeatureSubclassInput        `json:"subclass,omitempty"`
	FeatureSpecific *FilterFindManyFeatureFeatureSpecificInput `json:"feature_specific,omitempty"`
	URL             *string                                    `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyFeatureOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyFeatureInput        `json:"OR,omitempty"`
	And       []*FilterFindManyFeatureInput        `json:"AND,omitempty"`
}

type FilterFindManyFeatureLevelOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyFeatureNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyFeatureOperatorsInput struct {
	ID              *FilterFindManyFeatureIDOperatorsInput              `json:"_id,omitempty"`
	Choice          *FilterFindManyFeatureChoiceOperatorsInput          `json:"choice,omitempty"`
	Class           *FilterFindManyFeatureClassOperatorsInput           `json:"class,omitempty"`
	Desc            *FilterFindManyFeatureDescOperatorsInput            `json:"desc,omitempty"`
	Parent          *FilterFindManyFeatureParentOperatorsInput          `json:"parent,omitempty"`
	Index           *FilterFindManyFeatureIndexOperatorsInput           `json:"index,omitempty"`
	Level           *FilterFindManyFeatureLevelOperatorsInput           `json:"level,omitempty"`
	Name            *FilterFindManyFeatureNameOperatorsInput            `json:"name,omitempty"`
	Reference       *FilterFindManyFeatureReferenceOperatorsInput       `json:"reference,omitempty"`
	Subclass        *FilterFindManyFeatureSubclassOperatorsInput        `json:"subclass,omitempty"`
	FeatureSpecific *FilterFindManyFeatureFeatureSpecificOperatorsInput `json:"feature_specific,omitempty"`
	URL             *FilterFindManyFeatureURLOperatorsInput             `json:"url,omitempty"`
}

type FilterFindManyFeatureParentIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureParentInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyFeatureParentNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureParentOperatorsInput struct {
	Index *FilterFindManyFeatureParentIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyFeatureParentNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyFeatureParentURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyFeatureParentURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeaturePrerequisitesInput struct {
	Level *float64 `json:"level,omitempty"`
	Type  *string  `json:"type,omitempty"`
	ID    *string  `json:"_id,omitempty"`
}

type FilterFindManyFeatureReferenceOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureSubclassIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureSubclassInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyFeatureSubclassNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureSubclassOperatorsInput struct {
	Index *FilterFindManyFeatureSubclassIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyFeatureSubclassNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyFeatureSubclassURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyFeatureSubclassURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyFeatureIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLanguageDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLanguageIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLanguageInput struct {
	ID              *string   `json:"_id,omitempty"`
	Desc            *string   `json:"desc,omitempty"`
	Index           *string   `json:"index,omitempty"`
	Name            *string   `json:"name,omitempty"`
	Script          *string   `json:"script,omitempty"`
	Type            *string   `json:"type,omitempty"`
	TypicalSpeakers []*string `json:"typical_speakers,omitempty"`
	URL             *string   `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyLanguageOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyLanguageInput        `json:"OR,omitempty"`
	And       []*FilterFindManyLanguageInput        `json:"AND,omitempty"`
}

type FilterFindManyLanguageNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyLanguageOperatorsInput struct {
	ID              *FilterFindManyLanguageIDOperatorsInput              `json:"_id,omitempty"`
	Desc            *FilterFindManyLanguageDescOperatorsInput            `json:"desc,omitempty"`
	Index           *FilterFindManyLanguageIndexOperatorsInput           `json:"index,omitempty"`
	Name            *FilterFindManyLanguageNameOperatorsInput            `json:"name,omitempty"`
	Script          *FilterFindManyLanguageScriptOperatorsInput          `json:"script,omitempty"`
	Type            *FilterFindManyLanguageTypeOperatorsInput            `json:"type,omitempty"`
	TypicalSpeakers *FilterFindManyLanguageTypicalSpeakersOperatorsInput `json:"typical_speakers,omitempty"`
	URL             *FilterFindManyLanguageURLOperatorsInput             `json:"url,omitempty"`
}

type FilterFindManyLanguageScriptOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLanguageTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLanguageTypicalSpeakersOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLanguageURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLanguageIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLevelAbilityScoreBonusesOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLevelClassInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyLevelClassNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLevelClassOperatorsInput struct {
	Index *FilterFindManyLevelClassIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyLevelClassNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyLevelClassURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyLevelClassURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificActionSurgesOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificArcaneRecoveryLevelsOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificAuraRangeOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificBardicInspirationDieOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificBrutalCriticalDiceOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificChannelDivinityChargesOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificCreatingSpellSlotsInput struct {
	SorceryPointCost *float64 `json:"sorcery_point_cost,omitempty"`
	SpellSlotLevel   *float64 `json:"spell_slot_level,omitempty"`
	ID               *string  `json:"_id,omitempty"`
}

type FilterFindManyLevelClassSpecificDestroyUndeadCrOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificExtraAttacksOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificFavoredEnemiesOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificFavoredTerrainOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificIndomitableUsesOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificInput struct {
	ActionSurges           *float64                                                   `json:"action_surges,omitempty"`
	ArcaneRecoveryLevels   *float64                                                   `json:"arcane_recovery_levels,omitempty"`
	AuraRange              *float64                                                   `json:"aura_range,omitempty"`
	BardicInspirationDie   *float64                                                   `json:"bardic_inspiration_die,omitempty"`
	BrutalCriticalDice     *float64                                                   `json:"brutal_critical_dice,omitempty"`
	ChannelDivinityCharges *float64                                                   `json:"channel_divinity_charges,omitempty"`
	CreatingSpellSlots     []*FilterFindManyLevelClassSpecificCreatingSpellSlotsInput `json:"creating_spell_slots,omitempty"`
	DestroyUndeadCr        *float64                                                   `json:"destroy_undead_cr,omitempty"`
	ExtraAttacks           *float64                                                   `json:"extra_attacks,omitempty"`
	FavoredEnemies         *float64                                                   `json:"favored_enemies,omitempty"`
	FavoredTerrain         *float64                                                   `json:"favored_terrain,omitempty"`
	IndomitableUses        *float64                                                   `json:"indomitable_uses,omitempty"`
	InvocationsKnown       *float64                                                   `json:"invocations_known,omitempty"`
	KiPoints               *float64                                                   `json:"ki_points,omitempty"`
	MagicalSecretsMax5     *float64                                                   `json:"magical_secrets_max_5,omitempty"`
	MagicalSecretsMax7     *float64                                                   `json:"magical_secrets_max_7,omitempty"`
	MagicalSecretsMax9     *float64                                                   `json:"magical_secrets_max_9,omitempty"`
	MartialArts            *FilterFindManyLevelClassSpecificMartialArtsInput          `json:"martial_arts,omitempty"`
	MetamagicKnown         *float64                                                   `json:"metamagic_known,omitempty"`
	MysticArcanumLevel6    *float64                                                   `json:"mystic_arcanum_level_6,omitempty"`
	MysticArcanumLevel7    *float64                                                   `json:"mystic_arcanum_level_7,omitempty"`
	MysticArcanumLevel8    *float64                                                   `json:"mystic_arcanum_level_8,omitempty"`
	MysticArcanumLevel9    *float64                                                   `json:"mystic_arcanum_level_9,omitempty"`
	RageCount              *float64                                                   `json:"rage_count,omitempty"`
	RageDamageBonus        *float64                                                   `json:"rage_damage_bonus,omitempty"`
	SneakAttack            *FilterFindManyLevelClassSpecificSneakAttackInput          `json:"sneak_attack,omitempty"`
	SongOfRestDie          *float64                                                   `json:"song_of_rest_die,omitempty"`
	SorceryPoints          *float64                                                   `json:"sorcery_points,omitempty"`
	UnarmoredMovement      *float64                                                   `json:"unarmored_movement,omitempty"`
	WildShapeFly           *bool                                                      `json:"wild_shape_fly,omitempty"`
	WildShapeMaxCr         *float64                                                   `json:"wild_shape_max_cr,omitempty"`
	WildShapeSwim          *bool                                                      `json:"wild_shape_swim,omitempty"`
}

type FilterFindManyLevelClassSpecificInvocationsKnownOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificKiPointsOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificMagicalSecretsMax5OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificMagicalSecretsMax7OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificMagicalSecretsMax9OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificMartialArtsDiceCountOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificMartialArtsDiceValueOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificMartialArtsInput struct {
	DiceCount *float64 `json:"dice_count,omitempty"`
	DiceValue *float64 `json:"dice_value,omitempty"`
}

type FilterFindManyLevelClassSpecificMartialArtsOperatorsInput struct {
	DiceCount *FilterFindManyLevelClassSpecificMartialArtsDiceCountOperatorsInput `json:"dice_count,omitempty"`
	DiceValue *FilterFindManyLevelClassSpecificMartialArtsDiceValueOperatorsInput `json:"dice_value,omitempty"`
}

type FilterFindManyLevelClassSpecificMetamagicKnownOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificMysticArcanumLevel6OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificMysticArcanumLevel7OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificMysticArcanumLevel8OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificMysticArcanumLevel9OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificOperatorsInput struct {
	ActionSurges           *FilterFindManyLevelClassSpecificActionSurgesOperatorsInput           `json:"action_surges,omitempty"`
	ArcaneRecoveryLevels   *FilterFindManyLevelClassSpecificArcaneRecoveryLevelsOperatorsInput   `json:"arcane_recovery_levels,omitempty"`
	AuraRange              *FilterFindManyLevelClassSpecificAuraRangeOperatorsInput              `json:"aura_range,omitempty"`
	BardicInspirationDie   *FilterFindManyLevelClassSpecificBardicInspirationDieOperatorsInput   `json:"bardic_inspiration_die,omitempty"`
	BrutalCriticalDice     *FilterFindManyLevelClassSpecificBrutalCriticalDiceOperatorsInput     `json:"brutal_critical_dice,omitempty"`
	ChannelDivinityCharges *FilterFindManyLevelClassSpecificChannelDivinityChargesOperatorsInput `json:"channel_divinity_charges,omitempty"`
	DestroyUndeadCr        *FilterFindManyLevelClassSpecificDestroyUndeadCrOperatorsInput        `json:"destroy_undead_cr,omitempty"`
	ExtraAttacks           *FilterFindManyLevelClassSpecificExtraAttacksOperatorsInput           `json:"extra_attacks,omitempty"`
	FavoredEnemies         *FilterFindManyLevelClassSpecificFavoredEnemiesOperatorsInput         `json:"favored_enemies,omitempty"`
	FavoredTerrain         *FilterFindManyLevelClassSpecificFavoredTerrainOperatorsInput         `json:"favored_terrain,omitempty"`
	IndomitableUses        *FilterFindManyLevelClassSpecificIndomitableUsesOperatorsInput        `json:"indomitable_uses,omitempty"`
	InvocationsKnown       *FilterFindManyLevelClassSpecificInvocationsKnownOperatorsInput       `json:"invocations_known,omitempty"`
	KiPoints               *FilterFindManyLevelClassSpecificKiPointsOperatorsInput               `json:"ki_points,omitempty"`
	MagicalSecretsMax5     *FilterFindManyLevelClassSpecificMagicalSecretsMax5OperatorsInput     `json:"magical_secrets_max_5,omitempty"`
	MagicalSecretsMax7     *FilterFindManyLevelClassSpecificMagicalSecretsMax7OperatorsInput     `json:"magical_secrets_max_7,omitempty"`
	MagicalSecretsMax9     *FilterFindManyLevelClassSpecificMagicalSecretsMax9OperatorsInput     `json:"magical_secrets_max_9,omitempty"`
	MartialArts            *FilterFindManyLevelClassSpecificMartialArtsOperatorsInput            `json:"martial_arts,omitempty"`
	MetamagicKnown         *FilterFindManyLevelClassSpecificMetamagicKnownOperatorsInput         `json:"metamagic_known,omitempty"`
	MysticArcanumLevel6    *FilterFindManyLevelClassSpecificMysticArcanumLevel6OperatorsInput    `json:"mystic_arcanum_level_6,omitempty"`
	MysticArcanumLevel7    *FilterFindManyLevelClassSpecificMysticArcanumLevel7OperatorsInput    `json:"mystic_arcanum_level_7,omitempty"`
	MysticArcanumLevel8    *FilterFindManyLevelClassSpecificMysticArcanumLevel8OperatorsInput    `json:"mystic_arcanum_level_8,omitempty"`
	MysticArcanumLevel9    *FilterFindManyLevelClassSpecificMysticArcanumLevel9OperatorsInput    `json:"mystic_arcanum_level_9,omitempty"`
	RageCount              *FilterFindManyLevelClassSpecificRageCountOperatorsInput              `json:"rage_count,omitempty"`
	RageDamageBonus        *FilterFindManyLevelClassSpecificRageDamageBonusOperatorsInput        `json:"rage_damage_bonus,omitempty"`
	SneakAttack            *FilterFindManyLevelClassSpecificSneakAttackOperatorsInput            `json:"sneak_attack,omitempty"`
	SongOfRestDie          *FilterFindManyLevelClassSpecificSongOfRestDieOperatorsInput          `json:"song_of_rest_die,omitempty"`
	SorceryPoints          *FilterFindManyLevelClassSpecificSorceryPointsOperatorsInput          `json:"sorcery_points,omitempty"`
	UnarmoredMovement      *FilterFindManyLevelClassSpecificUnarmoredMovementOperatorsInput      `json:"unarmored_movement,omitempty"`
	WildShapeFly           *FilterFindManyLevelClassSpecificWildShapeFlyOperatorsInput           `json:"wild_shape_fly,omitempty"`
	WildShapeMaxCr         *FilterFindManyLevelClassSpecificWildShapeMaxCrOperatorsInput         `json:"wild_shape_max_cr,omitempty"`
	WildShapeSwim          *FilterFindManyLevelClassSpecificWildShapeSwimOperatorsInput          `json:"wild_shape_swim,omitempty"`
}

type FilterFindManyLevelClassSpecificRageCountOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificRageDamageBonusOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificSneakAttackDiceCountOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificSneakAttackDiceValueOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificSneakAttackInput struct {
	DiceCount *float64 `json:"dice_count,omitempty"`
	DiceValue *float64 `json:"dice_value,omitempty"`
}

type FilterFindManyLevelClassSpecificSneakAttackOperatorsInput struct {
	DiceCount *FilterFindManyLevelClassSpecificSneakAttackDiceCountOperatorsInput `json:"dice_count,omitempty"`
	DiceValue *FilterFindManyLevelClassSpecificSneakAttackDiceValueOperatorsInput `json:"dice_value,omitempty"`
}

type FilterFindManyLevelClassSpecificSongOfRestDieOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificSorceryPointsOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificUnarmoredMovementOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificWildShapeFlyOperatorsInput struct {
	Gt     *bool   `json:"gt,omitempty"`
	Gte    *bool   `json:"gte,omitempty"`
	Lt     *bool   `json:"lt,omitempty"`
	Lte    *bool   `json:"lte,omitempty"`
	Ne     *bool   `json:"ne,omitempty"`
	In     []*bool `json:"in,omitempty"`
	Nin    []*bool `json:"nin,omitempty"`
	Exists *bool   `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificWildShapeMaxCrOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelClassSpecificWildShapeSwimOperatorsInput struct {
	Gt     *bool   `json:"gt,omitempty"`
	Gte    *bool   `json:"gte,omitempty"`
	Lt     *bool   `json:"lt,omitempty"`
	Lte    *bool   `json:"lte,omitempty"`
	Ne     *bool   `json:"ne,omitempty"`
	In     []*bool `json:"in,omitempty"`
	Nin    []*bool `json:"nin,omitempty"`
	Exists *bool   `json:"exists,omitempty"`
}

type FilterFindManyLevelFeaturesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyLevelIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLevelInput struct {
	ID                  *string                                   `json:"_id,omitempty"`
	AbilityScoreBonuses *float64                                  `json:"ability_score_bonuses,omitempty"`
	Class               *FilterFindManyLevelClassInput            `json:"class,omitempty"`
	ClassSpecific       *FilterFindManyLevelClassSpecificInput    `json:"class_specific,omitempty"`
	Features            []*FilterFindManyLevelFeaturesInput       `json:"features,omitempty"`
	Index               *string                                   `json:"index,omitempty"`
	Level               *float64                                  `json:"level,omitempty"`
	ProfBonus           *float64                                  `json:"prof_bonus,omitempty"`
	Spellcasting        *FilterFindManyLevelSpellcastingInput     `json:"spellcasting,omitempty"`
	Subclass            *FilterFindManyLevelSubclassInput         `json:"subclass,omitempty"`
	SubclassSpecific    *FilterFindManyLevelSubclassSpecificInput `json:"subclass_specific,omitempty"`
	URL                 *string                                   `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyLevelOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyLevelInput        `json:"OR,omitempty"`
	And       []*FilterFindManyLevelInput        `json:"AND,omitempty"`
}

type FilterFindManyLevelLevelOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyLevelOperatorsInput struct {
	ID                  *FilterFindManyLevelIDOperatorsInput                  `json:"_id,omitempty"`
	AbilityScoreBonuses *FilterFindManyLevelAbilityScoreBonusesOperatorsInput `json:"ability_score_bonuses,omitempty"`
	Class               *FilterFindManyLevelClassOperatorsInput               `json:"class,omitempty"`
	ClassSpecific       *FilterFindManyLevelClassSpecificOperatorsInput       `json:"class_specific,omitempty"`
	Index               *FilterFindManyLevelIndexOperatorsInput               `json:"index,omitempty"`
	Level               *FilterFindManyLevelLevelOperatorsInput               `json:"level,omitempty"`
	ProfBonus           *FilterFindManyLevelProfBonusOperatorsInput           `json:"prof_bonus,omitempty"`
	Spellcasting        *FilterFindManyLevelSpellcastingOperatorsInput        `json:"spellcasting,omitempty"`
	Subclass            *FilterFindManyLevelSubclassOperatorsInput            `json:"subclass,omitempty"`
	SubclassSpecific    *FilterFindManyLevelSubclassSpecificOperatorsInput    `json:"subclass_specific,omitempty"`
	URL                 *FilterFindManyLevelURLOperatorsInput                 `json:"url,omitempty"`
}

type FilterFindManyLevelProfBonusOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelSpellcastingCantripsKnownOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelSpellcastingInput struct {
	CantripsKnown    *float64 `json:"cantrips_known,omitempty"`
	SpellSlotsLevel1 *float64 `json:"spell_slots_level_1,omitempty"`
	SpellSlotsLevel2 *float64 `json:"spell_slots_level_2,omitempty"`
	SpellSlotsLevel3 *float64 `json:"spell_slots_level_3,omitempty"`
	SpellSlotsLevel4 *float64 `json:"spell_slots_level_4,omitempty"`
	SpellSlotsLevel5 *float64 `json:"spell_slots_level_5,omitempty"`
	SpellSlotsLevel6 *float64 `json:"spell_slots_level_6,omitempty"`
	SpellSlotsLevel7 *float64 `json:"spell_slots_level_7,omitempty"`
	SpellSlotsLevel8 *float64 `json:"spell_slots_level_8,omitempty"`
	SpellSlotsLevel9 *float64 `json:"spell_slots_level_9,omitempty"`
	SpellsKnown      *float64 `json:"spells_known,omitempty"`
}

type FilterFindManyLevelSpellcastingOperatorsInput struct {
	CantripsKnown    *FilterFindManyLevelSpellcastingCantripsKnownOperatorsInput    `json:"cantrips_known,omitempty"`
	SpellSlotsLevel1 *FilterFindManyLevelSpellcastingSpellSlotsLevel1OperatorsInput `json:"spell_slots_level_1,omitempty"`
	SpellSlotsLevel2 *FilterFindManyLevelSpellcastingSpellSlotsLevel2OperatorsInput `json:"spell_slots_level_2,omitempty"`
	SpellSlotsLevel3 *FilterFindManyLevelSpellcastingSpellSlotsLevel3OperatorsInput `json:"spell_slots_level_3,omitempty"`
	SpellSlotsLevel4 *FilterFindManyLevelSpellcastingSpellSlotsLevel4OperatorsInput `json:"spell_slots_level_4,omitempty"`
	SpellSlotsLevel5 *FilterFindManyLevelSpellcastingSpellSlotsLevel5OperatorsInput `json:"spell_slots_level_5,omitempty"`
	SpellSlotsLevel6 *FilterFindManyLevelSpellcastingSpellSlotsLevel6OperatorsInput `json:"spell_slots_level_6,omitempty"`
	SpellSlotsLevel7 *FilterFindManyLevelSpellcastingSpellSlotsLevel7OperatorsInput `json:"spell_slots_level_7,omitempty"`
	SpellSlotsLevel8 *FilterFindManyLevelSpellcastingSpellSlotsLevel8OperatorsInput `json:"spell_slots_level_8,omitempty"`
	SpellSlotsLevel9 *FilterFindManyLevelSpellcastingSpellSlotsLevel9OperatorsInput `json:"spell_slots_level_9,omitempty"`
	SpellsKnown      *FilterFindManyLevelSpellcastingSpellsKnownOperatorsInput      `json:"spells_known,omitempty"`
}

type FilterFindManyLevelSpellcastingSpellSlotsLevel1OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelSpellcastingSpellSlotsLevel2OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelSpellcastingSpellSlotsLevel3OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelSpellcastingSpellSlotsLevel4OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelSpellcastingSpellSlotsLevel5OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelSpellcastingSpellSlotsLevel6OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelSpellcastingSpellSlotsLevel7OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelSpellcastingSpellSlotsLevel8OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelSpellcastingSpellSlotsLevel9OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelSpellcastingSpellsKnownOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelSubclassIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLevelSubclassInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyLevelSubclassNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLevelSubclassOperatorsInput struct {
	Index *FilterFindManyLevelSubclassIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyLevelSubclassNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyLevelSubclassURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyLevelSubclassURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLevelSubclassSpecificAdditionalMagicalSecretsMaxLvlOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelSubclassSpecificAuraRangeOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyLevelSubclassSpecificInput struct {
	AdditionalMagicalSecretsMaxLvl *float64 `json:"additional_magical_secrets_max_lvl,omitempty"`
	AuraRange                      *float64 `json:"aura_range,omitempty"`
}

type FilterFindManyLevelSubclassSpecificOperatorsInput struct {
	AdditionalMagicalSecretsMaxLvl *FilterFindManyLevelSubclassSpecificAdditionalMagicalSecretsMaxLvlOperatorsInput `json:"additional_magical_secrets_max_lvl,omitempty"`
	AuraRange                      *FilterFindManyLevelSubclassSpecificAuraRangeOperatorsInput                      `json:"aura_range,omitempty"`
}

type FilterFindManyLevelURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyLevelIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMagicItemDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMagicItemEquipmentCategoryIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMagicItemEquipmentCategoryInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyMagicItemEquipmentCategoryNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMagicItemEquipmentCategoryOperatorsInput struct {
	Index *FilterFindManyMagicItemEquipmentCategoryIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyMagicItemEquipmentCategoryNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyMagicItemEquipmentCategoryURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyMagicItemEquipmentCategoryURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMagicItemIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMagicItemInput struct {
	ID                *string                                        `json:"_id,omitempty"`
	Desc              []*string                                      `json:"desc,omitempty"`
	EquipmentCategory *FilterFindManyMagicItemEquipmentCategoryInput `json:"equipment_category,omitempty"`
	Index             *string                                        `json:"index,omitempty"`
	Name              *string                                        `json:"name,omitempty"`
	URL               *string                                        `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyMagicItemOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyMagicItemInput        `json:"OR,omitempty"`
	And       []*FilterFindManyMagicItemInput        `json:"AND,omitempty"`
}

type FilterFindManyMagicItemNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyMagicItemOperatorsInput struct {
	ID                *FilterFindManyMagicItemIDOperatorsInput                `json:"_id,omitempty"`
	Desc              *FilterFindManyMagicItemDescOperatorsInput              `json:"desc,omitempty"`
	EquipmentCategory *FilterFindManyMagicItemEquipmentCategoryOperatorsInput `json:"equipment_category,omitempty"`
	Index             *FilterFindManyMagicItemIndexOperatorsInput             `json:"index,omitempty"`
	Name              *FilterFindManyMagicItemNameOperatorsInput              `json:"name,omitempty"`
	URL               *FilterFindManyMagicItemURLOperatorsInput               `json:"url,omitempty"`
}

type FilterFindManyMagicItemURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMagicItemIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMagicSchoolDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMagicSchoolIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMagicSchoolInput struct {
	ID    *string `json:"_id,omitempty"`
	Desc  *string `json:"desc,omitempty"`
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyMagicSchoolOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyMagicSchoolInput        `json:"OR,omitempty"`
	And       []*FilterFindManyMagicSchoolInput        `json:"AND,omitempty"`
}

type FilterFindManyMagicSchoolNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyMagicSchoolOperatorsInput struct {
	ID    *FilterFindManyMagicSchoolIDOperatorsInput    `json:"_id,omitempty"`
	Desc  *FilterFindManyMagicSchoolDescOperatorsInput  `json:"desc,omitempty"`
	Index *FilterFindManyMagicSchoolIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyMagicSchoolNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyMagicSchoolURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyMagicSchoolURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMagicSchoolIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterActionsDamageDamageTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyMonsterActionsDamageInput struct {
	DamageDice *string                                            `json:"damage_dice,omitempty"`
	DamageType *FilterFindManyMonsterActionsDamageDamageTypeInput `json:"damage_type,omitempty"`
	ID         *string                                            `json:"_id,omitempty"`
}

type FilterFindManyMonsterActionsInput struct {
	AttackBonus *float64                                   `json:"attack_bonus,omitempty"`
	Damage      []*FilterFindManyMonsterActionsDamageInput `json:"damage,omitempty"`
	Desc        *string                                    `json:"desc,omitempty"`
	Name        *string                                    `json:"name,omitempty"`
	ID          *string                                    `json:"_id,omitempty"`
}

type FilterFindManyMonsterAlignmentOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterArmorClassOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyMonsterChallengeRatingOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyMonsterCharismaOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyMonsterConditionImmunitiesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyMonsterConstitutionOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyMonsterDexterityOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyMonsterFormsInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyMonsterHitDiceOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterHitPointsOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyMonsterIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterInput struct {
	ID                    *string                                          `json:"_id,omitempty"`
	Actions               []*FilterFindManyMonsterActionsInput             `json:"actions,omitempty"`
	Alignment             *string                                          `json:"alignment,omitempty"`
	ArmorClass            *float64                                         `json:"armor_class,omitempty"`
	ChallengeRating       *float64                                         `json:"challenge_rating,omitempty"`
	Charisma              *float64                                         `json:"charisma,omitempty"`
	ConditionImmunities   []*FilterFindManyMonsterConditionImmunitiesInput `json:"condition_immunities,omitempty"`
	Constitution          *float64                                         `json:"constitution,omitempty"`
	DamageImmunities      []*string                                        `json:"damage_immunities,omitempty"`
	DamageResistances     []*string                                        `json:"damage_resistances,omitempty"`
	DamageVulnerabilities []*string                                        `json:"damage_vulnerabilities,omitempty"`
	Dexterity             *float64                                         `json:"dexterity,omitempty"`
	Forms                 []*FilterFindManyMonsterFormsInput               `json:"forms,omitempty"`
	HitDice               *string                                          `json:"hit_dice,omitempty"`
	HitPoints             *float64                                         `json:"hit_points,omitempty"`
	Index                 *string                                          `json:"index,omitempty"`
	Intelligence          *float64                                         `json:"intelligence,omitempty"`
	Languages             *string                                          `json:"languages,omitempty"`
	LegendaryActions      []*FilterFindManyMonsterLegendaryActionsInput    `json:"legendary_actions,omitempty"`
	Name                  *string                                          `json:"name,omitempty"`
	Proficiencies         []*FilterFindManyMonsterProficienciesInput       `json:"proficiencies,omitempty"`
	Reactions             []*FilterFindManyMonsterReactionsInput           `json:"reactions,omitempty"`
	Senses                *FilterFindManyMonsterSensesInput                `json:"senses,omitempty"`
	Size                  *string                                          `json:"size,omitempty"`
	SpecialAbilities      []*FilterFindManyMonsterSpecialAbilitiesInput    `json:"special_abilities,omitempty"`
	Speed                 *FilterFindManyMonsterSpeedInput                 `json:"speed,omitempty"`
	Strength              *float64                                         `json:"strength,omitempty"`
	Subtype               *string                                          `json:"subtype,omitempty"`
	Type                  *string                                          `json:"type,omitempty"`
	URL                   *string                                          `json:"url,omitempty"`
	Wisdom                *float64                                         `json:"wisdom,omitempty"`
	Xp                    *float64                                         `json:"xp,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyMonsterOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyMonsterInput        `json:"OR,omitempty"`
	And       []*FilterFindManyMonsterInput        `json:"AND,omitempty"`
}

type FilterFindManyMonsterIntelligenceOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyMonsterLanguagesOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterLegendaryActionsInput struct {
	AttackBonus *float64 `json:"attack_bonus,omitempty"`
	Desc        *string  `json:"desc,omitempty"`
	Name        *string  `json:"name,omitempty"`
	ID          *string  `json:"_id,omitempty"`
}

type FilterFindManyMonsterNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyMonsterOperatorsInput struct {
	ID              *FilterFindManyMonsterIDOperatorsInput              `json:"_id,omitempty"`
	Alignment       *FilterFindManyMonsterAlignmentOperatorsInput       `json:"alignment,omitempty"`
	ArmorClass      *FilterFindManyMonsterArmorClassOperatorsInput      `json:"armor_class,omitempty"`
	ChallengeRating *FilterFindManyMonsterChallengeRatingOperatorsInput `json:"challenge_rating,omitempty"`
	Charisma        *FilterFindManyMonsterCharismaOperatorsInput        `json:"charisma,omitempty"`
	Constitution    *FilterFindManyMonsterConstitutionOperatorsInput    `json:"constitution,omitempty"`
	Dexterity       *FilterFindManyMonsterDexterityOperatorsInput       `json:"dexterity,omitempty"`
	HitDice         *FilterFindManyMonsterHitDiceOperatorsInput         `json:"hit_dice,omitempty"`
	HitPoints       *FilterFindManyMonsterHitPointsOperatorsInput       `json:"hit_points,omitempty"`
	Index           *FilterFindManyMonsterIndexOperatorsInput           `json:"index,omitempty"`
	Intelligence    *FilterFindManyMonsterIntelligenceOperatorsInput    `json:"intelligence,omitempty"`
	Languages       *FilterFindManyMonsterLanguagesOperatorsInput       `json:"languages,omitempty"`
	Name            *FilterFindManyMonsterNameOperatorsInput            `json:"name,omitempty"`
	Senses          *FilterFindManyMonsterSensesOperatorsInput          `json:"senses,omitempty"`
	Size            *FilterFindManyMonsterSizeOperatorsInput            `json:"size,omitempty"`
	Speed           *FilterFindManyMonsterSpeedOperatorsInput           `json:"speed,omitempty"`
	Strength        *FilterFindManyMonsterStrengthOperatorsInput        `json:"strength,omitempty"`
	Subtype         *FilterFindManyMonsterSubtypeOperatorsInput         `json:"subtype,omitempty"`
	Type            *FilterFindManyMonsterTypeOperatorsInput            `json:"type,omitempty"`
	URL             *FilterFindManyMonsterURLOperatorsInput             `json:"url,omitempty"`
	Wisdom          *FilterFindManyMonsterWisdomOperatorsInput          `json:"wisdom,omitempty"`
	Xp              *FilterFindManyMonsterXpOperatorsInput              `json:"xp,omitempty"`
}

type FilterFindManyMonsterProficienciesInput struct {
	Proficiency *FilterFindManyMonsterProficienciesProficiencyInput `json:"proficiency,omitempty"`
	Value       *float64                                            `json:"value,omitempty"`
	ID          *string                                             `json:"_id,omitempty"`
}

type FilterFindManyMonsterProficienciesProficiencyInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyMonsterReactionsInput struct {
	Desc *string `json:"desc,omitempty"`
	Name *string `json:"name,omitempty"`
	ID   *string `json:"_id,omitempty"`
}

type FilterFindManyMonsterSensesBlindsightOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterSensesDarkvisionOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterSensesInput struct {
	Blindsight        *string  `json:"blindsight,omitempty"`
	Darkvision        *string  `json:"darkvision,omitempty"`
	PassivePerception *float64 `json:"passive_perception,omitempty"`
	Tremorsense       *string  `json:"tremorsense,omitempty"`
	Truesight         *string  `json:"truesight,omitempty"`
}

type FilterFindManyMonsterSensesOperatorsInput struct {
	Blindsight        *FilterFindManyMonsterSensesBlindsightOperatorsInput        `json:"blindsight,omitempty"`
	Darkvision        *FilterFindManyMonsterSensesDarkvisionOperatorsInput        `json:"darkvision,omitempty"`
	PassivePerception *FilterFindManyMonsterSensesPassivePerceptionOperatorsInput `json:"passive_perception,omitempty"`
	Tremorsense       *FilterFindManyMonsterSensesTremorsenseOperatorsInput       `json:"tremorsense,omitempty"`
	Truesight         *FilterFindManyMonsterSensesTruesightOperatorsInput         `json:"truesight,omitempty"`
}

type FilterFindManyMonsterSensesPassivePerceptionOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyMonsterSensesTremorsenseOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterSensesTruesightOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterSizeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterSpecialAbilitiesInput struct {
	Desc *string `json:"desc,omitempty"`
	Name *string `json:"name,omitempty"`
	ID   *string `json:"_id,omitempty"`
}

type FilterFindManyMonsterSpeedBurrowOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterSpeedClimbOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterSpeedFlyOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterSpeedHoverOperatorsInput struct {
	Gt     *bool   `json:"gt,omitempty"`
	Gte    *bool   `json:"gte,omitempty"`
	Lt     *bool   `json:"lt,omitempty"`
	Lte    *bool   `json:"lte,omitempty"`
	Ne     *bool   `json:"ne,omitempty"`
	In     []*bool `json:"in,omitempty"`
	Nin    []*bool `json:"nin,omitempty"`
	Exists *bool   `json:"exists,omitempty"`
}

type FilterFindManyMonsterSpeedInput struct {
	Burrow *string `json:"burrow,omitempty"`
	Climb  *string `json:"climb,omitempty"`
	Fly    *string `json:"fly,omitempty"`
	Hover  *bool   `json:"hover,omitempty"`
	Swim   *string `json:"swim,omitempty"`
	Walk   *string `json:"walk,omitempty"`
}

type FilterFindManyMonsterSpeedOperatorsInput struct {
	Burrow *FilterFindManyMonsterSpeedBurrowOperatorsInput `json:"burrow,omitempty"`
	Climb  *FilterFindManyMonsterSpeedClimbOperatorsInput  `json:"climb,omitempty"`
	Fly    *FilterFindManyMonsterSpeedFlyOperatorsInput    `json:"fly,omitempty"`
	Hover  *FilterFindManyMonsterSpeedHoverOperatorsInput  `json:"hover,omitempty"`
	Swim   *FilterFindManyMonsterSpeedSwimOperatorsInput   `json:"swim,omitempty"`
	Walk   *FilterFindManyMonsterSpeedWalkOperatorsInput   `json:"walk,omitempty"`
}

type FilterFindManyMonsterSpeedSwimOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterSpeedWalkOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterStrengthOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyMonsterSubtypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyMonsterWisdomOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyMonsterXpOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyMonsterIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyProficiencyClassesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyProficiencyIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyProficiencyInput struct {
	ID         *string                                     `json:"_id,omitempty"`
	Classes    []*FilterFindManyProficiencyClassesInput    `json:"classes,omitempty"`
	Index      *string                                     `json:"index,omitempty"`
	Name       *string                                     `json:"name,omitempty"`
	Races      []*FilterFindManyProficiencyRacesInput      `json:"races,omitempty"`
	References []*FilterFindManyProficiencyReferencesInput `json:"references,omitempty"`
	Type       *string                                     `json:"type,omitempty"`
	URL        *string                                     `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyProficiencyOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyProficiencyInput        `json:"OR,omitempty"`
	And       []*FilterFindManyProficiencyInput        `json:"AND,omitempty"`
}

type FilterFindManyProficiencyNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyProficiencyOperatorsInput struct {
	ID    *FilterFindManyProficiencyIDOperatorsInput    `json:"_id,omitempty"`
	Index *FilterFindManyProficiencyIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyProficiencyNameOperatorsInput  `json:"name,omitempty"`
	Type  *FilterFindManyProficiencyTypeOperatorsInput  `json:"type,omitempty"`
	URL   *FilterFindManyProficiencyURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyProficiencyRacesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyProficiencyReferencesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	Type  *string `json:"type,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyProficiencyTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyProficiencyURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyProficiencyIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRaceAbilityBonusOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyRaceAbilityBonusOptionsFromAbilityScoreInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyRaceAbilityBonusOptionsFromInput struct {
	AbilityScore *FilterFindManyRaceAbilityBonusOptionsFromAbilityScoreInput `json:"ability_score,omitempty"`
	Bonus        *float64                                                    `json:"bonus,omitempty"`
	ID           *string                                                     `json:"_id,omitempty"`
}

type FilterFindManyRaceAbilityBonusOptionsInput struct {
	Choose *float64                                          `json:"choose,omitempty"`
	From   []*FilterFindManyRaceAbilityBonusOptionsFromInput `json:"from,omitempty"`
	Type   *string                                           `json:"type,omitempty"`
}

type FilterFindManyRaceAbilityBonusOptionsOperatorsInput struct {
	Choose *FilterFindManyRaceAbilityBonusOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindManyRaceAbilityBonusOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyRaceAbilityBonusOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRaceAbilityBonusesAbilityScoreInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyRaceAbilityBonusesInput struct {
	AbilityScore *FilterFindManyRaceAbilityBonusesAbilityScoreInput `json:"ability_score,omitempty"`
	Bonus        *float64                                           `json:"bonus,omitempty"`
	ID           *string                                            `json:"_id,omitempty"`
}

type FilterFindManyRaceAgeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRaceAlignmentOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRaceIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRaceInput struct {
	ID                         *string                                            `json:"_id,omitempty"`
	AbilityBonusOptions        *FilterFindManyRaceAbilityBonusOptionsInput        `json:"ability_bonus_options,omitempty"`
	AbilityBonuses             []*FilterFindManyRaceAbilityBonusesInput           `json:"ability_bonuses,omitempty"`
	Age                        *string                                            `json:"age,omitempty"`
	Alignment                  *string                                            `json:"alignment,omitempty"`
	Index                      *string                                            `json:"index,omitempty"`
	LanguageDesc               *string                                            `json:"language_desc,omitempty"`
	LanguageOptions            *FilterFindManyRaceLanguageOptionsInput            `json:"language_options,omitempty"`
	Languages                  []*FilterFindManyRaceLanguagesInput                `json:"languages,omitempty"`
	Name                       *string                                            `json:"name,omitempty"`
	Size                       *string                                            `json:"size,omitempty"`
	SizeDescription            *string                                            `json:"size_description,omitempty"`
	Speed                      *float64                                           `json:"speed,omitempty"`
	StartingProficiencies      []*FilterFindManyRaceStartingProficienciesInput    `json:"starting_proficiencies,omitempty"`
	StartingProficiencyOptions *FilterFindManyRaceStartingProficiencyOptionsInput `json:"starting_proficiency_options,omitempty"`
	Subraces                   []*FilterFindManyRaceSubracesInput                 `json:"subraces,omitempty"`
	Traits                     []*FilterFindManyRaceTraitsInput                   `json:"traits,omitempty"`
	URL                        *string                                            `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyRaceOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyRaceInput        `json:"OR,omitempty"`
	And       []*FilterFindManyRaceInput        `json:"AND,omitempty"`
}

type FilterFindManyRaceLanguageDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRaceLanguageOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyRaceLanguageOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyRaceLanguageOptionsInput struct {
	Choose *float64                                      `json:"choose,omitempty"`
	From   []*FilterFindManyRaceLanguageOptionsFromInput `json:"from,omitempty"`
	Type   *string                                       `json:"type,omitempty"`
}

type FilterFindManyRaceLanguageOptionsOperatorsInput struct {
	Choose *FilterFindManyRaceLanguageOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindManyRaceLanguageOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyRaceLanguageOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRaceLanguagesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyRaceNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyRaceOperatorsInput struct {
	ID                         *FilterFindManyRaceIDOperatorsInput                         `json:"_id,omitempty"`
	AbilityBonusOptions        *FilterFindManyRaceAbilityBonusOptionsOperatorsInput        `json:"ability_bonus_options,omitempty"`
	Age                        *FilterFindManyRaceAgeOperatorsInput                        `json:"age,omitempty"`
	Alignment                  *FilterFindManyRaceAlignmentOperatorsInput                  `json:"alignment,omitempty"`
	Index                      *FilterFindManyRaceIndexOperatorsInput                      `json:"index,omitempty"`
	LanguageDesc               *FilterFindManyRaceLanguageDescOperatorsInput               `json:"language_desc,omitempty"`
	LanguageOptions            *FilterFindManyRaceLanguageOptionsOperatorsInput            `json:"language_options,omitempty"`
	Name                       *FilterFindManyRaceNameOperatorsInput                       `json:"name,omitempty"`
	Size                       *FilterFindManyRaceSizeOperatorsInput                       `json:"size,omitempty"`
	SizeDescription            *FilterFindManyRaceSizeDescriptionOperatorsInput            `json:"size_description,omitempty"`
	Speed                      *FilterFindManyRaceSpeedOperatorsInput                      `json:"speed,omitempty"`
	StartingProficiencyOptions *FilterFindManyRaceStartingProficiencyOptionsOperatorsInput `json:"starting_proficiency_options,omitempty"`
	URL                        *FilterFindManyRaceURLOperatorsInput                        `json:"url,omitempty"`
}

type FilterFindManyRaceSizeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRaceSizeDescriptionOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRaceSpeedOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyRaceStartingProficienciesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyRaceStartingProficiencyOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyRaceStartingProficiencyOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyRaceStartingProficiencyOptionsInput struct {
	Choose *float64                                                 `json:"choose,omitempty"`
	From   []*FilterFindManyRaceStartingProficiencyOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                  `json:"type,omitempty"`
}

type FilterFindManyRaceStartingProficiencyOptionsOperatorsInput struct {
	Choose *FilterFindManyRaceStartingProficiencyOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindManyRaceStartingProficiencyOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyRaceStartingProficiencyOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRaceSubracesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyRaceTraitsInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyRaceURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRaceIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRuleDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRuleIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRuleInput struct {
	ID          *string                               `json:"_id,omitempty"`
	Desc        *string                               `json:"desc,omitempty"`
	Index       *string                               `json:"index,omitempty"`
	Name        *string                               `json:"name,omitempty"`
	Subsections []*FilterFindManyRuleSubsectionsInput `json:"subsections,omitempty"`
	URL         *string                               `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyRuleOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyRuleInput        `json:"OR,omitempty"`
	And       []*FilterFindManyRuleInput        `json:"AND,omitempty"`
}

type FilterFindManyRuleNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyRuleOperatorsInput struct {
	ID    *FilterFindManyRuleIDOperatorsInput    `json:"_id,omitempty"`
	Desc  *FilterFindManyRuleDescOperatorsInput  `json:"desc,omitempty"`
	Index *FilterFindManyRuleIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyRuleNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyRuleURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyRuleSectionDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRuleSectionIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRuleSectionInput struct {
	ID    *string `json:"_id,omitempty"`
	Desc  *string `json:"desc,omitempty"`
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyRuleSectionOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyRuleSectionInput        `json:"OR,omitempty"`
	And       []*FilterFindManyRuleSectionInput        `json:"AND,omitempty"`
}

type FilterFindManyRuleSectionNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyRuleSectionOperatorsInput struct {
	ID    *FilterFindManyRuleSectionIDOperatorsInput    `json:"_id,omitempty"`
	Desc  *FilterFindManyRuleSectionDescOperatorsInput  `json:"desc,omitempty"`
	Index *FilterFindManyRuleSectionIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyRuleSectionNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyRuleSectionURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyRuleSectionURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRuleSectionIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRuleSubsectionsInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyRuleURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyRuleIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySkillAbilityScoreIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySkillAbilityScoreInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManySkillAbilityScoreNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySkillAbilityScoreOperatorsInput struct {
	Index *FilterFindManySkillAbilityScoreIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManySkillAbilityScoreNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManySkillAbilityScoreURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManySkillAbilityScoreURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySkillDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySkillIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySkillInput struct {
	ID           *string                               `json:"_id,omitempty"`
	AbilityScore *FilterFindManySkillAbilityScoreInput `json:"ability_score,omitempty"`
	Desc         []*string                             `json:"desc,omitempty"`
	Index        *string                               `json:"index,omitempty"`
	Name         *string                               `json:"name,omitempty"`
	URL          *string                               `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManySkillOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManySkillInput        `json:"OR,omitempty"`
	And       []*FilterFindManySkillInput        `json:"AND,omitempty"`
}

type FilterFindManySkillNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManySkillOperatorsInput struct {
	ID           *FilterFindManySkillIDOperatorsInput           `json:"_id,omitempty"`
	AbilityScore *FilterFindManySkillAbilityScoreOperatorsInput `json:"ability_score,omitempty"`
	Desc         *FilterFindManySkillDescOperatorsInput         `json:"desc,omitempty"`
	Index        *FilterFindManySkillIndexOperatorsInput        `json:"index,omitempty"`
	Name         *FilterFindManySkillNameOperatorsInput         `json:"name,omitempty"`
	URL          *FilterFindManySkillURLOperatorsInput          `json:"url,omitempty"`
}

type FilterFindManySkillURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySkillIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySpellAreaOfEffectInput struct {
	Size *float64 `json:"size,omitempty"`
	Type *string  `json:"type,omitempty"`
}

type FilterFindManySpellClassesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManySpellDamageDamageTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManySpellDamageInput struct {
	DamageAtSlotLevel      *string                                   `json:"damage_at_slot_level,omitempty"`
	DamageAtCharacterLevel *string                                   `json:"damage_at_character_level,omitempty"`
	DamageType             *FilterFindManySpellDamageDamageTypeInput `json:"damage_type,omitempty"`
}

type FilterFindManySpellDcDcTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManySpellDcInput struct {
	DcSuccess *string                           `json:"dc_success,omitempty"`
	DcType    *FilterFindManySpellDcDcTypeInput `json:"dc_type,omitempty"`
	Desc      *string                           `json:"desc,omitempty"`
}

type FilterFindManySpellInput struct {
	ID              *string                               `json:"_id,omitempty"`
	AreaOfEffect    *FilterFindManySpellAreaOfEffectInput `json:"area_of_effect,omitempty"`
	AttackType      *string                               `json:"attack_type,omitempty"`
	CastingTime     *string                               `json:"casting_time,omitempty"`
	Classes         []*FilterFindManySpellClassesInput    `json:"classes,omitempty"`
	Components      []*string                             `json:"components,omitempty"`
	Concentration   *bool                                 `json:"concentration,omitempty"`
	Damage          *FilterFindManySpellDamageInput       `json:"damage,omitempty"`
	Dc              *FilterFindManySpellDcInput           `json:"dc,omitempty"`
	Desc            []*string                             `json:"desc,omitempty"`
	Duration        *string                               `json:"duration,omitempty"`
	HealAtSlotLevel *string                               `json:"heal_at_slot_level,omitempty"`
	HigherLevel     []*string                             `json:"higher_level,omitempty"`
	Index           *string                               `json:"index,omitempty"`
	Level           *float64                              `json:"level,omitempty"`
	Material        *string                               `json:"material,omitempty"`
	Name            *string                               `json:"name,omitempty"`
	Range           *string                               `json:"range,omitempty"`
	Ritual          *bool                                 `json:"ritual,omitempty"`
	School          *FilterFindManySpellSchoolInput       `json:"school,omitempty"`
	Subclasses      []*FilterFindManySpellSubclassesInput `json:"subclasses,omitempty"`
	URL             *string                               `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManySpellOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManySpellInput        `json:"OR,omitempty"`
	And       []*FilterFindManySpellInput        `json:"AND,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManySpellOperatorsInput struct {
	ID     *FilterFindManySpellIDOperatorsInput     `json:"_id,omitempty"`
	School *FilterFindManySpellSchoolOperatorsInput `json:"school,omitempty"`
}

type FilterFindManySpellSchoolIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySpellSchoolInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManySpellSchoolNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySpellSchoolOperatorsInput struct {
	Index *FilterFindManySpellSchoolIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManySpellSchoolNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManySpellSchoolURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManySpellSchoolURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySpellSubclassesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManySpellIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubclassClassIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubclassClassInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManySubclassClassNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubclassClassOperatorsInput struct {
	Index *FilterFindManySubclassClassIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManySubclassClassNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManySubclassClassURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManySubclassClassURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubclassDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubclassIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubclassInput struct {
	ID             *string                              `json:"_id,omitempty"`
	Class          *FilterFindManySubclassClassInput    `json:"class,omitempty"`
	Desc           []*string                            `json:"desc,omitempty"`
	Index          *string                              `json:"index,omitempty"`
	Name           *string                              `json:"name,omitempty"`
	Spells         []*FilterFindManySubclassSpellsInput `json:"spells,omitempty"`
	SubclassFlavor *string                              `json:"subclass_flavor,omitempty"`
	SubclassLevels *string                              `json:"subclass_levels,omitempty"`
	URL            *string                              `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManySubclassOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManySubclassInput        `json:"OR,omitempty"`
	And       []*FilterFindManySubclassInput        `json:"AND,omitempty"`
}

type FilterFindManySubclassNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManySubclassOperatorsInput struct {
	ID             *FilterFindManySubclassIDOperatorsInput             `json:"_id,omitempty"`
	Class          *FilterFindManySubclassClassOperatorsInput          `json:"class,omitempty"`
	Desc           *FilterFindManySubclassDescOperatorsInput           `json:"desc,omitempty"`
	Index          *FilterFindManySubclassIndexOperatorsInput          `json:"index,omitempty"`
	Name           *FilterFindManySubclassNameOperatorsInput           `json:"name,omitempty"`
	SubclassFlavor *FilterFindManySubclassSubclassFlavorOperatorsInput `json:"subclass_flavor,omitempty"`
	SubclassLevels *FilterFindManySubclassSubclassLevelsOperatorsInput `json:"subclass_levels,omitempty"`
	URL            *FilterFindManySubclassURLOperatorsInput            `json:"url,omitempty"`
}

type FilterFindManySubclassSpellsInput struct {
	Prerequisites []*FilterFindManySubclassSpellsPrerequisitesInput `json:"prerequisites,omitempty"`
	Spell         *FilterFindManySubclassSpellsSpellInput           `json:"spell,omitempty"`
	ID            *string                                           `json:"_id,omitempty"`
}

type FilterFindManySubclassSpellsPrerequisitesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	Type  *string `json:"type,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManySubclassSpellsSpellInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManySubclassSubclassFlavorOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubclassSubclassLevelsOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubclassURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubclassIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubraceAbilityBonusesAbilityScoreInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManySubraceAbilityBonusesInput struct {
	AbilityScore *FilterFindManySubraceAbilityBonusesAbilityScoreInput `json:"ability_score,omitempty"`
	Bonus        *float64                                              `json:"bonus,omitempty"`
	ID           *string                                               `json:"_id,omitempty"`
}

type FilterFindManySubraceDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubraceIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubraceInput struct {
	ID                    *string                                            `json:"_id,omitempty"`
	AbilityBonuses        []*FilterFindManySubraceAbilityBonusesInput        `json:"ability_bonuses,omitempty"`
	Desc                  *string                                            `json:"desc,omitempty"`
	Index                 *string                                            `json:"index,omitempty"`
	LanguageOptions       *FilterFindManySubraceLanguageOptionsInput         `json:"language_options,omitempty"`
	Name                  *string                                            `json:"name,omitempty"`
	Race                  *FilterFindManySubraceRaceInput                    `json:"race,omitempty"`
	RacialTraits          []*FilterFindManySubraceRacialTraitsInput          `json:"racial_traits,omitempty"`
	StartingProficiencies []*FilterFindManySubraceStartingProficienciesInput `json:"starting_proficiencies,omitempty"`
	URL                   *string                                            `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManySubraceOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManySubraceInput        `json:"OR,omitempty"`
	And       []*FilterFindManySubraceInput        `json:"AND,omitempty"`
}

type FilterFindManySubraceLanguageOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManySubraceLanguageOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManySubraceLanguageOptionsInput struct {
	Choose *float64                                         `json:"choose,omitempty"`
	From   []*FilterFindManySubraceLanguageOptionsFromInput `json:"from,omitempty"`
	Type   *string                                          `json:"type,omitempty"`
}

type FilterFindManySubraceLanguageOptionsOperatorsInput struct {
	Choose *FilterFindManySubraceLanguageOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindManySubraceLanguageOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManySubraceLanguageOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubraceNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManySubraceOperatorsInput struct {
	ID              *FilterFindManySubraceIDOperatorsInput              `json:"_id,omitempty"`
	Desc            *FilterFindManySubraceDescOperatorsInput            `json:"desc,omitempty"`
	Index           *FilterFindManySubraceIndexOperatorsInput           `json:"index,omitempty"`
	LanguageOptions *FilterFindManySubraceLanguageOptionsOperatorsInput `json:"language_options,omitempty"`
	Name            *FilterFindManySubraceNameOperatorsInput            `json:"name,omitempty"`
	Race            *FilterFindManySubraceRaceOperatorsInput            `json:"race,omitempty"`
	URL             *FilterFindManySubraceURLOperatorsInput             `json:"url,omitempty"`
}

type FilterFindManySubraceRaceIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubraceRaceInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManySubraceRaceNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubraceRaceOperatorsInput struct {
	Index *FilterFindManySubraceRaceIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManySubraceRaceNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManySubraceRaceURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManySubraceRaceURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubraceRacialTraitsInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManySubraceStartingProficienciesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManySubraceURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManySubraceIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitInput struct {
	ID                 *string                                     `json:"_id,omitempty"`
	Desc               []*string                                   `json:"desc,omitempty"`
	Index              *string                                     `json:"index,omitempty"`
	Name               *string                                     `json:"name,omitempty"`
	Proficiencies      []*FilterFindManyTraitProficienciesInput    `json:"proficiencies,omitempty"`
	ProficiencyChoices *FilterFindManyTraitProficiencyChoicesInput `json:"proficiency_choices,omitempty"`
	Races              []*FilterFindManyTraitRacesInput            `json:"races,omitempty"`
	Subraces           []*FilterFindManyTraitSubracesInput         `json:"subraces,omitempty"`
	Parent             *FilterFindManyTraitParentInput             `json:"parent,omitempty"`
	TraitSpecific      *FilterFindManyTraitTraitSpecificInput      `json:"trait_specific,omitempty"`
	URL                *string                                     `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyTraitOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyTraitInput        `json:"OR,omitempty"`
	And       []*FilterFindManyTraitInput        `json:"AND,omitempty"`
}

type FilterFindManyTraitNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyTraitOperatorsInput struct {
	ID                 *FilterFindManyTraitIDOperatorsInput                 `json:"_id,omitempty"`
	Desc               *FilterFindManyTraitDescOperatorsInput               `json:"desc,omitempty"`
	Index              *FilterFindManyTraitIndexOperatorsInput              `json:"index,omitempty"`
	Name               *FilterFindManyTraitNameOperatorsInput               `json:"name,omitempty"`
	ProficiencyChoices *FilterFindManyTraitProficiencyChoicesOperatorsInput `json:"proficiency_choices,omitempty"`
	Parent             *FilterFindManyTraitParentOperatorsInput             `json:"parent,omitempty"`
	TraitSpecific      *FilterFindManyTraitTraitSpecificOperatorsInput      `json:"trait_specific,omitempty"`
	URL                *FilterFindManyTraitURLOperatorsInput                `json:"url,omitempty"`
}

type FilterFindManyTraitParentIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitParentInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyTraitParentNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitParentOperatorsInput struct {
	Index *FilterFindManyTraitParentIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyTraitParentNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyTraitParentURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyTraitParentURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitProficienciesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyTraitProficiencyChoicesChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyTraitProficiencyChoicesFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyTraitProficiencyChoicesInput struct {
	Choose *float64                                          `json:"choose,omitempty"`
	From   []*FilterFindManyTraitProficiencyChoicesFromInput `json:"from,omitempty"`
	Type   *string                                           `json:"type,omitempty"`
}

type FilterFindManyTraitProficiencyChoicesOperatorsInput struct {
	Choose *FilterFindManyTraitProficiencyChoicesChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindManyTraitProficiencyChoicesTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyTraitProficiencyChoicesTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitRacesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyTraitSubracesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponDamageDamageTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponDamageInput struct {
	DamageType             *FilterFindManyTraitTraitSpecificBreathWeaponDamageDamageTypeInput `json:"damage_type,omitempty"`
	DamageAtCharacterLevel *string                                                            `json:"damage_at_character_level,omitempty"`
	ID                     *string                                                            `json:"_id,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponDcDcTypeIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponDcDcTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponDcDcTypeNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponDcDcTypeOperatorsInput struct {
	Index *FilterFindManyTraitTraitSpecificBreathWeaponDcDcTypeIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyTraitTraitSpecificBreathWeaponDcDcTypeNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyTraitTraitSpecificBreathWeaponDcDcTypeURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponDcDcTypeURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponDcInput struct {
	DcType      *FilterFindManyTraitTraitSpecificBreathWeaponDcDcTypeInput `json:"dc_type,omitempty"`
	SuccessType *string                                                    `json:"success_type,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponDcOperatorsInput struct {
	DcType      *FilterFindManyTraitTraitSpecificBreathWeaponDcDcTypeOperatorsInput      `json:"dc_type,omitempty"`
	SuccessType *FilterFindManyTraitTraitSpecificBreathWeaponDcSuccessTypeOperatorsInput `json:"success_type,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponDcSuccessTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponInput struct {
	Name   *string                                                    `json:"name,omitempty"`
	Desc   *string                                                    `json:"desc,omitempty"`
	Usage  *FilterFindManyTraitTraitSpecificBreathWeaponUsageInput    `json:"usage,omitempty"`
	Dc     *FilterFindManyTraitTraitSpecificBreathWeaponDcInput       `json:"dc,omitempty"`
	Damage []*FilterFindManyTraitTraitSpecificBreathWeaponDamageInput `json:"damage,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponOperatorsInput struct {
	Name  *FilterFindManyTraitTraitSpecificBreathWeaponNameOperatorsInput  `json:"name,omitempty"`
	Desc  *FilterFindManyTraitTraitSpecificBreathWeaponDescOperatorsInput  `json:"desc,omitempty"`
	Usage *FilterFindManyTraitTraitSpecificBreathWeaponUsageOperatorsInput `json:"usage,omitempty"`
	Dc    *FilterFindManyTraitTraitSpecificBreathWeaponDcOperatorsInput    `json:"dc,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponUsageInput struct {
	Type  *string  `json:"type,omitempty"`
	Times *float64 `json:"times,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponUsageOperatorsInput struct {
	Type  *FilterFindManyTraitTraitSpecificBreathWeaponUsageTypeOperatorsInput  `json:"type,omitempty"`
	Times *FilterFindManyTraitTraitSpecificBreathWeaponUsageTimesOperatorsInput `json:"times,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponUsageTimesOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyTraitTraitSpecificBreathWeaponUsageTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitTraitSpecificDamageTypeIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitTraitSpecificDamageTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindManyTraitTraitSpecificDamageTypeNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitTraitSpecificDamageTypeOperatorsInput struct {
	Index *FilterFindManyTraitTraitSpecificDamageTypeIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyTraitTraitSpecificDamageTypeNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyTraitTraitSpecificDamageTypeURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyTraitTraitSpecificDamageTypeURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitTraitSpecificInput struct {
	SubtraitOptions *FilterFindManyTraitTraitSpecificSubtraitOptionsInput `json:"subtrait_options,omitempty"`
	SpellOptions    *FilterFindManyTraitTraitSpecificSpellOptionsInput    `json:"spell_options,omitempty"`
	DamageType      *FilterFindManyTraitTraitSpecificDamageTypeInput      `json:"damage_type,omitempty"`
	BreathWeapon    *FilterFindManyTraitTraitSpecificBreathWeaponInput    `json:"breath_weapon,omitempty"`
}

type FilterFindManyTraitTraitSpecificOperatorsInput struct {
	SubtraitOptions *FilterFindManyTraitTraitSpecificSubtraitOptionsOperatorsInput `json:"subtrait_options,omitempty"`
	SpellOptions    *FilterFindManyTraitTraitSpecificSpellOptionsOperatorsInput    `json:"spell_options,omitempty"`
	DamageType      *FilterFindManyTraitTraitSpecificDamageTypeOperatorsInput      `json:"damage_type,omitempty"`
	BreathWeapon    *FilterFindManyTraitTraitSpecificBreathWeaponOperatorsInput    `json:"breath_weapon,omitempty"`
}

type FilterFindManyTraitTraitSpecificSpellOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyTraitTraitSpecificSpellOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyTraitTraitSpecificSpellOptionsInput struct {
	Choose *float64                                                 `json:"choose,omitempty"`
	From   []*FilterFindManyTraitTraitSpecificSpellOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                  `json:"type,omitempty"`
}

type FilterFindManyTraitTraitSpecificSpellOptionsOperatorsInput struct {
	Choose *FilterFindManyTraitTraitSpecificSpellOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindManyTraitTraitSpecificSpellOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyTraitTraitSpecificSpellOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitTraitSpecificSubtraitOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindManyTraitTraitSpecificSubtraitOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindManyTraitTraitSpecificSubtraitOptionsInput struct {
	Choose *float64                                                    `json:"choose,omitempty"`
	From   []*FilterFindManyTraitTraitSpecificSubtraitOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                     `json:"type,omitempty"`
}

type FilterFindManyTraitTraitSpecificSubtraitOptionsOperatorsInput struct {
	Choose *FilterFindManyTraitTraitSpecificSubtraitOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindManyTraitTraitSpecificSubtraitOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindManyTraitTraitSpecificSubtraitOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyTraitIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyWeaponPropertyDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyWeaponPropertyIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyWeaponPropertyInput struct {
	ID    *string   `json:"_id,omitempty"`
	Desc  []*string `json:"desc,omitempty"`
	Index *string   `json:"index,omitempty"`
	Name  *string   `json:"name,omitempty"`
	URL   *string   `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindManyWeaponPropertyOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindManyWeaponPropertyInput        `json:"OR,omitempty"`
	And       []*FilterFindManyWeaponPropertyInput        `json:"AND,omitempty"`
}

type FilterFindManyWeaponPropertyNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindManyWeaponPropertyOperatorsInput struct {
	ID    *FilterFindManyWeaponPropertyIDOperatorsInput    `json:"_id,omitempty"`
	Desc  *FilterFindManyWeaponPropertyDescOperatorsInput  `json:"desc,omitempty"`
	Index *FilterFindManyWeaponPropertyIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindManyWeaponPropertyNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindManyWeaponPropertyURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindManyWeaponPropertyURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindManyWeaponPropertyIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneAbilityScoreDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneAbilityScoreFullNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneAbilityScoreIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneAbilityScoreInput struct {
	ID       *string                                 `json:"_id,omitempty"`
	Desc     []*string                               `json:"desc,omitempty"`
	FullName *string                                 `json:"full_name,omitempty"`
	Index    *string                                 `json:"index,omitempty"`
	Name     *string                                 `json:"name,omitempty"`
	Skills   []*FilterFindOneAbilityScoreSkillsInput `json:"skills,omitempty"`
	URL      *string                                 `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneAbilityScoreOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneAbilityScoreInput        `json:"OR,omitempty"`
	And       []*FilterFindOneAbilityScoreInput        `json:"AND,omitempty"`
}

type FilterFindOneAbilityScoreNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneAbilityScoreOperatorsInput struct {
	ID       *FilterFindOneAbilityScoreIDOperatorsInput       `json:"_id,omitempty"`
	Desc     *FilterFindOneAbilityScoreDescOperatorsInput     `json:"desc,omitempty"`
	FullName *FilterFindOneAbilityScoreFullNameOperatorsInput `json:"full_name,omitempty"`
	Index    *FilterFindOneAbilityScoreIndexOperatorsInput    `json:"index,omitempty"`
	Name     *FilterFindOneAbilityScoreNameOperatorsInput     `json:"name,omitempty"`
	URL      *FilterFindOneAbilityScoreURLOperatorsInput      `json:"url,omitempty"`
}

type FilterFindOneAbilityScoreSkillsInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneAbilityScoreURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneAbilityScoreIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneAlignmentAbbreviationOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneAlignmentDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneAlignmentIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneAlignmentInput struct {
	ID           *string `json:"_id,omitempty"`
	Desc         *string `json:"desc,omitempty"`
	Abbreviation *string `json:"abbreviation,omitempty"`
	Index        *string `json:"index,omitempty"`
	Name         *string `json:"name,omitempty"`
	URL          *string `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneAlignmentOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneAlignmentInput        `json:"OR,omitempty"`
	And       []*FilterFindOneAlignmentInput        `json:"AND,omitempty"`
}

type FilterFindOneAlignmentNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneAlignmentOperatorsInput struct {
	ID           *FilterFindOneAlignmentIDOperatorsInput           `json:"_id,omitempty"`
	Desc         *FilterFindOneAlignmentDescOperatorsInput         `json:"desc,omitempty"`
	Abbreviation *FilterFindOneAlignmentAbbreviationOperatorsInput `json:"abbreviation,omitempty"`
	Index        *FilterFindOneAlignmentIndexOperatorsInput        `json:"index,omitempty"`
	Name         *FilterFindOneAlignmentNameOperatorsInput         `json:"name,omitempty"`
	URL          *FilterFindOneAlignmentURLOperatorsInput          `json:"url,omitempty"`
}

type FilterFindOneAlignmentURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneAlignmentIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneBackgroundBondsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneBackgroundBondsFromOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneBackgroundBondsInput struct {
	Choose *float64  `json:"choose,omitempty"`
	From   []*string `json:"from,omitempty"`
	Type   *string   `json:"type,omitempty"`
}

type FilterFindOneBackgroundBondsOperatorsInput struct {
	Choose *FilterFindOneBackgroundBondsChooseOperatorsInput `json:"choose,omitempty"`
	From   *FilterFindOneBackgroundBondsFromOperatorsInput   `json:"from,omitempty"`
	Type   *FilterFindOneBackgroundBondsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneBackgroundBondsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneBackgroundFeatureDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneBackgroundFeatureInput struct {
	Name *string   `json:"name,omitempty"`
	Desc []*string `json:"desc,omitempty"`
}

type FilterFindOneBackgroundFeatureNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneBackgroundFeatureOperatorsInput struct {
	Name *FilterFindOneBackgroundFeatureNameOperatorsInput `json:"name,omitempty"`
	Desc *FilterFindOneBackgroundFeatureDescOperatorsInput `json:"desc,omitempty"`
}

type FilterFindOneBackgroundFlawsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneBackgroundFlawsFromOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneBackgroundFlawsInput struct {
	Choose *float64  `json:"choose,omitempty"`
	From   []*string `json:"from,omitempty"`
	Type   *string   `json:"type,omitempty"`
}

type FilterFindOneBackgroundFlawsOperatorsInput struct {
	Choose *FilterFindOneBackgroundFlawsChooseOperatorsInput `json:"choose,omitempty"`
	From   *FilterFindOneBackgroundFlawsFromOperatorsInput   `json:"from,omitempty"`
	Type   *FilterFindOneBackgroundFlawsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneBackgroundFlawsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneBackgroundIdealsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneBackgroundIdealsFromAlignmentsInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneBackgroundIdealsFromInput struct {
	Desc       *string                                             `json:"desc,omitempty"`
	Alignments []*FilterFindOneBackgroundIdealsFromAlignmentsInput `json:"alignments,omitempty"`
	ID         *string                                             `json:"_id,omitempty"`
}

type FilterFindOneBackgroundIdealsInput struct {
	Choose *float64                                  `json:"choose,omitempty"`
	From   []*FilterFindOneBackgroundIdealsFromInput `json:"from,omitempty"`
	Type   *string                                   `json:"type,omitempty"`
}

type FilterFindOneBackgroundIdealsOperatorsInput struct {
	Choose *FilterFindOneBackgroundIdealsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindOneBackgroundIdealsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneBackgroundIdealsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneBackgroundIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneBackgroundInput struct {
	ID                       *string                                                 `json:"_id,omitempty"`
	Index                    *string                                                 `json:"index,omitempty"`
	Name                     *string                                                 `json:"name,omitempty"`
	StartingProficiencies    []*FilterFindOneBackgroundStartingProficienciesInput    `json:"starting_proficiencies,omitempty"`
	LanguageOptions          *FilterFindOneBackgroundLanguageOptionsInput            `json:"language_options,omitempty"`
	URL                      *string                                                 `json:"url,omitempty"`
	StartingEquipment        []*FilterFindOneBackgroundStartingEquipmentInput        `json:"starting_equipment,omitempty"`
	StartingEquipmentOptions []*FilterFindOneBackgroundStartingEquipmentOptionsInput `json:"starting_equipment_options,omitempty"`
	Feature                  *FilterFindOneBackgroundFeatureInput                    `json:"feature,omitempty"`
	PersonalityTraits        *FilterFindOneBackgroundPersonalityTraitsInput          `json:"personality_traits,omitempty"`
	Ideals                   *FilterFindOneBackgroundIdealsInput                     `json:"ideals,omitempty"`
	Bonds                    *FilterFindOneBackgroundBondsInput                      `json:"bonds,omitempty"`
	Flaws                    *FilterFindOneBackgroundFlawsInput                      `json:"flaws,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneBackgroundOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneBackgroundInput        `json:"OR,omitempty"`
	And       []*FilterFindOneBackgroundInput        `json:"AND,omitempty"`
}

type FilterFindOneBackgroundLanguageOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneBackgroundLanguageOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneBackgroundLanguageOptionsInput struct {
	Choose *float64                                           `json:"choose,omitempty"`
	From   []*FilterFindOneBackgroundLanguageOptionsFromInput `json:"from,omitempty"`
	Type   *string                                            `json:"type,omitempty"`
}

type FilterFindOneBackgroundLanguageOptionsOperatorsInput struct {
	Choose *FilterFindOneBackgroundLanguageOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindOneBackgroundLanguageOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneBackgroundLanguageOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneBackgroundNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneBackgroundOperatorsInput struct {
	ID                *FilterFindOneBackgroundIDOperatorsInput                `json:"_id,omitempty"`
	Index             *FilterFindOneBackgroundIndexOperatorsInput             `json:"index,omitempty"`
	Name              *FilterFindOneBackgroundNameOperatorsInput              `json:"name,omitempty"`
	LanguageOptions   *FilterFindOneBackgroundLanguageOptionsOperatorsInput   `json:"language_options,omitempty"`
	URL               *FilterFindOneBackgroundURLOperatorsInput               `json:"url,omitempty"`
	Feature           *FilterFindOneBackgroundFeatureOperatorsInput           `json:"feature,omitempty"`
	PersonalityTraits *FilterFindOneBackgroundPersonalityTraitsOperatorsInput `json:"personality_traits,omitempty"`
	Ideals            *FilterFindOneBackgroundIdealsOperatorsInput            `json:"ideals,omitempty"`
	Bonds             *FilterFindOneBackgroundBondsOperatorsInput             `json:"bonds,omitempty"`
	Flaws             *FilterFindOneBackgroundFlawsOperatorsInput             `json:"flaws,omitempty"`
}

type FilterFindOneBackgroundPersonalityTraitsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneBackgroundPersonalityTraitsFromOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneBackgroundPersonalityTraitsInput struct {
	Choose *float64  `json:"choose,omitempty"`
	From   []*string `json:"from,omitempty"`
	Type   *string   `json:"type,omitempty"`
}

type FilterFindOneBackgroundPersonalityTraitsOperatorsInput struct {
	Choose *FilterFindOneBackgroundPersonalityTraitsChooseOperatorsInput `json:"choose,omitempty"`
	From   *FilterFindOneBackgroundPersonalityTraitsFromOperatorsInput   `json:"from,omitempty"`
	Type   *FilterFindOneBackgroundPersonalityTraitsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneBackgroundPersonalityTraitsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneBackgroundStartingEquipmentEquipmentInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneBackgroundStartingEquipmentInput struct {
	Equipment *FilterFindOneBackgroundStartingEquipmentEquipmentInput `json:"equipment,omitempty"`
	Quantity  *float64                                                `json:"quantity,omitempty"`
}

type FilterFindOneBackgroundStartingEquipmentOptionsFromEquipmentInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneBackgroundStartingEquipmentOptionsFromInput struct {
	Equipment *FilterFindOneBackgroundStartingEquipmentOptionsFromEquipmentInput `json:"equipment,omitempty"`
	Quantity  *float64                                                           `json:"quantity,omitempty"`
}

type FilterFindOneBackgroundStartingEquipmentOptionsInput struct {
	Choose *float64                                                    `json:"choose,omitempty"`
	From   []*FilterFindOneBackgroundStartingEquipmentOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                     `json:"type,omitempty"`
}

type FilterFindOneBackgroundStartingProficienciesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneBackgroundURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneBackgroundIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneClassClassLevelsOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneClassHitDieOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneClassIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneClassInput struct {
	ID                       *string                                            `json:"_id,omitempty"`
	ClassLevels              *string                                            `json:"class_levels,omitempty"`
	MultiClassing            *FilterFindOneClassMultiClassingInput              `json:"multi_classing,omitempty"`
	HitDie                   *float64                                           `json:"hit_die,omitempty"`
	Index                    *string                                            `json:"index,omitempty"`
	Name                     *string                                            `json:"name,omitempty"`
	Proficiencies            []*FilterFindOneClassProficienciesInput            `json:"proficiencies,omitempty"`
	ProficiencyChoices       []*FilterFindOneClassProficiencyChoicesInput       `json:"proficiency_choices,omitempty"`
	SavingThrows             []*FilterFindOneClassSavingThrowsInput             `json:"saving_throws,omitempty"`
	Spellcasting             *FilterFindOneClassSpellcastingInput               `json:"spellcasting,omitempty"`
	Spells                   *string                                            `json:"spells,omitempty"`
	StartingEquipment        []*FilterFindOneClassStartingEquipmentInput        `json:"starting_equipment,omitempty"`
	StartingEquipmentOptions []*FilterFindOneClassStartingEquipmentOptionsInput `json:"starting_equipment_options,omitempty"`
	Subclasses               []*FilterFindOneClassSubclassesInput               `json:"subclasses,omitempty"`
	URL                      *string                                            `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneClassOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneClassInput        `json:"OR,omitempty"`
	And       []*FilterFindOneClassInput        `json:"AND,omitempty"`
}

type FilterFindOneClassMultiClassingInput struct {
	Prerequisites       []*FilterFindOneClassMultiClassingPrerequisitesInput      `json:"prerequisites,omitempty"`
	PrerequisiteOptions *FilterFindOneClassMultiClassingPrerequisiteOptionsInput  `json:"prerequisite_options,omitempty"`
	Proficiencies       []*FilterFindOneClassMultiClassingProficienciesInput      `json:"proficiencies,omitempty"`
	ProficiencyChoices  []*FilterFindOneClassMultiClassingProficiencyChoicesInput `json:"proficiency_choices,omitempty"`
}

type FilterFindOneClassMultiClassingOperatorsInput struct {
	PrerequisiteOptions *FilterFindOneClassMultiClassingPrerequisiteOptionsOperatorsInput `json:"prerequisite_options,omitempty"`
}

type FilterFindOneClassMultiClassingPrerequisiteOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneClassMultiClassingPrerequisiteOptionsFromAbilityScoreInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneClassMultiClassingPrerequisiteOptionsFromInput struct {
	AbilityScore *FilterFindOneClassMultiClassingPrerequisiteOptionsFromAbilityScoreInput `json:"ability_score,omitempty"`
	MinimumScore *float64                                                                 `json:"minimum_score,omitempty"`
	ID           *string                                                                  `json:"_id,omitempty"`
}

type FilterFindOneClassMultiClassingPrerequisiteOptionsInput struct {
	Choose *float64                                                       `json:"choose,omitempty"`
	From   []*FilterFindOneClassMultiClassingPrerequisiteOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                        `json:"type,omitempty"`
}

type FilterFindOneClassMultiClassingPrerequisiteOptionsOperatorsInput struct {
	Choose *FilterFindOneClassMultiClassingPrerequisiteOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindOneClassMultiClassingPrerequisiteOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneClassMultiClassingPrerequisiteOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneClassMultiClassingPrerequisitesAbilityScoreInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneClassMultiClassingPrerequisitesInput struct {
	AbilityScore *FilterFindOneClassMultiClassingPrerequisitesAbilityScoreInput `json:"ability_score,omitempty"`
	MinimumScore *float64                                                       `json:"minimum_score,omitempty"`
	ID           *string                                                        `json:"_id,omitempty"`
}

type FilterFindOneClassMultiClassingProficienciesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneClassMultiClassingProficiencyChoicesFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneClassMultiClassingProficiencyChoicesInput struct {
	Choose *float64                                                      `json:"choose,omitempty"`
	From   []*FilterFindOneClassMultiClassingProficiencyChoicesFromInput `json:"from,omitempty"`
	Type   *string                                                       `json:"type,omitempty"`
	ID     *string                                                       `json:"_id,omitempty"`
}

type FilterFindOneClassNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneClassOperatorsInput struct {
	ID            *FilterFindOneClassIDOperatorsInput            `json:"_id,omitempty"`
	ClassLevels   *FilterFindOneClassClassLevelsOperatorsInput   `json:"class_levels,omitempty"`
	MultiClassing *FilterFindOneClassMultiClassingOperatorsInput `json:"multi_classing,omitempty"`
	HitDie        *FilterFindOneClassHitDieOperatorsInput        `json:"hit_die,omitempty"`
	Index         *FilterFindOneClassIndexOperatorsInput         `json:"index,omitempty"`
	Name          *FilterFindOneClassNameOperatorsInput          `json:"name,omitempty"`
	Spellcasting  *FilterFindOneClassSpellcastingOperatorsInput  `json:"spellcasting,omitempty"`
	Spells        *FilterFindOneClassSpellsOperatorsInput        `json:"spells,omitempty"`
	URL           *FilterFindOneClassURLOperatorsInput           `json:"url,omitempty"`
}

type FilterFindOneClassProficienciesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneClassProficiencyChoicesFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneClassProficiencyChoicesInput struct {
	Choose *float64                                         `json:"choose,omitempty"`
	From   []*FilterFindOneClassProficiencyChoicesFromInput `json:"from,omitempty"`
	Type   *string                                          `json:"type,omitempty"`
	ID     *string                                          `json:"_id,omitempty"`
}

type FilterFindOneClassSavingThrowsInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneClassSpellcastingInfoInput struct {
	Desc []*string `json:"desc,omitempty"`
	Name *string   `json:"name,omitempty"`
	ID   *string   `json:"_id,omitempty"`
}

type FilterFindOneClassSpellcastingInput struct {
	Info                []*FilterFindOneClassSpellcastingInfoInput              `json:"info,omitempty"`
	Level               *float64                                                `json:"level,omitempty"`
	SpellcastingAbility *FilterFindOneClassSpellcastingSpellcastingAbilityInput `json:"spellcasting_ability,omitempty"`
}

type FilterFindOneClassSpellcastingLevelOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneClassSpellcastingOperatorsInput struct {
	Level               *FilterFindOneClassSpellcastingLevelOperatorsInput               `json:"level,omitempty"`
	SpellcastingAbility *FilterFindOneClassSpellcastingSpellcastingAbilityOperatorsInput `json:"spellcasting_ability,omitempty"`
}

type FilterFindOneClassSpellcastingSpellcastingAbilityIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneClassSpellcastingSpellcastingAbilityInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneClassSpellcastingSpellcastingAbilityNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneClassSpellcastingSpellcastingAbilityOperatorsInput struct {
	Index *FilterFindOneClassSpellcastingSpellcastingAbilityIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneClassSpellcastingSpellcastingAbilityNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneClassSpellcastingSpellcastingAbilityURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneClassSpellcastingSpellcastingAbilityURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneClassSpellsOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneClassStartingEquipmentEquipmentInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneClassStartingEquipmentInput struct {
	Equipment *FilterFindOneClassStartingEquipmentEquipmentInput `json:"equipment,omitempty"`
	Quantity  *float64                                           `json:"quantity,omitempty"`
	ID        *string                                            `json:"_id,omitempty"`
}

type FilterFindOneClassStartingEquipmentOptionsFromEquipmentInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneClassStartingEquipmentOptionsFromInput struct {
	Equipment *FilterFindOneClassStartingEquipmentOptionsFromEquipmentInput `json:"equipment,omitempty"`
	Quantity  *float64                                                      `json:"quantity,omitempty"`
	ID        *string                                                       `json:"_id,omitempty"`
}

type FilterFindOneClassStartingEquipmentOptionsInput struct {
	Choose *float64                                               `json:"choose,omitempty"`
	From   []*FilterFindOneClassStartingEquipmentOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                `json:"type,omitempty"`
	ID     *string                                                `json:"_id,omitempty"`
}

type FilterFindOneClassSubclassesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneClassURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneClassIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneConditionDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneConditionIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneConditionInput struct {
	ID    *string   `json:"_id,omitempty"`
	Desc  []*string `json:"desc,omitempty"`
	Index *string   `json:"index,omitempty"`
	Name  *string   `json:"name,omitempty"`
	URL   *string   `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneConditionOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneConditionInput        `json:"OR,omitempty"`
	And       []*FilterFindOneConditionInput        `json:"AND,omitempty"`
}

type FilterFindOneConditionNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneConditionOperatorsInput struct {
	ID    *FilterFindOneConditionIDOperatorsInput    `json:"_id,omitempty"`
	Desc  *FilterFindOneConditionDescOperatorsInput  `json:"desc,omitempty"`
	Index *FilterFindOneConditionIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneConditionNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneConditionURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneConditionURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneConditionIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneDamageTypeDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneDamageTypeIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneDamageTypeInput struct {
	ID    *string   `json:"_id,omitempty"`
	Desc  []*string `json:"desc,omitempty"`
	Index *string   `json:"index,omitempty"`
	Name  *string   `json:"name,omitempty"`
	URL   *string   `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneDamageTypeOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneDamageTypeInput        `json:"OR,omitempty"`
	And       []*FilterFindOneDamageTypeInput        `json:"AND,omitempty"`
}

type FilterFindOneDamageTypeNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneDamageTypeOperatorsInput struct {
	ID    *FilterFindOneDamageTypeIDOperatorsInput    `json:"_id,omitempty"`
	Desc  *FilterFindOneDamageTypeDescOperatorsInput  `json:"desc,omitempty"`
	Index *FilterFindOneDamageTypeIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneDamageTypeNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneDamageTypeURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneDamageTypeURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneDamageTypeIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentArmorCategoryOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentArmorClassBaseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneEquipmentArmorClassDexBonusOperatorsInput struct {
	Gt     *bool   `json:"gt,omitempty"`
	Gte    *bool   `json:"gte,omitempty"`
	Lt     *bool   `json:"lt,omitempty"`
	Lte    *bool   `json:"lte,omitempty"`
	Ne     *bool   `json:"ne,omitempty"`
	In     []*bool `json:"in,omitempty"`
	Nin    []*bool `json:"nin,omitempty"`
	Exists *bool   `json:"exists,omitempty"`
}

type FilterFindOneEquipmentArmorClassInput struct {
	Base     *float64 `json:"base,omitempty"`
	DexBonus *bool    `json:"dex_bonus,omitempty"`
	MaxBonus *float64 `json:"max_bonus,omitempty"`
}

type FilterFindOneEquipmentArmorClassMaxBonusOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneEquipmentArmorClassOperatorsInput struct {
	Base     *FilterFindOneEquipmentArmorClassBaseOperatorsInput     `json:"base,omitempty"`
	DexBonus *FilterFindOneEquipmentArmorClassDexBonusOperatorsInput `json:"dex_bonus,omitempty"`
	MaxBonus *FilterFindOneEquipmentArmorClassMaxBonusOperatorsInput `json:"max_bonus,omitempty"`
}

type FilterFindOneEquipmentCapacityOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentCategoryEquipmentInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneEquipmentCategoryIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentCategoryInput struct {
	ID        *string                                         `json:"_id,omitempty"`
	Equipment []*FilterFindOneEquipmentCategoryEquipmentInput `json:"equipment,omitempty"`
	Index     *string                                         `json:"index,omitempty"`
	Name      *string                                         `json:"name,omitempty"`
	URL       *string                                         `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneEquipmentCategoryOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneEquipmentCategoryInput        `json:"OR,omitempty"`
	And       []*FilterFindOneEquipmentCategoryInput        `json:"AND,omitempty"`
}

type FilterFindOneEquipmentCategoryNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneEquipmentCategoryOperatorsInput struct {
	ID    *FilterFindOneEquipmentCategoryIDOperatorsInput    `json:"_id,omitempty"`
	Index *FilterFindOneEquipmentCategoryIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneEquipmentCategoryNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneEquipmentCategoryURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneEquipmentCategoryURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentCategoryIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentCategoryRangeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentContentsInput struct {
	Item     *FilterFindOneEquipmentContentsItemInput `json:"item,omitempty"`
	Quantity *float64                                 `json:"quantity,omitempty"`
	ID       *string                                  `json:"_id,omitempty"`
}

type FilterFindOneEquipmentContentsItemInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneEquipmentCostInput struct {
	Quantity *float64 `json:"quantity,omitempty"`
	Unit     *string  `json:"unit,omitempty"`
}

type FilterFindOneEquipmentCostOperatorsInput struct {
	Quantity *FilterFindOneEquipmentCostQuantityOperatorsInput `json:"quantity,omitempty"`
	Unit     *FilterFindOneEquipmentCostUnitOperatorsInput     `json:"unit,omitempty"`
}

type FilterFindOneEquipmentCostQuantityOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneEquipmentCostUnitOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentDamageDamageDiceOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentDamageDamageTypeIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentDamageDamageTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneEquipmentDamageDamageTypeNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentDamageDamageTypeOperatorsInput struct {
	Index *FilterFindOneEquipmentDamageDamageTypeIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneEquipmentDamageDamageTypeNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneEquipmentDamageDamageTypeURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneEquipmentDamageDamageTypeURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentDamageInput struct {
	DamageDice *string                                      `json:"damage_dice,omitempty"`
	DamageType *FilterFindOneEquipmentDamageDamageTypeInput `json:"damage_type,omitempty"`
}

type FilterFindOneEquipmentDamageOperatorsInput struct {
	DamageDice *FilterFindOneEquipmentDamageDamageDiceOperatorsInput `json:"damage_dice,omitempty"`
	DamageType *FilterFindOneEquipmentDamageDamageTypeOperatorsInput `json:"damage_type,omitempty"`
}

type FilterFindOneEquipmentDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentEquipmentCategoryIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentEquipmentCategoryInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneEquipmentEquipmentCategoryNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentEquipmentCategoryOperatorsInput struct {
	Index *FilterFindOneEquipmentEquipmentCategoryIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneEquipmentEquipmentCategoryNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneEquipmentEquipmentCategoryURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneEquipmentEquipmentCategoryURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentGearCategoryIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentGearCategoryInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneEquipmentGearCategoryNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentGearCategoryOperatorsInput struct {
	Index *FilterFindOneEquipmentGearCategoryIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneEquipmentGearCategoryNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneEquipmentGearCategoryURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneEquipmentGearCategoryURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentInput struct {
	ID                  *string                                       `json:"_id,omitempty"`
	ArmorCategory       *string                                       `json:"armor_category,omitempty"`
	ArmorClass          *FilterFindOneEquipmentArmorClassInput        `json:"armor_class,omitempty"`
	Capacity            *string                                       `json:"capacity,omitempty"`
	CategoryRange       *string                                       `json:"category_range,omitempty"`
	Contents            []*FilterFindOneEquipmentContentsInput        `json:"contents,omitempty"`
	Cost                *FilterFindOneEquipmentCostInput              `json:"cost,omitempty"`
	Damage              *FilterFindOneEquipmentDamageInput            `json:"damage,omitempty"`
	Desc                []*string                                     `json:"desc,omitempty"`
	EquipmentCategory   *FilterFindOneEquipmentEquipmentCategoryInput `json:"equipment_category,omitempty"`
	GearCategory        *FilterFindOneEquipmentGearCategoryInput      `json:"gear_category,omitempty"`
	Index               *string                                       `json:"index,omitempty"`
	Name                *string                                       `json:"name,omitempty"`
	Properties          []*FilterFindOneEquipmentPropertiesInput      `json:"properties,omitempty"`
	Quantity            *float64                                      `json:"quantity,omitempty"`
	Range               *FilterFindOneEquipmentRangeInput             `json:"range,omitempty"`
	Special             []*string                                     `json:"special,omitempty"`
	Speed               *FilterFindOneEquipmentSpeedInput             `json:"speed,omitempty"`
	StealthDisadvantage *bool                                         `json:"stealth_disadvantage,omitempty"`
	StrMinimum          *float64                                      `json:"str_minimum,omitempty"`
	ThrowRange          *FilterFindOneEquipmentThrowRangeInput        `json:"throw_range,omitempty"`
	ToolCategory        *string                                       `json:"tool_category,omitempty"`
	TwoHandedDamage     *FilterFindOneEquipmentTwoHandedDamageInput   `json:"two_handed_damage,omitempty"`
	URL                 *string                                       `json:"url,omitempty"`
	VehicleCategory     *string                                       `json:"vehicle_category,omitempty"`
	WeaponCategory      *string                                       `json:"weapon_category,omitempty"`
	WeaponRange         *string                                       `json:"weapon_range,omitempty"`
	Weight              *float64                                      `json:"weight,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneEquipmentOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneEquipmentInput        `json:"OR,omitempty"`
	And       []*FilterFindOneEquipmentInput        `json:"AND,omitempty"`
}

type FilterFindOneEquipmentNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneEquipmentOperatorsInput struct {
	ID                  *FilterFindOneEquipmentIDOperatorsInput                  `json:"_id,omitempty"`
	ArmorCategory       *FilterFindOneEquipmentArmorCategoryOperatorsInput       `json:"armor_category,omitempty"`
	ArmorClass          *FilterFindOneEquipmentArmorClassOperatorsInput          `json:"armor_class,omitempty"`
	Capacity            *FilterFindOneEquipmentCapacityOperatorsInput            `json:"capacity,omitempty"`
	CategoryRange       *FilterFindOneEquipmentCategoryRangeOperatorsInput       `json:"category_range,omitempty"`
	Cost                *FilterFindOneEquipmentCostOperatorsInput                `json:"cost,omitempty"`
	Damage              *FilterFindOneEquipmentDamageOperatorsInput              `json:"damage,omitempty"`
	Desc                *FilterFindOneEquipmentDescOperatorsInput                `json:"desc,omitempty"`
	EquipmentCategory   *FilterFindOneEquipmentEquipmentCategoryOperatorsInput   `json:"equipment_category,omitempty"`
	GearCategory        *FilterFindOneEquipmentGearCategoryOperatorsInput        `json:"gear_category,omitempty"`
	Index               *FilterFindOneEquipmentIndexOperatorsInput               `json:"index,omitempty"`
	Name                *FilterFindOneEquipmentNameOperatorsInput                `json:"name,omitempty"`
	Quantity            *FilterFindOneEquipmentQuantityOperatorsInput            `json:"quantity,omitempty"`
	Range               *FilterFindOneEquipmentRangeOperatorsInput               `json:"range,omitempty"`
	Special             *FilterFindOneEquipmentSpecialOperatorsInput             `json:"special,omitempty"`
	Speed               *FilterFindOneEquipmentSpeedOperatorsInput               `json:"speed,omitempty"`
	StealthDisadvantage *FilterFindOneEquipmentStealthDisadvantageOperatorsInput `json:"stealth_disadvantage,omitempty"`
	StrMinimum          *FilterFindOneEquipmentStrMinimumOperatorsInput          `json:"str_minimum,omitempty"`
	ThrowRange          *FilterFindOneEquipmentThrowRangeOperatorsInput          `json:"throw_range,omitempty"`
	ToolCategory        *FilterFindOneEquipmentToolCategoryOperatorsInput        `json:"tool_category,omitempty"`
	TwoHandedDamage     *FilterFindOneEquipmentTwoHandedDamageOperatorsInput     `json:"two_handed_damage,omitempty"`
	URL                 *FilterFindOneEquipmentURLOperatorsInput                 `json:"url,omitempty"`
	VehicleCategory     *FilterFindOneEquipmentVehicleCategoryOperatorsInput     `json:"vehicle_category,omitempty"`
	WeaponCategory      *FilterFindOneEquipmentWeaponCategoryOperatorsInput      `json:"weapon_category,omitempty"`
	WeaponRange         *FilterFindOneEquipmentWeaponRangeOperatorsInput         `json:"weapon_range,omitempty"`
	Weight              *FilterFindOneEquipmentWeightOperatorsInput              `json:"weight,omitempty"`
}

type FilterFindOneEquipmentPropertiesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneEquipmentQuantityOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneEquipmentRangeInput struct {
	Long   *float64 `json:"long,omitempty"`
	Normal *float64 `json:"normal,omitempty"`
}

type FilterFindOneEquipmentRangeLongOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneEquipmentRangeNormalOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneEquipmentRangeOperatorsInput struct {
	Long   *FilterFindOneEquipmentRangeLongOperatorsInput   `json:"long,omitempty"`
	Normal *FilterFindOneEquipmentRangeNormalOperatorsInput `json:"normal,omitempty"`
}

type FilterFindOneEquipmentSpecialOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentSpeedInput struct {
	Quantity *float64 `json:"quantity,omitempty"`
	Unit     *string  `json:"unit,omitempty"`
}

type FilterFindOneEquipmentSpeedOperatorsInput struct {
	Quantity *FilterFindOneEquipmentSpeedQuantityOperatorsInput `json:"quantity,omitempty"`
	Unit     *FilterFindOneEquipmentSpeedUnitOperatorsInput     `json:"unit,omitempty"`
}

type FilterFindOneEquipmentSpeedQuantityOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneEquipmentSpeedUnitOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentStealthDisadvantageOperatorsInput struct {
	Gt     *bool   `json:"gt,omitempty"`
	Gte    *bool   `json:"gte,omitempty"`
	Lt     *bool   `json:"lt,omitempty"`
	Lte    *bool   `json:"lte,omitempty"`
	Ne     *bool   `json:"ne,omitempty"`
	In     []*bool `json:"in,omitempty"`
	Nin    []*bool `json:"nin,omitempty"`
	Exists *bool   `json:"exists,omitempty"`
}

type FilterFindOneEquipmentStrMinimumOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneEquipmentThrowRangeInput struct {
	Long   *float64 `json:"long,omitempty"`
	Normal *float64 `json:"normal,omitempty"`
}

type FilterFindOneEquipmentThrowRangeLongOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneEquipmentThrowRangeNormalOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneEquipmentThrowRangeOperatorsInput struct {
	Long   *FilterFindOneEquipmentThrowRangeLongOperatorsInput   `json:"long,omitempty"`
	Normal *FilterFindOneEquipmentThrowRangeNormalOperatorsInput `json:"normal,omitempty"`
}

type FilterFindOneEquipmentToolCategoryOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentTwoHandedDamageDamageDiceOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentTwoHandedDamageDamageTypeIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentTwoHandedDamageDamageTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneEquipmentTwoHandedDamageDamageTypeNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentTwoHandedDamageDamageTypeOperatorsInput struct {
	Index *FilterFindOneEquipmentTwoHandedDamageDamageTypeIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneEquipmentTwoHandedDamageDamageTypeNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneEquipmentTwoHandedDamageDamageTypeURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneEquipmentTwoHandedDamageDamageTypeURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentTwoHandedDamageInput struct {
	DamageDice *string                                               `json:"damage_dice,omitempty"`
	DamageType *FilterFindOneEquipmentTwoHandedDamageDamageTypeInput `json:"damage_type,omitempty"`
}

type FilterFindOneEquipmentTwoHandedDamageOperatorsInput struct {
	DamageDice *FilterFindOneEquipmentTwoHandedDamageDamageDiceOperatorsInput `json:"damage_dice,omitempty"`
	DamageType *FilterFindOneEquipmentTwoHandedDamageDamageTypeOperatorsInput `json:"damage_type,omitempty"`
}

type FilterFindOneEquipmentURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentVehicleCategoryOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentWeaponCategoryOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentWeaponRangeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneEquipmentWeightOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneEquipmentIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatInput struct {
	ID            *string                                `json:"_id,omitempty"`
	Index         *string                                `json:"index,omitempty"`
	Name          *string                                `json:"name,omitempty"`
	Prerequisites []*FilterFindOneFeatPrerequisitesInput `json:"prerequisites,omitempty"`
	Desc          []*string                              `json:"desc,omitempty"`
	URL           *string                                `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneFeatOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneFeatInput        `json:"OR,omitempty"`
	And       []*FilterFindOneFeatInput        `json:"AND,omitempty"`
}

type FilterFindOneFeatNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneFeatOperatorsInput struct {
	ID    *FilterFindOneFeatIDOperatorsInput    `json:"_id,omitempty"`
	Index *FilterFindOneFeatIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneFeatNameOperatorsInput  `json:"name,omitempty"`
	Desc  *FilterFindOneFeatDescOperatorsInput  `json:"desc,omitempty"`
	URL   *FilterFindOneFeatURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneFeatPrerequisitesAbilityScoreInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneFeatPrerequisitesInput struct {
	AbilityScore *FilterFindOneFeatPrerequisitesAbilityScoreInput `json:"ability_score,omitempty"`
	MinimumScore *float64                                         `json:"minimum_score,omitempty"`
	ID           *string                                          `json:"_id,omitempty"`
}

type FilterFindOneFeatURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureChoiceChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneFeatureChoiceFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneFeatureChoiceInput struct {
	Choose *float64                               `json:"choose,omitempty"`
	From   []*FilterFindOneFeatureChoiceFromInput `json:"from,omitempty"`
	Type   *string                                `json:"type,omitempty"`
}

type FilterFindOneFeatureChoiceOperatorsInput struct {
	Choose *FilterFindOneFeatureChoiceChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindOneFeatureChoiceTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneFeatureChoiceTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureClassIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureClassInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneFeatureClassNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureClassOperatorsInput struct {
	Index *FilterFindOneFeatureClassIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneFeatureClassNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneFeatureClassURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneFeatureClassURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureFeatureSpecificExpertiseOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneFeatureFeatureSpecificExpertiseOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneFeatureFeatureSpecificExpertiseOptionsInput struct {
	Choose *float64                                                        `json:"choose,omitempty"`
	From   []*FilterFindOneFeatureFeatureSpecificExpertiseOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                         `json:"type,omitempty"`
}

type FilterFindOneFeatureFeatureSpecificExpertiseOptionsOperatorsInput struct {
	Choose *FilterFindOneFeatureFeatureSpecificExpertiseOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindOneFeatureFeatureSpecificExpertiseOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneFeatureFeatureSpecificExpertiseOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureFeatureSpecificInput struct {
	SubfeatureOptions *FilterFindOneFeatureFeatureSpecificSubfeatureOptionsInput `json:"subfeature_options,omitempty"`
	ExpertiseOptions  *FilterFindOneFeatureFeatureSpecificExpertiseOptionsInput  `json:"expertise_options,omitempty"`
}

type FilterFindOneFeatureFeatureSpecificOperatorsInput struct {
	SubfeatureOptions *FilterFindOneFeatureFeatureSpecificSubfeatureOptionsOperatorsInput `json:"subfeature_options,omitempty"`
	ExpertiseOptions  *FilterFindOneFeatureFeatureSpecificExpertiseOptionsOperatorsInput  `json:"expertise_options,omitempty"`
}

type FilterFindOneFeatureFeatureSpecificSubfeatureOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneFeatureFeatureSpecificSubfeatureOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneFeatureFeatureSpecificSubfeatureOptionsInput struct {
	Choose *float64                                                         `json:"choose,omitempty"`
	From   []*FilterFindOneFeatureFeatureSpecificSubfeatureOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                          `json:"type,omitempty"`
}

type FilterFindOneFeatureFeatureSpecificSubfeatureOptionsOperatorsInput struct {
	Choose *FilterFindOneFeatureFeatureSpecificSubfeatureOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindOneFeatureFeatureSpecificSubfeatureOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneFeatureFeatureSpecificSubfeatureOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureInput struct {
	ID              *string                                   `json:"_id,omitempty"`
	Choice          *FilterFindOneFeatureChoiceInput          `json:"choice,omitempty"`
	Class           *FilterFindOneFeatureClassInput           `json:"class,omitempty"`
	Desc            []*string                                 `json:"desc,omitempty"`
	Parent          *FilterFindOneFeatureParentInput          `json:"parent,omitempty"`
	Index           *string                                   `json:"index,omitempty"`
	Level           *float64                                  `json:"level,omitempty"`
	Name            *string                                   `json:"name,omitempty"`
	Prerequisites   []*FilterFindOneFeaturePrerequisitesInput `json:"prerequisites,omitempty"`
	Reference       *string                                   `json:"reference,omitempty"`
	Subclass        *FilterFindOneFeatureSubclassInput        `json:"subclass,omitempty"`
	FeatureSpecific *FilterFindOneFeatureFeatureSpecificInput `json:"feature_specific,omitempty"`
	URL             *string                                   `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneFeatureOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneFeatureInput        `json:"OR,omitempty"`
	And       []*FilterFindOneFeatureInput        `json:"AND,omitempty"`
}

type FilterFindOneFeatureLevelOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneFeatureNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneFeatureOperatorsInput struct {
	ID              *FilterFindOneFeatureIDOperatorsInput              `json:"_id,omitempty"`
	Choice          *FilterFindOneFeatureChoiceOperatorsInput          `json:"choice,omitempty"`
	Class           *FilterFindOneFeatureClassOperatorsInput           `json:"class,omitempty"`
	Desc            *FilterFindOneFeatureDescOperatorsInput            `json:"desc,omitempty"`
	Parent          *FilterFindOneFeatureParentOperatorsInput          `json:"parent,omitempty"`
	Index           *FilterFindOneFeatureIndexOperatorsInput           `json:"index,omitempty"`
	Level           *FilterFindOneFeatureLevelOperatorsInput           `json:"level,omitempty"`
	Name            *FilterFindOneFeatureNameOperatorsInput            `json:"name,omitempty"`
	Reference       *FilterFindOneFeatureReferenceOperatorsInput       `json:"reference,omitempty"`
	Subclass        *FilterFindOneFeatureSubclassOperatorsInput        `json:"subclass,omitempty"`
	FeatureSpecific *FilterFindOneFeatureFeatureSpecificOperatorsInput `json:"feature_specific,omitempty"`
	URL             *FilterFindOneFeatureURLOperatorsInput             `json:"url,omitempty"`
}

type FilterFindOneFeatureParentIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureParentInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneFeatureParentNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureParentOperatorsInput struct {
	Index *FilterFindOneFeatureParentIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneFeatureParentNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneFeatureParentURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneFeatureParentURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeaturePrerequisitesInput struct {
	Level *float64 `json:"level,omitempty"`
	Type  *string  `json:"type,omitempty"`
	ID    *string  `json:"_id,omitempty"`
}

type FilterFindOneFeatureReferenceOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureSubclassIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureSubclassInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneFeatureSubclassNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureSubclassOperatorsInput struct {
	Index *FilterFindOneFeatureSubclassIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneFeatureSubclassNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneFeatureSubclassURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneFeatureSubclassURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneFeatureIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLanguageDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLanguageIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLanguageInput struct {
	ID              *string   `json:"_id,omitempty"`
	Desc            *string   `json:"desc,omitempty"`
	Index           *string   `json:"index,omitempty"`
	Name            *string   `json:"name,omitempty"`
	Script          *string   `json:"script,omitempty"`
	Type            *string   `json:"type,omitempty"`
	TypicalSpeakers []*string `json:"typical_speakers,omitempty"`
	URL             *string   `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneLanguageOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneLanguageInput        `json:"OR,omitempty"`
	And       []*FilterFindOneLanguageInput        `json:"AND,omitempty"`
}

type FilterFindOneLanguageNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneLanguageOperatorsInput struct {
	ID              *FilterFindOneLanguageIDOperatorsInput              `json:"_id,omitempty"`
	Desc            *FilterFindOneLanguageDescOperatorsInput            `json:"desc,omitempty"`
	Index           *FilterFindOneLanguageIndexOperatorsInput           `json:"index,omitempty"`
	Name            *FilterFindOneLanguageNameOperatorsInput            `json:"name,omitempty"`
	Script          *FilterFindOneLanguageScriptOperatorsInput          `json:"script,omitempty"`
	Type            *FilterFindOneLanguageTypeOperatorsInput            `json:"type,omitempty"`
	TypicalSpeakers *FilterFindOneLanguageTypicalSpeakersOperatorsInput `json:"typical_speakers,omitempty"`
	URL             *FilterFindOneLanguageURLOperatorsInput             `json:"url,omitempty"`
}

type FilterFindOneLanguageScriptOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLanguageTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLanguageTypicalSpeakersOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLanguageURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLanguageIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLevelAbilityScoreBonusesOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLevelClassInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneLevelClassNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLevelClassOperatorsInput struct {
	Index *FilterFindOneLevelClassIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneLevelClassNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneLevelClassURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneLevelClassURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificActionSurgesOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificArcaneRecoveryLevelsOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificAuraRangeOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificBardicInspirationDieOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificBrutalCriticalDiceOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificChannelDivinityChargesOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificCreatingSpellSlotsInput struct {
	SorceryPointCost *float64 `json:"sorcery_point_cost,omitempty"`
	SpellSlotLevel   *float64 `json:"spell_slot_level,omitempty"`
	ID               *string  `json:"_id,omitempty"`
}

type FilterFindOneLevelClassSpecificDestroyUndeadCrOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificExtraAttacksOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificFavoredEnemiesOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificFavoredTerrainOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificIndomitableUsesOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificInput struct {
	ActionSurges           *float64                                                  `json:"action_surges,omitempty"`
	ArcaneRecoveryLevels   *float64                                                  `json:"arcane_recovery_levels,omitempty"`
	AuraRange              *float64                                                  `json:"aura_range,omitempty"`
	BardicInspirationDie   *float64                                                  `json:"bardic_inspiration_die,omitempty"`
	BrutalCriticalDice     *float64                                                  `json:"brutal_critical_dice,omitempty"`
	ChannelDivinityCharges *float64                                                  `json:"channel_divinity_charges,omitempty"`
	CreatingSpellSlots     []*FilterFindOneLevelClassSpecificCreatingSpellSlotsInput `json:"creating_spell_slots,omitempty"`
	DestroyUndeadCr        *float64                                                  `json:"destroy_undead_cr,omitempty"`
	ExtraAttacks           *float64                                                  `json:"extra_attacks,omitempty"`
	FavoredEnemies         *float64                                                  `json:"favored_enemies,omitempty"`
	FavoredTerrain         *float64                                                  `json:"favored_terrain,omitempty"`
	IndomitableUses        *float64                                                  `json:"indomitable_uses,omitempty"`
	InvocationsKnown       *float64                                                  `json:"invocations_known,omitempty"`
	KiPoints               *float64                                                  `json:"ki_points,omitempty"`
	MagicalSecretsMax5     *float64                                                  `json:"magical_secrets_max_5,omitempty"`
	MagicalSecretsMax7     *float64                                                  `json:"magical_secrets_max_7,omitempty"`
	MagicalSecretsMax9     *float64                                                  `json:"magical_secrets_max_9,omitempty"`
	MartialArts            *FilterFindOneLevelClassSpecificMartialArtsInput          `json:"martial_arts,omitempty"`
	MetamagicKnown         *float64                                                  `json:"metamagic_known,omitempty"`
	MysticArcanumLevel6    *float64                                                  `json:"mystic_arcanum_level_6,omitempty"`
	MysticArcanumLevel7    *float64                                                  `json:"mystic_arcanum_level_7,omitempty"`
	MysticArcanumLevel8    *float64                                                  `json:"mystic_arcanum_level_8,omitempty"`
	MysticArcanumLevel9    *float64                                                  `json:"mystic_arcanum_level_9,omitempty"`
	RageCount              *float64                                                  `json:"rage_count,omitempty"`
	RageDamageBonus        *float64                                                  `json:"rage_damage_bonus,omitempty"`
	SneakAttack            *FilterFindOneLevelClassSpecificSneakAttackInput          `json:"sneak_attack,omitempty"`
	SongOfRestDie          *float64                                                  `json:"song_of_rest_die,omitempty"`
	SorceryPoints          *float64                                                  `json:"sorcery_points,omitempty"`
	UnarmoredMovement      *float64                                                  `json:"unarmored_movement,omitempty"`
	WildShapeFly           *bool                                                     `json:"wild_shape_fly,omitempty"`
	WildShapeMaxCr         *float64                                                  `json:"wild_shape_max_cr,omitempty"`
	WildShapeSwim          *bool                                                     `json:"wild_shape_swim,omitempty"`
}

type FilterFindOneLevelClassSpecificInvocationsKnownOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificKiPointsOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificMagicalSecretsMax5OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificMagicalSecretsMax7OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificMagicalSecretsMax9OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificMartialArtsDiceCountOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificMartialArtsDiceValueOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificMartialArtsInput struct {
	DiceCount *float64 `json:"dice_count,omitempty"`
	DiceValue *float64 `json:"dice_value,omitempty"`
}

type FilterFindOneLevelClassSpecificMartialArtsOperatorsInput struct {
	DiceCount *FilterFindOneLevelClassSpecificMartialArtsDiceCountOperatorsInput `json:"dice_count,omitempty"`
	DiceValue *FilterFindOneLevelClassSpecificMartialArtsDiceValueOperatorsInput `json:"dice_value,omitempty"`
}

type FilterFindOneLevelClassSpecificMetamagicKnownOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificMysticArcanumLevel6OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificMysticArcanumLevel7OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificMysticArcanumLevel8OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificMysticArcanumLevel9OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificOperatorsInput struct {
	ActionSurges           *FilterFindOneLevelClassSpecificActionSurgesOperatorsInput           `json:"action_surges,omitempty"`
	ArcaneRecoveryLevels   *FilterFindOneLevelClassSpecificArcaneRecoveryLevelsOperatorsInput   `json:"arcane_recovery_levels,omitempty"`
	AuraRange              *FilterFindOneLevelClassSpecificAuraRangeOperatorsInput              `json:"aura_range,omitempty"`
	BardicInspirationDie   *FilterFindOneLevelClassSpecificBardicInspirationDieOperatorsInput   `json:"bardic_inspiration_die,omitempty"`
	BrutalCriticalDice     *FilterFindOneLevelClassSpecificBrutalCriticalDiceOperatorsInput     `json:"brutal_critical_dice,omitempty"`
	ChannelDivinityCharges *FilterFindOneLevelClassSpecificChannelDivinityChargesOperatorsInput `json:"channel_divinity_charges,omitempty"`
	DestroyUndeadCr        *FilterFindOneLevelClassSpecificDestroyUndeadCrOperatorsInput        `json:"destroy_undead_cr,omitempty"`
	ExtraAttacks           *FilterFindOneLevelClassSpecificExtraAttacksOperatorsInput           `json:"extra_attacks,omitempty"`
	FavoredEnemies         *FilterFindOneLevelClassSpecificFavoredEnemiesOperatorsInput         `json:"favored_enemies,omitempty"`
	FavoredTerrain         *FilterFindOneLevelClassSpecificFavoredTerrainOperatorsInput         `json:"favored_terrain,omitempty"`
	IndomitableUses        *FilterFindOneLevelClassSpecificIndomitableUsesOperatorsInput        `json:"indomitable_uses,omitempty"`
	InvocationsKnown       *FilterFindOneLevelClassSpecificInvocationsKnownOperatorsInput       `json:"invocations_known,omitempty"`
	KiPoints               *FilterFindOneLevelClassSpecificKiPointsOperatorsInput               `json:"ki_points,omitempty"`
	MagicalSecretsMax5     *FilterFindOneLevelClassSpecificMagicalSecretsMax5OperatorsInput     `json:"magical_secrets_max_5,omitempty"`
	MagicalSecretsMax7     *FilterFindOneLevelClassSpecificMagicalSecretsMax7OperatorsInput     `json:"magical_secrets_max_7,omitempty"`
	MagicalSecretsMax9     *FilterFindOneLevelClassSpecificMagicalSecretsMax9OperatorsInput     `json:"magical_secrets_max_9,omitempty"`
	MartialArts            *FilterFindOneLevelClassSpecificMartialArtsOperatorsInput            `json:"martial_arts,omitempty"`
	MetamagicKnown         *FilterFindOneLevelClassSpecificMetamagicKnownOperatorsInput         `json:"metamagic_known,omitempty"`
	MysticArcanumLevel6    *FilterFindOneLevelClassSpecificMysticArcanumLevel6OperatorsInput    `json:"mystic_arcanum_level_6,omitempty"`
	MysticArcanumLevel7    *FilterFindOneLevelClassSpecificMysticArcanumLevel7OperatorsInput    `json:"mystic_arcanum_level_7,omitempty"`
	MysticArcanumLevel8    *FilterFindOneLevelClassSpecificMysticArcanumLevel8OperatorsInput    `json:"mystic_arcanum_level_8,omitempty"`
	MysticArcanumLevel9    *FilterFindOneLevelClassSpecificMysticArcanumLevel9OperatorsInput    `json:"mystic_arcanum_level_9,omitempty"`
	RageCount              *FilterFindOneLevelClassSpecificRageCountOperatorsInput              `json:"rage_count,omitempty"`
	RageDamageBonus        *FilterFindOneLevelClassSpecificRageDamageBonusOperatorsInput        `json:"rage_damage_bonus,omitempty"`
	SneakAttack            *FilterFindOneLevelClassSpecificSneakAttackOperatorsInput            `json:"sneak_attack,omitempty"`
	SongOfRestDie          *FilterFindOneLevelClassSpecificSongOfRestDieOperatorsInput          `json:"song_of_rest_die,omitempty"`
	SorceryPoints          *FilterFindOneLevelClassSpecificSorceryPointsOperatorsInput          `json:"sorcery_points,omitempty"`
	UnarmoredMovement      *FilterFindOneLevelClassSpecificUnarmoredMovementOperatorsInput      `json:"unarmored_movement,omitempty"`
	WildShapeFly           *FilterFindOneLevelClassSpecificWildShapeFlyOperatorsInput           `json:"wild_shape_fly,omitempty"`
	WildShapeMaxCr         *FilterFindOneLevelClassSpecificWildShapeMaxCrOperatorsInput         `json:"wild_shape_max_cr,omitempty"`
	WildShapeSwim          *FilterFindOneLevelClassSpecificWildShapeSwimOperatorsInput          `json:"wild_shape_swim,omitempty"`
}

type FilterFindOneLevelClassSpecificRageCountOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificRageDamageBonusOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificSneakAttackDiceCountOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificSneakAttackDiceValueOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificSneakAttackInput struct {
	DiceCount *float64 `json:"dice_count,omitempty"`
	DiceValue *float64 `json:"dice_value,omitempty"`
}

type FilterFindOneLevelClassSpecificSneakAttackOperatorsInput struct {
	DiceCount *FilterFindOneLevelClassSpecificSneakAttackDiceCountOperatorsInput `json:"dice_count,omitempty"`
	DiceValue *FilterFindOneLevelClassSpecificSneakAttackDiceValueOperatorsInput `json:"dice_value,omitempty"`
}

type FilterFindOneLevelClassSpecificSongOfRestDieOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificSorceryPointsOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificUnarmoredMovementOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificWildShapeFlyOperatorsInput struct {
	Gt     *bool   `json:"gt,omitempty"`
	Gte    *bool   `json:"gte,omitempty"`
	Lt     *bool   `json:"lt,omitempty"`
	Lte    *bool   `json:"lte,omitempty"`
	Ne     *bool   `json:"ne,omitempty"`
	In     []*bool `json:"in,omitempty"`
	Nin    []*bool `json:"nin,omitempty"`
	Exists *bool   `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificWildShapeMaxCrOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelClassSpecificWildShapeSwimOperatorsInput struct {
	Gt     *bool   `json:"gt,omitempty"`
	Gte    *bool   `json:"gte,omitempty"`
	Lt     *bool   `json:"lt,omitempty"`
	Lte    *bool   `json:"lte,omitempty"`
	Ne     *bool   `json:"ne,omitempty"`
	In     []*bool `json:"in,omitempty"`
	Nin    []*bool `json:"nin,omitempty"`
	Exists *bool   `json:"exists,omitempty"`
}

type FilterFindOneLevelFeaturesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneLevelIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLevelInput struct {
	ID                  *string                                  `json:"_id,omitempty"`
	AbilityScoreBonuses *float64                                 `json:"ability_score_bonuses,omitempty"`
	Class               *FilterFindOneLevelClassInput            `json:"class,omitempty"`
	ClassSpecific       *FilterFindOneLevelClassSpecificInput    `json:"class_specific,omitempty"`
	Features            []*FilterFindOneLevelFeaturesInput       `json:"features,omitempty"`
	Index               *string                                  `json:"index,omitempty"`
	Level               *float64                                 `json:"level,omitempty"`
	ProfBonus           *float64                                 `json:"prof_bonus,omitempty"`
	Spellcasting        *FilterFindOneLevelSpellcastingInput     `json:"spellcasting,omitempty"`
	Subclass            *FilterFindOneLevelSubclassInput         `json:"subclass,omitempty"`
	SubclassSpecific    *FilterFindOneLevelSubclassSpecificInput `json:"subclass_specific,omitempty"`
	URL                 *string                                  `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneLevelOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneLevelInput        `json:"OR,omitempty"`
	And       []*FilterFindOneLevelInput        `json:"AND,omitempty"`
}

type FilterFindOneLevelLevelOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneLevelOperatorsInput struct {
	ID                  *FilterFindOneLevelIDOperatorsInput                  `json:"_id,omitempty"`
	AbilityScoreBonuses *FilterFindOneLevelAbilityScoreBonusesOperatorsInput `json:"ability_score_bonuses,omitempty"`
	Class               *FilterFindOneLevelClassOperatorsInput               `json:"class,omitempty"`
	ClassSpecific       *FilterFindOneLevelClassSpecificOperatorsInput       `json:"class_specific,omitempty"`
	Index               *FilterFindOneLevelIndexOperatorsInput               `json:"index,omitempty"`
	Level               *FilterFindOneLevelLevelOperatorsInput               `json:"level,omitempty"`
	ProfBonus           *FilterFindOneLevelProfBonusOperatorsInput           `json:"prof_bonus,omitempty"`
	Spellcasting        *FilterFindOneLevelSpellcastingOperatorsInput        `json:"spellcasting,omitempty"`
	Subclass            *FilterFindOneLevelSubclassOperatorsInput            `json:"subclass,omitempty"`
	SubclassSpecific    *FilterFindOneLevelSubclassSpecificOperatorsInput    `json:"subclass_specific,omitempty"`
	URL                 *FilterFindOneLevelURLOperatorsInput                 `json:"url,omitempty"`
}

type FilterFindOneLevelProfBonusOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelSpellcastingCantripsKnownOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelSpellcastingInput struct {
	CantripsKnown    *float64 `json:"cantrips_known,omitempty"`
	SpellSlotsLevel1 *float64 `json:"spell_slots_level_1,omitempty"`
	SpellSlotsLevel2 *float64 `json:"spell_slots_level_2,omitempty"`
	SpellSlotsLevel3 *float64 `json:"spell_slots_level_3,omitempty"`
	SpellSlotsLevel4 *float64 `json:"spell_slots_level_4,omitempty"`
	SpellSlotsLevel5 *float64 `json:"spell_slots_level_5,omitempty"`
	SpellSlotsLevel6 *float64 `json:"spell_slots_level_6,omitempty"`
	SpellSlotsLevel7 *float64 `json:"spell_slots_level_7,omitempty"`
	SpellSlotsLevel8 *float64 `json:"spell_slots_level_8,omitempty"`
	SpellSlotsLevel9 *float64 `json:"spell_slots_level_9,omitempty"`
	SpellsKnown      *float64 `json:"spells_known,omitempty"`
}

type FilterFindOneLevelSpellcastingOperatorsInput struct {
	CantripsKnown    *FilterFindOneLevelSpellcastingCantripsKnownOperatorsInput    `json:"cantrips_known,omitempty"`
	SpellSlotsLevel1 *FilterFindOneLevelSpellcastingSpellSlotsLevel1OperatorsInput `json:"spell_slots_level_1,omitempty"`
	SpellSlotsLevel2 *FilterFindOneLevelSpellcastingSpellSlotsLevel2OperatorsInput `json:"spell_slots_level_2,omitempty"`
	SpellSlotsLevel3 *FilterFindOneLevelSpellcastingSpellSlotsLevel3OperatorsInput `json:"spell_slots_level_3,omitempty"`
	SpellSlotsLevel4 *FilterFindOneLevelSpellcastingSpellSlotsLevel4OperatorsInput `json:"spell_slots_level_4,omitempty"`
	SpellSlotsLevel5 *FilterFindOneLevelSpellcastingSpellSlotsLevel5OperatorsInput `json:"spell_slots_level_5,omitempty"`
	SpellSlotsLevel6 *FilterFindOneLevelSpellcastingSpellSlotsLevel6OperatorsInput `json:"spell_slots_level_6,omitempty"`
	SpellSlotsLevel7 *FilterFindOneLevelSpellcastingSpellSlotsLevel7OperatorsInput `json:"spell_slots_level_7,omitempty"`
	SpellSlotsLevel8 *FilterFindOneLevelSpellcastingSpellSlotsLevel8OperatorsInput `json:"spell_slots_level_8,omitempty"`
	SpellSlotsLevel9 *FilterFindOneLevelSpellcastingSpellSlotsLevel9OperatorsInput `json:"spell_slots_level_9,omitempty"`
	SpellsKnown      *FilterFindOneLevelSpellcastingSpellsKnownOperatorsInput      `json:"spells_known,omitempty"`
}

type FilterFindOneLevelSpellcastingSpellSlotsLevel1OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelSpellcastingSpellSlotsLevel2OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelSpellcastingSpellSlotsLevel3OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelSpellcastingSpellSlotsLevel4OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelSpellcastingSpellSlotsLevel5OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelSpellcastingSpellSlotsLevel6OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelSpellcastingSpellSlotsLevel7OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelSpellcastingSpellSlotsLevel8OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelSpellcastingSpellSlotsLevel9OperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelSpellcastingSpellsKnownOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelSubclassIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLevelSubclassInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneLevelSubclassNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLevelSubclassOperatorsInput struct {
	Index *FilterFindOneLevelSubclassIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneLevelSubclassNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneLevelSubclassURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneLevelSubclassURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLevelSubclassSpecificAdditionalMagicalSecretsMaxLvlOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelSubclassSpecificAuraRangeOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneLevelSubclassSpecificInput struct {
	AdditionalMagicalSecretsMaxLvl *float64 `json:"additional_magical_secrets_max_lvl,omitempty"`
	AuraRange                      *float64 `json:"aura_range,omitempty"`
}

type FilterFindOneLevelSubclassSpecificOperatorsInput struct {
	AdditionalMagicalSecretsMaxLvl *FilterFindOneLevelSubclassSpecificAdditionalMagicalSecretsMaxLvlOperatorsInput `json:"additional_magical_secrets_max_lvl,omitempty"`
	AuraRange                      *FilterFindOneLevelSubclassSpecificAuraRangeOperatorsInput                      `json:"aura_range,omitempty"`
}

type FilterFindOneLevelURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneLevelIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMagicItemDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMagicItemEquipmentCategoryIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMagicItemEquipmentCategoryInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneMagicItemEquipmentCategoryNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMagicItemEquipmentCategoryOperatorsInput struct {
	Index *FilterFindOneMagicItemEquipmentCategoryIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneMagicItemEquipmentCategoryNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneMagicItemEquipmentCategoryURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneMagicItemEquipmentCategoryURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMagicItemIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMagicItemInput struct {
	ID                *string                                       `json:"_id,omitempty"`
	Desc              []*string                                     `json:"desc,omitempty"`
	EquipmentCategory *FilterFindOneMagicItemEquipmentCategoryInput `json:"equipment_category,omitempty"`
	Index             *string                                       `json:"index,omitempty"`
	Name              *string                                       `json:"name,omitempty"`
	URL               *string                                       `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneMagicItemOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneMagicItemInput        `json:"OR,omitempty"`
	And       []*FilterFindOneMagicItemInput        `json:"AND,omitempty"`
}

type FilterFindOneMagicItemNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneMagicItemOperatorsInput struct {
	ID                *FilterFindOneMagicItemIDOperatorsInput                `json:"_id,omitempty"`
	Desc              *FilterFindOneMagicItemDescOperatorsInput              `json:"desc,omitempty"`
	EquipmentCategory *FilterFindOneMagicItemEquipmentCategoryOperatorsInput `json:"equipment_category,omitempty"`
	Index             *FilterFindOneMagicItemIndexOperatorsInput             `json:"index,omitempty"`
	Name              *FilterFindOneMagicItemNameOperatorsInput              `json:"name,omitempty"`
	URL               *FilterFindOneMagicItemURLOperatorsInput               `json:"url,omitempty"`
}

type FilterFindOneMagicItemURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMagicItemIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMagicSchoolDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMagicSchoolIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMagicSchoolInput struct {
	ID    *string `json:"_id,omitempty"`
	Desc  *string `json:"desc,omitempty"`
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneMagicSchoolOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneMagicSchoolInput        `json:"OR,omitempty"`
	And       []*FilterFindOneMagicSchoolInput        `json:"AND,omitempty"`
}

type FilterFindOneMagicSchoolNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneMagicSchoolOperatorsInput struct {
	ID    *FilterFindOneMagicSchoolIDOperatorsInput    `json:"_id,omitempty"`
	Desc  *FilterFindOneMagicSchoolDescOperatorsInput  `json:"desc,omitempty"`
	Index *FilterFindOneMagicSchoolIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneMagicSchoolNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneMagicSchoolURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneMagicSchoolURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMagicSchoolIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterActionsDamageDamageTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneMonsterActionsDamageInput struct {
	DamageDice *string                                           `json:"damage_dice,omitempty"`
	DamageType *FilterFindOneMonsterActionsDamageDamageTypeInput `json:"damage_type,omitempty"`
	ID         *string                                           `json:"_id,omitempty"`
}

type FilterFindOneMonsterActionsInput struct {
	AttackBonus *float64                                  `json:"attack_bonus,omitempty"`
	Damage      []*FilterFindOneMonsterActionsDamageInput `json:"damage,omitempty"`
	Desc        *string                                   `json:"desc,omitempty"`
	Name        *string                                   `json:"name,omitempty"`
	ID          *string                                   `json:"_id,omitempty"`
}

type FilterFindOneMonsterAlignmentOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterArmorClassOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneMonsterChallengeRatingOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneMonsterCharismaOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneMonsterConditionImmunitiesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneMonsterConstitutionOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneMonsterDexterityOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneMonsterFormsInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneMonsterHitDiceOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterHitPointsOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneMonsterIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterInput struct {
	ID                    *string                                         `json:"_id,omitempty"`
	Actions               []*FilterFindOneMonsterActionsInput             `json:"actions,omitempty"`
	Alignment             *string                                         `json:"alignment,omitempty"`
	ArmorClass            *float64                                        `json:"armor_class,omitempty"`
	ChallengeRating       *float64                                        `json:"challenge_rating,omitempty"`
	Charisma              *float64                                        `json:"charisma,omitempty"`
	ConditionImmunities   []*FilterFindOneMonsterConditionImmunitiesInput `json:"condition_immunities,omitempty"`
	Constitution          *float64                                        `json:"constitution,omitempty"`
	DamageImmunities      []*string                                       `json:"damage_immunities,omitempty"`
	DamageResistances     []*string                                       `json:"damage_resistances,omitempty"`
	DamageVulnerabilities []*string                                       `json:"damage_vulnerabilities,omitempty"`
	Dexterity             *float64                                        `json:"dexterity,omitempty"`
	Forms                 []*FilterFindOneMonsterFormsInput               `json:"forms,omitempty"`
	HitDice               *string                                         `json:"hit_dice,omitempty"`
	HitPoints             *float64                                        `json:"hit_points,omitempty"`
	Index                 *string                                         `json:"index,omitempty"`
	Intelligence          *float64                                        `json:"intelligence,omitempty"`
	Languages             *string                                         `json:"languages,omitempty"`
	LegendaryActions      []*FilterFindOneMonsterLegendaryActionsInput    `json:"legendary_actions,omitempty"`
	Name                  *string                                         `json:"name,omitempty"`
	Proficiencies         []*FilterFindOneMonsterProficienciesInput       `json:"proficiencies,omitempty"`
	Reactions             []*FilterFindOneMonsterReactionsInput           `json:"reactions,omitempty"`
	Senses                *FilterFindOneMonsterSensesInput                `json:"senses,omitempty"`
	Size                  *string                                         `json:"size,omitempty"`
	SpecialAbilities      []*FilterFindOneMonsterSpecialAbilitiesInput    `json:"special_abilities,omitempty"`
	Speed                 *FilterFindOneMonsterSpeedInput                 `json:"speed,omitempty"`
	Strength              *float64                                        `json:"strength,omitempty"`
	Subtype               *string                                         `json:"subtype,omitempty"`
	Type                  *string                                         `json:"type,omitempty"`
	URL                   *string                                         `json:"url,omitempty"`
	Wisdom                *float64                                        `json:"wisdom,omitempty"`
	Xp                    *float64                                        `json:"xp,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneMonsterOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneMonsterInput        `json:"OR,omitempty"`
	And       []*FilterFindOneMonsterInput        `json:"AND,omitempty"`
}

type FilterFindOneMonsterIntelligenceOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneMonsterLanguagesOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterLegendaryActionsInput struct {
	AttackBonus *float64 `json:"attack_bonus,omitempty"`
	Desc        *string  `json:"desc,omitempty"`
	Name        *string  `json:"name,omitempty"`
	ID          *string  `json:"_id,omitempty"`
}

type FilterFindOneMonsterNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneMonsterOperatorsInput struct {
	ID              *FilterFindOneMonsterIDOperatorsInput              `json:"_id,omitempty"`
	Alignment       *FilterFindOneMonsterAlignmentOperatorsInput       `json:"alignment,omitempty"`
	ArmorClass      *FilterFindOneMonsterArmorClassOperatorsInput      `json:"armor_class,omitempty"`
	ChallengeRating *FilterFindOneMonsterChallengeRatingOperatorsInput `json:"challenge_rating,omitempty"`
	Charisma        *FilterFindOneMonsterCharismaOperatorsInput        `json:"charisma,omitempty"`
	Constitution    *FilterFindOneMonsterConstitutionOperatorsInput    `json:"constitution,omitempty"`
	Dexterity       *FilterFindOneMonsterDexterityOperatorsInput       `json:"dexterity,omitempty"`
	HitDice         *FilterFindOneMonsterHitDiceOperatorsInput         `json:"hit_dice,omitempty"`
	HitPoints       *FilterFindOneMonsterHitPointsOperatorsInput       `json:"hit_points,omitempty"`
	Index           *FilterFindOneMonsterIndexOperatorsInput           `json:"index,omitempty"`
	Intelligence    *FilterFindOneMonsterIntelligenceOperatorsInput    `json:"intelligence,omitempty"`
	Languages       *FilterFindOneMonsterLanguagesOperatorsInput       `json:"languages,omitempty"`
	Name            *FilterFindOneMonsterNameOperatorsInput            `json:"name,omitempty"`
	Senses          *FilterFindOneMonsterSensesOperatorsInput          `json:"senses,omitempty"`
	Size            *FilterFindOneMonsterSizeOperatorsInput            `json:"size,omitempty"`
	Speed           *FilterFindOneMonsterSpeedOperatorsInput           `json:"speed,omitempty"`
	Strength        *FilterFindOneMonsterStrengthOperatorsInput        `json:"strength,omitempty"`
	Subtype         *FilterFindOneMonsterSubtypeOperatorsInput         `json:"subtype,omitempty"`
	Type            *FilterFindOneMonsterTypeOperatorsInput            `json:"type,omitempty"`
	URL             *FilterFindOneMonsterURLOperatorsInput             `json:"url,omitempty"`
	Wisdom          *FilterFindOneMonsterWisdomOperatorsInput          `json:"wisdom,omitempty"`
	Xp              *FilterFindOneMonsterXpOperatorsInput              `json:"xp,omitempty"`
}

type FilterFindOneMonsterProficienciesInput struct {
	Proficiency *FilterFindOneMonsterProficienciesProficiencyInput `json:"proficiency,omitempty"`
	Value       *float64                                           `json:"value,omitempty"`
	ID          *string                                            `json:"_id,omitempty"`
}

type FilterFindOneMonsterProficienciesProficiencyInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneMonsterReactionsInput struct {
	Desc *string `json:"desc,omitempty"`
	Name *string `json:"name,omitempty"`
	ID   *string `json:"_id,omitempty"`
}

type FilterFindOneMonsterSensesBlindsightOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterSensesDarkvisionOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterSensesInput struct {
	Blindsight        *string  `json:"blindsight,omitempty"`
	Darkvision        *string  `json:"darkvision,omitempty"`
	PassivePerception *float64 `json:"passive_perception,omitempty"`
	Tremorsense       *string  `json:"tremorsense,omitempty"`
	Truesight         *string  `json:"truesight,omitempty"`
}

type FilterFindOneMonsterSensesOperatorsInput struct {
	Blindsight        *FilterFindOneMonsterSensesBlindsightOperatorsInput        `json:"blindsight,omitempty"`
	Darkvision        *FilterFindOneMonsterSensesDarkvisionOperatorsInput        `json:"darkvision,omitempty"`
	PassivePerception *FilterFindOneMonsterSensesPassivePerceptionOperatorsInput `json:"passive_perception,omitempty"`
	Tremorsense       *FilterFindOneMonsterSensesTremorsenseOperatorsInput       `json:"tremorsense,omitempty"`
	Truesight         *FilterFindOneMonsterSensesTruesightOperatorsInput         `json:"truesight,omitempty"`
}

type FilterFindOneMonsterSensesPassivePerceptionOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneMonsterSensesTremorsenseOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterSensesTruesightOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterSizeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterSpecialAbilitiesInput struct {
	Desc *string `json:"desc,omitempty"`
	Name *string `json:"name,omitempty"`
	ID   *string `json:"_id,omitempty"`
}

type FilterFindOneMonsterSpeedBurrowOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterSpeedClimbOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterSpeedFlyOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterSpeedHoverOperatorsInput struct {
	Gt     *bool   `json:"gt,omitempty"`
	Gte    *bool   `json:"gte,omitempty"`
	Lt     *bool   `json:"lt,omitempty"`
	Lte    *bool   `json:"lte,omitempty"`
	Ne     *bool   `json:"ne,omitempty"`
	In     []*bool `json:"in,omitempty"`
	Nin    []*bool `json:"nin,omitempty"`
	Exists *bool   `json:"exists,omitempty"`
}

type FilterFindOneMonsterSpeedInput struct {
	Burrow *string `json:"burrow,omitempty"`
	Climb  *string `json:"climb,omitempty"`
	Fly    *string `json:"fly,omitempty"`
	Hover  *bool   `json:"hover,omitempty"`
	Swim   *string `json:"swim,omitempty"`
	Walk   *string `json:"walk,omitempty"`
}

type FilterFindOneMonsterSpeedOperatorsInput struct {
	Burrow *FilterFindOneMonsterSpeedBurrowOperatorsInput `json:"burrow,omitempty"`
	Climb  *FilterFindOneMonsterSpeedClimbOperatorsInput  `json:"climb,omitempty"`
	Fly    *FilterFindOneMonsterSpeedFlyOperatorsInput    `json:"fly,omitempty"`
	Hover  *FilterFindOneMonsterSpeedHoverOperatorsInput  `json:"hover,omitempty"`
	Swim   *FilterFindOneMonsterSpeedSwimOperatorsInput   `json:"swim,omitempty"`
	Walk   *FilterFindOneMonsterSpeedWalkOperatorsInput   `json:"walk,omitempty"`
}

type FilterFindOneMonsterSpeedSwimOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterSpeedWalkOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterStrengthOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneMonsterSubtypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneMonsterWisdomOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneMonsterXpOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneMonsterIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneProficiencyClassesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneProficiencyIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneProficiencyInput struct {
	ID         *string                                    `json:"_id,omitempty"`
	Classes    []*FilterFindOneProficiencyClassesInput    `json:"classes,omitempty"`
	Index      *string                                    `json:"index,omitempty"`
	Name       *string                                    `json:"name,omitempty"`
	Races      []*FilterFindOneProficiencyRacesInput      `json:"races,omitempty"`
	References []*FilterFindOneProficiencyReferencesInput `json:"references,omitempty"`
	Type       *string                                    `json:"type,omitempty"`
	URL        *string                                    `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneProficiencyOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneProficiencyInput        `json:"OR,omitempty"`
	And       []*FilterFindOneProficiencyInput        `json:"AND,omitempty"`
}

type FilterFindOneProficiencyNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneProficiencyOperatorsInput struct {
	ID    *FilterFindOneProficiencyIDOperatorsInput    `json:"_id,omitempty"`
	Index *FilterFindOneProficiencyIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneProficiencyNameOperatorsInput  `json:"name,omitempty"`
	Type  *FilterFindOneProficiencyTypeOperatorsInput  `json:"type,omitempty"`
	URL   *FilterFindOneProficiencyURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneProficiencyRacesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneProficiencyReferencesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	Type  *string `json:"type,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneProficiencyTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneProficiencyURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneProficiencyIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRaceAbilityBonusOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneRaceAbilityBonusOptionsFromAbilityScoreInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneRaceAbilityBonusOptionsFromInput struct {
	AbilityScore *FilterFindOneRaceAbilityBonusOptionsFromAbilityScoreInput `json:"ability_score,omitempty"`
	Bonus        *float64                                                   `json:"bonus,omitempty"`
	ID           *string                                                    `json:"_id,omitempty"`
}

type FilterFindOneRaceAbilityBonusOptionsInput struct {
	Choose *float64                                         `json:"choose,omitempty"`
	From   []*FilterFindOneRaceAbilityBonusOptionsFromInput `json:"from,omitempty"`
	Type   *string                                          `json:"type,omitempty"`
}

type FilterFindOneRaceAbilityBonusOptionsOperatorsInput struct {
	Choose *FilterFindOneRaceAbilityBonusOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindOneRaceAbilityBonusOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneRaceAbilityBonusOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRaceAbilityBonusesAbilityScoreInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneRaceAbilityBonusesInput struct {
	AbilityScore *FilterFindOneRaceAbilityBonusesAbilityScoreInput `json:"ability_score,omitempty"`
	Bonus        *float64                                          `json:"bonus,omitempty"`
	ID           *string                                           `json:"_id,omitempty"`
}

type FilterFindOneRaceAgeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRaceAlignmentOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRaceIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRaceInput struct {
	ID                         *string                                           `json:"_id,omitempty"`
	AbilityBonusOptions        *FilterFindOneRaceAbilityBonusOptionsInput        `json:"ability_bonus_options,omitempty"`
	AbilityBonuses             []*FilterFindOneRaceAbilityBonusesInput           `json:"ability_bonuses,omitempty"`
	Age                        *string                                           `json:"age,omitempty"`
	Alignment                  *string                                           `json:"alignment,omitempty"`
	Index                      *string                                           `json:"index,omitempty"`
	LanguageDesc               *string                                           `json:"language_desc,omitempty"`
	LanguageOptions            *FilterFindOneRaceLanguageOptionsInput            `json:"language_options,omitempty"`
	Languages                  []*FilterFindOneRaceLanguagesInput                `json:"languages,omitempty"`
	Name                       *string                                           `json:"name,omitempty"`
	Size                       *string                                           `json:"size,omitempty"`
	SizeDescription            *string                                           `json:"size_description,omitempty"`
	Speed                      *float64                                          `json:"speed,omitempty"`
	StartingProficiencies      []*FilterFindOneRaceStartingProficienciesInput    `json:"starting_proficiencies,omitempty"`
	StartingProficiencyOptions *FilterFindOneRaceStartingProficiencyOptionsInput `json:"starting_proficiency_options,omitempty"`
	Subraces                   []*FilterFindOneRaceSubracesInput                 `json:"subraces,omitempty"`
	Traits                     []*FilterFindOneRaceTraitsInput                   `json:"traits,omitempty"`
	URL                        *string                                           `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneRaceOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneRaceInput        `json:"OR,omitempty"`
	And       []*FilterFindOneRaceInput        `json:"AND,omitempty"`
}

type FilterFindOneRaceLanguageDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRaceLanguageOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneRaceLanguageOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneRaceLanguageOptionsInput struct {
	Choose *float64                                     `json:"choose,omitempty"`
	From   []*FilterFindOneRaceLanguageOptionsFromInput `json:"from,omitempty"`
	Type   *string                                      `json:"type,omitempty"`
}

type FilterFindOneRaceLanguageOptionsOperatorsInput struct {
	Choose *FilterFindOneRaceLanguageOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindOneRaceLanguageOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneRaceLanguageOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRaceLanguagesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneRaceNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneRaceOperatorsInput struct {
	ID                         *FilterFindOneRaceIDOperatorsInput                         `json:"_id,omitempty"`
	AbilityBonusOptions        *FilterFindOneRaceAbilityBonusOptionsOperatorsInput        `json:"ability_bonus_options,omitempty"`
	Age                        *FilterFindOneRaceAgeOperatorsInput                        `json:"age,omitempty"`
	Alignment                  *FilterFindOneRaceAlignmentOperatorsInput                  `json:"alignment,omitempty"`
	Index                      *FilterFindOneRaceIndexOperatorsInput                      `json:"index,omitempty"`
	LanguageDesc               *FilterFindOneRaceLanguageDescOperatorsInput               `json:"language_desc,omitempty"`
	LanguageOptions            *FilterFindOneRaceLanguageOptionsOperatorsInput            `json:"language_options,omitempty"`
	Name                       *FilterFindOneRaceNameOperatorsInput                       `json:"name,omitempty"`
	Size                       *FilterFindOneRaceSizeOperatorsInput                       `json:"size,omitempty"`
	SizeDescription            *FilterFindOneRaceSizeDescriptionOperatorsInput            `json:"size_description,omitempty"`
	Speed                      *FilterFindOneRaceSpeedOperatorsInput                      `json:"speed,omitempty"`
	StartingProficiencyOptions *FilterFindOneRaceStartingProficiencyOptionsOperatorsInput `json:"starting_proficiency_options,omitempty"`
	URL                        *FilterFindOneRaceURLOperatorsInput                        `json:"url,omitempty"`
}

type FilterFindOneRaceSizeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRaceSizeDescriptionOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRaceSpeedOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneRaceStartingProficienciesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneRaceStartingProficiencyOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneRaceStartingProficiencyOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneRaceStartingProficiencyOptionsInput struct {
	Choose *float64                                                `json:"choose,omitempty"`
	From   []*FilterFindOneRaceStartingProficiencyOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                 `json:"type,omitempty"`
}

type FilterFindOneRaceStartingProficiencyOptionsOperatorsInput struct {
	Choose *FilterFindOneRaceStartingProficiencyOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindOneRaceStartingProficiencyOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneRaceStartingProficiencyOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRaceSubracesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneRaceTraitsInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneRaceURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRaceIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRuleDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRuleIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRuleInput struct {
	ID          *string                              `json:"_id,omitempty"`
	Desc        *string                              `json:"desc,omitempty"`
	Index       *string                              `json:"index,omitempty"`
	Name        *string                              `json:"name,omitempty"`
	Subsections []*FilterFindOneRuleSubsectionsInput `json:"subsections,omitempty"`
	URL         *string                              `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneRuleOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneRuleInput        `json:"OR,omitempty"`
	And       []*FilterFindOneRuleInput        `json:"AND,omitempty"`
}

type FilterFindOneRuleNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneRuleOperatorsInput struct {
	ID    *FilterFindOneRuleIDOperatorsInput    `json:"_id,omitempty"`
	Desc  *FilterFindOneRuleDescOperatorsInput  `json:"desc,omitempty"`
	Index *FilterFindOneRuleIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneRuleNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneRuleURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneRuleSectionDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRuleSectionIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRuleSectionInput struct {
	ID    *string `json:"_id,omitempty"`
	Desc  *string `json:"desc,omitempty"`
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneRuleSectionOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneRuleSectionInput        `json:"OR,omitempty"`
	And       []*FilterFindOneRuleSectionInput        `json:"AND,omitempty"`
}

type FilterFindOneRuleSectionNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneRuleSectionOperatorsInput struct {
	ID    *FilterFindOneRuleSectionIDOperatorsInput    `json:"_id,omitempty"`
	Desc  *FilterFindOneRuleSectionDescOperatorsInput  `json:"desc,omitempty"`
	Index *FilterFindOneRuleSectionIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneRuleSectionNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneRuleSectionURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneRuleSectionURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRuleSectionIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRuleSubsectionsInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneRuleURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneRuleIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSkillAbilityScoreIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSkillAbilityScoreInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneSkillAbilityScoreNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSkillAbilityScoreOperatorsInput struct {
	Index *FilterFindOneSkillAbilityScoreIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneSkillAbilityScoreNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneSkillAbilityScoreURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneSkillAbilityScoreURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSkillDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSkillIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSkillInput struct {
	ID           *string                              `json:"_id,omitempty"`
	AbilityScore *FilterFindOneSkillAbilityScoreInput `json:"ability_score,omitempty"`
	Desc         []*string                            `json:"desc,omitempty"`
	Index        *string                              `json:"index,omitempty"`
	Name         *string                              `json:"name,omitempty"`
	URL          *string                              `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneSkillOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneSkillInput        `json:"OR,omitempty"`
	And       []*FilterFindOneSkillInput        `json:"AND,omitempty"`
}

type FilterFindOneSkillNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneSkillOperatorsInput struct {
	ID           *FilterFindOneSkillIDOperatorsInput           `json:"_id,omitempty"`
	AbilityScore *FilterFindOneSkillAbilityScoreOperatorsInput `json:"ability_score,omitempty"`
	Desc         *FilterFindOneSkillDescOperatorsInput         `json:"desc,omitempty"`
	Index        *FilterFindOneSkillIndexOperatorsInput        `json:"index,omitempty"`
	Name         *FilterFindOneSkillNameOperatorsInput         `json:"name,omitempty"`
	URL          *FilterFindOneSkillURLOperatorsInput          `json:"url,omitempty"`
}

type FilterFindOneSkillURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSkillIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSpellAreaOfEffectInput struct {
	Size *float64 `json:"size,omitempty"`
	Type *string  `json:"type,omitempty"`
}

type FilterFindOneSpellClassesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneSpellDamageDamageTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneSpellDamageInput struct {
	DamageAtSlotLevel      *string                                  `json:"damage_at_slot_level,omitempty"`
	DamageAtCharacterLevel *string                                  `json:"damage_at_character_level,omitempty"`
	DamageType             *FilterFindOneSpellDamageDamageTypeInput `json:"damage_type,omitempty"`
}

type FilterFindOneSpellDcDcTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneSpellDcInput struct {
	DcSuccess *string                          `json:"dc_success,omitempty"`
	DcType    *FilterFindOneSpellDcDcTypeInput `json:"dc_type,omitempty"`
	Desc      *string                          `json:"desc,omitempty"`
}

type FilterFindOneSpellInput struct {
	ID              *string                              `json:"_id,omitempty"`
	AreaOfEffect    *FilterFindOneSpellAreaOfEffectInput `json:"area_of_effect,omitempty"`
	AttackType      *string                              `json:"attack_type,omitempty"`
	CastingTime     *string                              `json:"casting_time,omitempty"`
	Classes         []*FilterFindOneSpellClassesInput    `json:"classes,omitempty"`
	Components      []*string                            `json:"components,omitempty"`
	Concentration   *bool                                `json:"concentration,omitempty"`
	Damage          *FilterFindOneSpellDamageInput       `json:"damage,omitempty"`
	Dc              *FilterFindOneSpellDcInput           `json:"dc,omitempty"`
	Desc            []*string                            `json:"desc,omitempty"`
	Duration        *string                              `json:"duration,omitempty"`
	HealAtSlotLevel *string                              `json:"heal_at_slot_level,omitempty"`
	HigherLevel     []*string                            `json:"higher_level,omitempty"`
	Index           *string                              `json:"index,omitempty"`
	Level           *float64                             `json:"level,omitempty"`
	Material        *string                              `json:"material,omitempty"`
	Name            *string                              `json:"name,omitempty"`
	Range           *string                              `json:"range,omitempty"`
	Ritual          *bool                                `json:"ritual,omitempty"`
	School          *FilterFindOneSpellSchoolInput       `json:"school,omitempty"`
	Subclasses      []*FilterFindOneSpellSubclassesInput `json:"subclasses,omitempty"`
	URL             *string                              `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneSpellOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneSpellInput        `json:"OR,omitempty"`
	And       []*FilterFindOneSpellInput        `json:"AND,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneSpellOperatorsInput struct {
	ID     *FilterFindOneSpellIDOperatorsInput     `json:"_id,omitempty"`
	School *FilterFindOneSpellSchoolOperatorsInput `json:"school,omitempty"`
}

type FilterFindOneSpellSchoolIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSpellSchoolInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneSpellSchoolNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSpellSchoolOperatorsInput struct {
	Index *FilterFindOneSpellSchoolIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneSpellSchoolNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneSpellSchoolURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneSpellSchoolURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSpellSubclassesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneSpellIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubclassClassIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubclassClassInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneSubclassClassNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubclassClassOperatorsInput struct {
	Index *FilterFindOneSubclassClassIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneSubclassClassNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneSubclassClassURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneSubclassClassURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubclassDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubclassIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubclassInput struct {
	ID             *string                             `json:"_id,omitempty"`
	Class          *FilterFindOneSubclassClassInput    `json:"class,omitempty"`
	Desc           []*string                           `json:"desc,omitempty"`
	Index          *string                             `json:"index,omitempty"`
	Name           *string                             `json:"name,omitempty"`
	Spells         []*FilterFindOneSubclassSpellsInput `json:"spells,omitempty"`
	SubclassFlavor *string                             `json:"subclass_flavor,omitempty"`
	SubclassLevels *string                             `json:"subclass_levels,omitempty"`
	URL            *string                             `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneSubclassOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneSubclassInput        `json:"OR,omitempty"`
	And       []*FilterFindOneSubclassInput        `json:"AND,omitempty"`
}

type FilterFindOneSubclassNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneSubclassOperatorsInput struct {
	ID             *FilterFindOneSubclassIDOperatorsInput             `json:"_id,omitempty"`
	Class          *FilterFindOneSubclassClassOperatorsInput          `json:"class,omitempty"`
	Desc           *FilterFindOneSubclassDescOperatorsInput           `json:"desc,omitempty"`
	Index          *FilterFindOneSubclassIndexOperatorsInput          `json:"index,omitempty"`
	Name           *FilterFindOneSubclassNameOperatorsInput           `json:"name,omitempty"`
	SubclassFlavor *FilterFindOneSubclassSubclassFlavorOperatorsInput `json:"subclass_flavor,omitempty"`
	SubclassLevels *FilterFindOneSubclassSubclassLevelsOperatorsInput `json:"subclass_levels,omitempty"`
	URL            *FilterFindOneSubclassURLOperatorsInput            `json:"url,omitempty"`
}

type FilterFindOneSubclassSpellsInput struct {
	Prerequisites []*FilterFindOneSubclassSpellsPrerequisitesInput `json:"prerequisites,omitempty"`
	Spell         *FilterFindOneSubclassSpellsSpellInput           `json:"spell,omitempty"`
	ID            *string                                          `json:"_id,omitempty"`
}

type FilterFindOneSubclassSpellsPrerequisitesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	Type  *string `json:"type,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneSubclassSpellsSpellInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneSubclassSubclassFlavorOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubclassSubclassLevelsOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubclassURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubclassIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubraceAbilityBonusesAbilityScoreInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneSubraceAbilityBonusesInput struct {
	AbilityScore *FilterFindOneSubraceAbilityBonusesAbilityScoreInput `json:"ability_score,omitempty"`
	Bonus        *float64                                             `json:"bonus,omitempty"`
	ID           *string                                              `json:"_id,omitempty"`
}

type FilterFindOneSubraceDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubraceIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubraceInput struct {
	ID                    *string                                           `json:"_id,omitempty"`
	AbilityBonuses        []*FilterFindOneSubraceAbilityBonusesInput        `json:"ability_bonuses,omitempty"`
	Desc                  *string                                           `json:"desc,omitempty"`
	Index                 *string                                           `json:"index,omitempty"`
	LanguageOptions       *FilterFindOneSubraceLanguageOptionsInput         `json:"language_options,omitempty"`
	Name                  *string                                           `json:"name,omitempty"`
	Race                  *FilterFindOneSubraceRaceInput                    `json:"race,omitempty"`
	RacialTraits          []*FilterFindOneSubraceRacialTraitsInput          `json:"racial_traits,omitempty"`
	StartingProficiencies []*FilterFindOneSubraceStartingProficienciesInput `json:"starting_proficiencies,omitempty"`
	URL                   *string                                           `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneSubraceOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneSubraceInput        `json:"OR,omitempty"`
	And       []*FilterFindOneSubraceInput        `json:"AND,omitempty"`
}

type FilterFindOneSubraceLanguageOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneSubraceLanguageOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneSubraceLanguageOptionsInput struct {
	Choose *float64                                        `json:"choose,omitempty"`
	From   []*FilterFindOneSubraceLanguageOptionsFromInput `json:"from,omitempty"`
	Type   *string                                         `json:"type,omitempty"`
}

type FilterFindOneSubraceLanguageOptionsOperatorsInput struct {
	Choose *FilterFindOneSubraceLanguageOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindOneSubraceLanguageOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneSubraceLanguageOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubraceNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneSubraceOperatorsInput struct {
	ID              *FilterFindOneSubraceIDOperatorsInput              `json:"_id,omitempty"`
	Desc            *FilterFindOneSubraceDescOperatorsInput            `json:"desc,omitempty"`
	Index           *FilterFindOneSubraceIndexOperatorsInput           `json:"index,omitempty"`
	LanguageOptions *FilterFindOneSubraceLanguageOptionsOperatorsInput `json:"language_options,omitempty"`
	Name            *FilterFindOneSubraceNameOperatorsInput            `json:"name,omitempty"`
	Race            *FilterFindOneSubraceRaceOperatorsInput            `json:"race,omitempty"`
	URL             *FilterFindOneSubraceURLOperatorsInput             `json:"url,omitempty"`
}

type FilterFindOneSubraceRaceIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubraceRaceInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneSubraceRaceNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubraceRaceOperatorsInput struct {
	Index *FilterFindOneSubraceRaceIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneSubraceRaceNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneSubraceRaceURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneSubraceRaceURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubraceRacialTraitsInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneSubraceStartingProficienciesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneSubraceURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneSubraceIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitInput struct {
	ID                 *string                                    `json:"_id,omitempty"`
	Desc               []*string                                  `json:"desc,omitempty"`
	Index              *string                                    `json:"index,omitempty"`
	Name               *string                                    `json:"name,omitempty"`
	Proficiencies      []*FilterFindOneTraitProficienciesInput    `json:"proficiencies,omitempty"`
	ProficiencyChoices *FilterFindOneTraitProficiencyChoicesInput `json:"proficiency_choices,omitempty"`
	Races              []*FilterFindOneTraitRacesInput            `json:"races,omitempty"`
	Subraces           []*FilterFindOneTraitSubracesInput         `json:"subraces,omitempty"`
	Parent             *FilterFindOneTraitParentInput             `json:"parent,omitempty"`
	TraitSpecific      *FilterFindOneTraitTraitSpecificInput      `json:"trait_specific,omitempty"`
	URL                *string                                    `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneTraitOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneTraitInput        `json:"OR,omitempty"`
	And       []*FilterFindOneTraitInput        `json:"AND,omitempty"`
}

type FilterFindOneTraitNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneTraitOperatorsInput struct {
	ID                 *FilterFindOneTraitIDOperatorsInput                 `json:"_id,omitempty"`
	Desc               *FilterFindOneTraitDescOperatorsInput               `json:"desc,omitempty"`
	Index              *FilterFindOneTraitIndexOperatorsInput              `json:"index,omitempty"`
	Name               *FilterFindOneTraitNameOperatorsInput               `json:"name,omitempty"`
	ProficiencyChoices *FilterFindOneTraitProficiencyChoicesOperatorsInput `json:"proficiency_choices,omitempty"`
	Parent             *FilterFindOneTraitParentOperatorsInput             `json:"parent,omitempty"`
	TraitSpecific      *FilterFindOneTraitTraitSpecificOperatorsInput      `json:"trait_specific,omitempty"`
	URL                *FilterFindOneTraitURLOperatorsInput                `json:"url,omitempty"`
}

type FilterFindOneTraitParentIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitParentInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneTraitParentNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitParentOperatorsInput struct {
	Index *FilterFindOneTraitParentIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneTraitParentNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneTraitParentURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneTraitParentURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitProficienciesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneTraitProficiencyChoicesChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneTraitProficiencyChoicesFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneTraitProficiencyChoicesInput struct {
	Choose *float64                                         `json:"choose,omitempty"`
	From   []*FilterFindOneTraitProficiencyChoicesFromInput `json:"from,omitempty"`
	Type   *string                                          `json:"type,omitempty"`
}

type FilterFindOneTraitProficiencyChoicesOperatorsInput struct {
	Choose *FilterFindOneTraitProficiencyChoicesChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindOneTraitProficiencyChoicesTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneTraitProficiencyChoicesTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitRacesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneTraitSubracesInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponDamageDamageTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponDamageInput struct {
	DamageType             *FilterFindOneTraitTraitSpecificBreathWeaponDamageDamageTypeInput `json:"damage_type,omitempty"`
	DamageAtCharacterLevel *string                                                           `json:"damage_at_character_level,omitempty"`
	ID                     *string                                                           `json:"_id,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponDcDcTypeIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponDcDcTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponDcDcTypeNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponDcDcTypeOperatorsInput struct {
	Index *FilterFindOneTraitTraitSpecificBreathWeaponDcDcTypeIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneTraitTraitSpecificBreathWeaponDcDcTypeNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneTraitTraitSpecificBreathWeaponDcDcTypeURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponDcDcTypeURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponDcInput struct {
	DcType      *FilterFindOneTraitTraitSpecificBreathWeaponDcDcTypeInput `json:"dc_type,omitempty"`
	SuccessType *string                                                   `json:"success_type,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponDcOperatorsInput struct {
	DcType      *FilterFindOneTraitTraitSpecificBreathWeaponDcDcTypeOperatorsInput      `json:"dc_type,omitempty"`
	SuccessType *FilterFindOneTraitTraitSpecificBreathWeaponDcSuccessTypeOperatorsInput `json:"success_type,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponDcSuccessTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponInput struct {
	Name   *string                                                   `json:"name,omitempty"`
	Desc   *string                                                   `json:"desc,omitempty"`
	Usage  *FilterFindOneTraitTraitSpecificBreathWeaponUsageInput    `json:"usage,omitempty"`
	Dc     *FilterFindOneTraitTraitSpecificBreathWeaponDcInput       `json:"dc,omitempty"`
	Damage []*FilterFindOneTraitTraitSpecificBreathWeaponDamageInput `json:"damage,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponOperatorsInput struct {
	Name  *FilterFindOneTraitTraitSpecificBreathWeaponNameOperatorsInput  `json:"name,omitempty"`
	Desc  *FilterFindOneTraitTraitSpecificBreathWeaponDescOperatorsInput  `json:"desc,omitempty"`
	Usage *FilterFindOneTraitTraitSpecificBreathWeaponUsageOperatorsInput `json:"usage,omitempty"`
	Dc    *FilterFindOneTraitTraitSpecificBreathWeaponDcOperatorsInput    `json:"dc,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponUsageInput struct {
	Type  *string  `json:"type,omitempty"`
	Times *float64 `json:"times,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponUsageOperatorsInput struct {
	Type  *FilterFindOneTraitTraitSpecificBreathWeaponUsageTypeOperatorsInput  `json:"type,omitempty"`
	Times *FilterFindOneTraitTraitSpecificBreathWeaponUsageTimesOperatorsInput `json:"times,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponUsageTimesOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneTraitTraitSpecificBreathWeaponUsageTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitTraitSpecificDamageTypeIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitTraitSpecificDamageTypeInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type FilterFindOneTraitTraitSpecificDamageTypeNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitTraitSpecificDamageTypeOperatorsInput struct {
	Index *FilterFindOneTraitTraitSpecificDamageTypeIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneTraitTraitSpecificDamageTypeNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneTraitTraitSpecificDamageTypeURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneTraitTraitSpecificDamageTypeURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitTraitSpecificInput struct {
	SubtraitOptions *FilterFindOneTraitTraitSpecificSubtraitOptionsInput `json:"subtrait_options,omitempty"`
	SpellOptions    *FilterFindOneTraitTraitSpecificSpellOptionsInput    `json:"spell_options,omitempty"`
	DamageType      *FilterFindOneTraitTraitSpecificDamageTypeInput      `json:"damage_type,omitempty"`
	BreathWeapon    *FilterFindOneTraitTraitSpecificBreathWeaponInput    `json:"breath_weapon,omitempty"`
}

type FilterFindOneTraitTraitSpecificOperatorsInput struct {
	SubtraitOptions *FilterFindOneTraitTraitSpecificSubtraitOptionsOperatorsInput `json:"subtrait_options,omitempty"`
	SpellOptions    *FilterFindOneTraitTraitSpecificSpellOptionsOperatorsInput    `json:"spell_options,omitempty"`
	DamageType      *FilterFindOneTraitTraitSpecificDamageTypeOperatorsInput      `json:"damage_type,omitempty"`
	BreathWeapon    *FilterFindOneTraitTraitSpecificBreathWeaponOperatorsInput    `json:"breath_weapon,omitempty"`
}

type FilterFindOneTraitTraitSpecificSpellOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneTraitTraitSpecificSpellOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneTraitTraitSpecificSpellOptionsInput struct {
	Choose *float64                                                `json:"choose,omitempty"`
	From   []*FilterFindOneTraitTraitSpecificSpellOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                 `json:"type,omitempty"`
}

type FilterFindOneTraitTraitSpecificSpellOptionsOperatorsInput struct {
	Choose *FilterFindOneTraitTraitSpecificSpellOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindOneTraitTraitSpecificSpellOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneTraitTraitSpecificSpellOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitTraitSpecificSubtraitOptionsChooseOperatorsInput struct {
	Gt     *float64   `json:"gt,omitempty"`
	Gte    *float64   `json:"gte,omitempty"`
	Lt     *float64   `json:"lt,omitempty"`
	Lte    *float64   `json:"lte,omitempty"`
	Ne     *float64   `json:"ne,omitempty"`
	In     []*float64 `json:"in,omitempty"`
	Nin    []*float64 `json:"nin,omitempty"`
	Exists *bool      `json:"exists,omitempty"`
}

type FilterFindOneTraitTraitSpecificSubtraitOptionsFromInput struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type FilterFindOneTraitTraitSpecificSubtraitOptionsInput struct {
	Choose *float64                                                   `json:"choose,omitempty"`
	From   []*FilterFindOneTraitTraitSpecificSubtraitOptionsFromInput `json:"from,omitempty"`
	Type   *string                                                    `json:"type,omitempty"`
}

type FilterFindOneTraitTraitSpecificSubtraitOptionsOperatorsInput struct {
	Choose *FilterFindOneTraitTraitSpecificSubtraitOptionsChooseOperatorsInput `json:"choose,omitempty"`
	Type   *FilterFindOneTraitTraitSpecificSubtraitOptionsTypeOperatorsInput   `json:"type,omitempty"`
}

type FilterFindOneTraitTraitSpecificSubtraitOptionsTypeOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneTraitIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneWeaponPropertyDescOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneWeaponPropertyIndexOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneWeaponPropertyInput struct {
	ID    *string   `json:"_id,omitempty"`
	Desc  []*string `json:"desc,omitempty"`
	Index *string   `json:"index,omitempty"`
	Name  *string   `json:"name,omitempty"`
	URL   *string   `json:"url,omitempty"`
	// List of *indexed* fields that can be filtered via operators.
	Operators *FilterFindOneWeaponPropertyOperatorsInput `json:"_operators,omitempty"`
	Or        []*FilterFindOneWeaponPropertyInput        `json:"OR,omitempty"`
	And       []*FilterFindOneWeaponPropertyInput        `json:"AND,omitempty"`
}

type FilterFindOneWeaponPropertyNameOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

// For performance reason this type contains only *indexed* fields.
type FilterFindOneWeaponPropertyOperatorsInput struct {
	ID    *FilterFindOneWeaponPropertyIDOperatorsInput    `json:"_id,omitempty"`
	Desc  *FilterFindOneWeaponPropertyDescOperatorsInput  `json:"desc,omitempty"`
	Index *FilterFindOneWeaponPropertyIndexOperatorsInput `json:"index,omitempty"`
	Name  *FilterFindOneWeaponPropertyNameOperatorsInput  `json:"name,omitempty"`
	URL   *FilterFindOneWeaponPropertyURLOperatorsInput   `json:"url,omitempty"`
}

type FilterFindOneWeaponPropertyURLOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type FilterFindOneWeaponPropertyIDOperatorsInput struct {
	Gt     *string   `json:"gt,omitempty"`
	Gte    *string   `json:"gte,omitempty"`
	Lt     *string   `json:"lt,omitempty"`
	Lte    *string   `json:"lte,omitempty"`
	Ne     *string   `json:"ne,omitempty"`
	In     []*string `json:"in,omitempty"`
	Nin    []*string `json:"nin,omitempty"`
	Regex  *string   `json:"regex,omitempty"`
	Exists *bool     `json:"exists,omitempty"`
}

type Language struct {
	ID              string    `json:"_id"`
	Desc            *string   `json:"desc,omitempty"`
	Index           *string   `json:"index,omitempty"`
	Name            *string   `json:"name,omitempty"`
	Script          *string   `json:"script,omitempty"`
	Type            *string   `json:"type,omitempty"`
	TypicalSpeakers []*string `json:"typical_speakers,omitempty"`
	URL             *string   `json:"url,omitempty"`
}

type Level struct {
	ID                  string                 `json:"_id"`
	AbilityScoreBonuses *float64               `json:"ability_score_bonuses,omitempty"`
	Class               *LevelClass            `json:"class,omitempty"`
	ClassSpecific       *LevelClassSpecific    `json:"class_specific,omitempty"`
	Features            []*Feature             `json:"features,omitempty"`
	Index               *string                `json:"index,omitempty"`
	Level               *float64               `json:"level,omitempty"`
	ProfBonus           *float64               `json:"prof_bonus,omitempty"`
	Spellcasting        *LevelSpellcasting     `json:"spellcasting,omitempty"`
	Subclass            *LevelSubclass         `json:"subclass,omitempty"`
	SubclassSpecific    *LevelSubclassSpecific `json:"subclass_specific,omitempty"`
	URL                 *string                `json:"url,omitempty"`
}

type LevelClass struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type LevelClassSpecific struct {
	ActionSurges           *float64                                `json:"action_surges,omitempty"`
	ArcaneRecoveryLevels   *float64                                `json:"arcane_recovery_levels,omitempty"`
	AuraRange              *float64                                `json:"aura_range,omitempty"`
	BardicInspirationDie   *float64                                `json:"bardic_inspiration_die,omitempty"`
	BrutalCriticalDice     *float64                                `json:"brutal_critical_dice,omitempty"`
	ChannelDivinityCharges *float64                                `json:"channel_divinity_charges,omitempty"`
	CreatingSpellSlots     []*LevelClassSpecificCreatingSpellSlots `json:"creating_spell_slots,omitempty"`
	DestroyUndeadCr        *float64                                `json:"destroy_undead_cr,omitempty"`
	ExtraAttacks           *float64                                `json:"extra_attacks,omitempty"`
	FavoredEnemies         *float64                                `json:"favored_enemies,omitempty"`
	FavoredTerrain         *float64                                `json:"favored_terrain,omitempty"`
	IndomitableUses        *float64                                `json:"indomitable_uses,omitempty"`
	InvocationsKnown       *float64                                `json:"invocations_known,omitempty"`
	KiPoints               *float64                                `json:"ki_points,omitempty"`
	MagicalSecretsMax5     *float64                                `json:"magical_secrets_max_5,omitempty"`
	MagicalSecretsMax7     *float64                                `json:"magical_secrets_max_7,omitempty"`
	MagicalSecretsMax9     *float64                                `json:"magical_secrets_max_9,omitempty"`
	MartialArts            *LevelClassSpecificMartialArts          `json:"martial_arts,omitempty"`
	MetamagicKnown         *float64                                `json:"metamagic_known,omitempty"`
	MysticArcanumLevel6    *float64                                `json:"mystic_arcanum_level_6,omitempty"`
	MysticArcanumLevel7    *float64                                `json:"mystic_arcanum_level_7,omitempty"`
	MysticArcanumLevel8    *float64                                `json:"mystic_arcanum_level_8,omitempty"`
	MysticArcanumLevel9    *float64                                `json:"mystic_arcanum_level_9,omitempty"`
	RageCount              *float64                                `json:"rage_count,omitempty"`
	RageDamageBonus        *float64                                `json:"rage_damage_bonus,omitempty"`
	SneakAttack            *LevelClassSpecificSneakAttack          `json:"sneak_attack,omitempty"`
	SongOfRestDie          *float64                                `json:"song_of_rest_die,omitempty"`
	SorceryPoints          *float64                                `json:"sorcery_points,omitempty"`
	UnarmoredMovement      *float64                                `json:"unarmored_movement,omitempty"`
	WildShapeFly           *bool                                   `json:"wild_shape_fly,omitempty"`
	WildShapeMaxCr         *float64                                `json:"wild_shape_max_cr,omitempty"`
	WildShapeSwim          *bool                                   `json:"wild_shape_swim,omitempty"`
}

type LevelClassSpecificCreatingSpellSlots struct {
	SorceryPointCost *float64 `json:"sorcery_point_cost,omitempty"`
	SpellSlotLevel   *float64 `json:"spell_slot_level,omitempty"`
	ID               *string  `json:"_id,omitempty"`
}

type LevelClassSpecificMartialArts struct {
	DiceCount *float64 `json:"dice_count,omitempty"`
	DiceValue *float64 `json:"dice_value,omitempty"`
}

type LevelClassSpecificSneakAttack struct {
	DiceCount *float64 `json:"dice_count,omitempty"`
	DiceValue *float64 `json:"dice_value,omitempty"`
}

type LevelSpellcasting struct {
	CantripsKnown    *float64 `json:"cantrips_known,omitempty"`
	SpellSlotsLevel1 *float64 `json:"spell_slots_level_1,omitempty"`
	SpellSlotsLevel2 *float64 `json:"spell_slots_level_2,omitempty"`
	SpellSlotsLevel3 *float64 `json:"spell_slots_level_3,omitempty"`
	SpellSlotsLevel4 *float64 `json:"spell_slots_level_4,omitempty"`
	SpellSlotsLevel5 *float64 `json:"spell_slots_level_5,omitempty"`
	SpellSlotsLevel6 *float64 `json:"spell_slots_level_6,omitempty"`
	SpellSlotsLevel7 *float64 `json:"spell_slots_level_7,omitempty"`
	SpellSlotsLevel8 *float64 `json:"spell_slots_level_8,omitempty"`
	SpellSlotsLevel9 *float64 `json:"spell_slots_level_9,omitempty"`
	SpellsKnown      *float64 `json:"spells_known,omitempty"`
}

type LevelSubclass struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type LevelSubclassSpecific struct {
	AdditionalMagicalSecretsMaxLvl *float64 `json:"additional_magical_secrets_max_lvl,omitempty"`
	AuraRange                      *float64 `json:"aura_range,omitempty"`
}

type MagicItem struct {
	ID                string                      `json:"_id"`
	Desc              []*string                   `json:"desc,omitempty"`
	EquipmentCategory *MagicItemEquipmentCategory `json:"equipment_category,omitempty"`
	Index             *string                     `json:"index,omitempty"`
	Name              *string                     `json:"name,omitempty"`
	URL               *string                     `json:"url,omitempty"`
}

type MagicItemEquipmentCategory struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type MagicSchool struct {
	ID    string  `json:"_id"`
	Desc  *string `json:"desc,omitempty"`
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type Monster struct {
	ID                    string                        `json:"_id"`
	Actions               []*MonsterActions             `json:"actions,omitempty"`
	Alignment             *string                       `json:"alignment,omitempty"`
	ArmorClass            *float64                      `json:"armor_class,omitempty"`
	ChallengeRating       *float64                      `json:"challenge_rating,omitempty"`
	Charisma              *float64                      `json:"charisma,omitempty"`
	ConditionImmunities   []*MonsterConditionImmunities `json:"condition_immunities,omitempty"`
	Constitution          *float64                      `json:"constitution,omitempty"`
	DamageImmunities      []*string                     `json:"damage_immunities,omitempty"`
	DamageResistances     []*string                     `json:"damage_resistances,omitempty"`
	DamageVulnerabilities []*string                     `json:"damage_vulnerabilities,omitempty"`
	Dexterity             *float64                      `json:"dexterity,omitempty"`
	Forms                 []*MonsterForms               `json:"forms,omitempty"`
	HitDice               *string                       `json:"hit_dice,omitempty"`
	HitPoints             *float64                      `json:"hit_points,omitempty"`
	Index                 *string                       `json:"index,omitempty"`
	Intelligence          *float64                      `json:"intelligence,omitempty"`
	Languages             *string                       `json:"languages,omitempty"`
	LegendaryActions      []*MonsterLegendaryActions    `json:"legendary_actions,omitempty"`
	Name                  *string                       `json:"name,omitempty"`
	Proficiencies         []*MonsterProficiencies       `json:"proficiencies,omitempty"`
	Reactions             []*MonsterReactions           `json:"reactions,omitempty"`
	Senses                *MonsterSenses                `json:"senses,omitempty"`
	Size                  *string                       `json:"size,omitempty"`
	SpecialAbilities      []*MonsterSpecialAbilities    `json:"special_abilities,omitempty"`
	Speed                 *MonsterSpeed                 `json:"speed,omitempty"`
	Strength              *float64                      `json:"strength,omitempty"`
	Subtype               *string                       `json:"subtype,omitempty"`
	Type                  *string                       `json:"type,omitempty"`
	URL                   *string                       `json:"url,omitempty"`
	Wisdom                *float64                      `json:"wisdom,omitempty"`
	Xp                    *float64                      `json:"xp,omitempty"`
}

type MonsterActions struct {
	AttackBonus *float64                `json:"attack_bonus,omitempty"`
	Damage      []*MonsterActionsDamage `json:"damage,omitempty"`
	Desc        *string                 `json:"desc,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	ID          *string                 `json:"_id,omitempty"`
}

type MonsterActionsDamage struct {
	DamageDice *string                         `json:"damage_dice,omitempty"`
	DamageType *MonsterActionsDamageDamageType `json:"damage_type,omitempty"`
	ID         *string                         `json:"_id,omitempty"`
}

type MonsterActionsDamageDamageType struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type MonsterConditionImmunities struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type MonsterForms struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type MonsterLegendaryActions struct {
	AttackBonus *float64 `json:"attack_bonus,omitempty"`
	Desc        *string  `json:"desc,omitempty"`
	Name        *string  `json:"name,omitempty"`
	ID          *string  `json:"_id,omitempty"`
}

type MonsterProficiencies struct {
	Proficiency *MonsterProficienciesProficiency `json:"proficiency,omitempty"`
	Value       *float64                         `json:"value,omitempty"`
	ID          *string                          `json:"_id,omitempty"`
}

type MonsterProficienciesProficiency struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type MonsterReactions struct {
	Desc *string `json:"desc,omitempty"`
	Name *string `json:"name,omitempty"`
	ID   *string `json:"_id,omitempty"`
}

type MonsterSenses struct {
	Blindsight        *string  `json:"blindsight,omitempty"`
	Darkvision        *string  `json:"darkvision,omitempty"`
	PassivePerception *float64 `json:"passive_perception,omitempty"`
	Tremorsense       *string  `json:"tremorsense,omitempty"`
	Truesight         *string  `json:"truesight,omitempty"`
}

type MonsterSpecialAbilities struct {
	Desc *string `json:"desc,omitempty"`
	Name *string `json:"name,omitempty"`
	ID   *string `json:"_id,omitempty"`
}

type MonsterSpeed struct {
	Burrow *string `json:"burrow,omitempty"`
	Climb  *string `json:"climb,omitempty"`
	Fly    *string `json:"fly,omitempty"`
	Hover  *bool   `json:"hover,omitempty"`
	Swim   *string `json:"swim,omitempty"`
	Walk   *string `json:"walk,omitempty"`
}

type Proficiency struct {
	ID         string                   `json:"_id"`
	Classes    []*ProficiencyClasses    `json:"classes,omitempty"`
	Index      *string                  `json:"index,omitempty"`
	Name       *string                  `json:"name,omitempty"`
	Races      []*ProficiencyRaces      `json:"races,omitempty"`
	References []*ProficiencyReferences `json:"references,omitempty"`
	Type       *string                  `json:"type,omitempty"`
	URL        *string                  `json:"url,omitempty"`
}

type ProficiencyClasses struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type ProficiencyRaces struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type ProficiencyReferences struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	Type  *string `json:"type,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type Race struct {
	ID                         string                          `json:"_id"`
	AbilityBonusOptions        *RaceAbilityBonusOptions        `json:"ability_bonus_options,omitempty"`
	AbilityBonuses             []*RaceAbilityBonuses           `json:"ability_bonuses,omitempty"`
	Age                        *string                         `json:"age,omitempty"`
	Alignment                  *string                         `json:"alignment,omitempty"`
	Index                      *string                         `json:"index,omitempty"`
	LanguageDesc               *string                         `json:"language_desc,omitempty"`
	LanguageOptions            *RaceLanguageOptions            `json:"language_options,omitempty"`
	Languages                  []*RaceLanguages                `json:"languages,omitempty"`
	Name                       *string                         `json:"name,omitempty"`
	Size                       *string                         `json:"size,omitempty"`
	SizeDescription            *string                         `json:"size_description,omitempty"`
	Speed                      *float64                        `json:"speed,omitempty"`
	StartingProficiencies      []*RaceStartingProficiencies    `json:"starting_proficiencies,omitempty"`
	StartingProficiencyOptions *RaceStartingProficiencyOptions `json:"starting_proficiency_options,omitempty"`
	Subraces                   []*RaceSubraces                 `json:"subraces,omitempty"`
	Traits                     []*Trait                        `json:"traits,omitempty"`
	URL                        *string                         `json:"url,omitempty"`
}

type RaceAbilityBonusOptions struct {
	Choose *float64                       `json:"choose,omitempty"`
	From   []*RaceAbilityBonusOptionsFrom `json:"from,omitempty"`
	Type   *string                        `json:"type,omitempty"`
}

type RaceAbilityBonusOptionsFrom struct {
	AbilityScore *RaceAbilityBonusOptionsFromAbilityScore `json:"ability_score,omitempty"`
	Bonus        *float64                                 `json:"bonus,omitempty"`
	ID           *string                                  `json:"_id,omitempty"`
}

type RaceAbilityBonusOptionsFromAbilityScore struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type RaceAbilityBonuses struct {
	AbilityScore *RaceAbilityBonusesAbilityScore `json:"ability_score,omitempty"`
	Bonus        *float64                        `json:"bonus,omitempty"`
	ID           *string                         `json:"_id,omitempty"`
}

type RaceAbilityBonusesAbilityScore struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type RaceLanguageOptions struct {
	Choose *float64                   `json:"choose,omitempty"`
	From   []*RaceLanguageOptionsFrom `json:"from,omitempty"`
	Type   *string                    `json:"type,omitempty"`
}

type RaceLanguageOptionsFrom struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type RaceLanguages struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type RaceStartingProficiencies struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type RaceStartingProficiencyOptions struct {
	Choose *float64                              `json:"choose,omitempty"`
	From   []*RaceStartingProficiencyOptionsFrom `json:"from,omitempty"`
	Type   *string                               `json:"type,omitempty"`
}

type RaceStartingProficiencyOptionsFrom struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type RaceSubraces struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type Rule struct {
	ID          string         `json:"_id"`
	Desc        *string        `json:"desc,omitempty"`
	Index       *string        `json:"index,omitempty"`
	Name        *string        `json:"name,omitempty"`
	Subsections []*RuleSection `json:"subsections,omitempty"`
	URL         *string        `json:"url,omitempty"`
}

type RuleSection struct {
	ID    string  `json:"_id"`
	Desc  *string `json:"desc,omitempty"`
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type Skill struct {
	ID           string             `json:"_id"`
	AbilityScore *SkillAbilityScore `json:"ability_score,omitempty"`
	Desc         []*string          `json:"desc,omitempty"`
	Index        *string            `json:"index,omitempty"`
	Name         *string            `json:"name,omitempty"`
	URL          *string            `json:"url,omitempty"`
}

type SkillAbilityScore struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type Spell struct {
	ID              string             `json:"_id"`
	AreaOfEffect    *SpellAreaOfEffect `json:"area_of_effect,omitempty"`
	AttackType      *string            `json:"attack_type,omitempty"`
	CastingTime     *string            `json:"casting_time,omitempty"`
	Classes         []*SpellClasses    `json:"classes,omitempty"`
	Components      []*string          `json:"components,omitempty"`
	Concentration   *bool              `json:"concentration,omitempty"`
	Damage          *SpellDamage       `json:"damage,omitempty"`
	Dc              *SpellDc           `json:"dc,omitempty"`
	Desc            []*string          `json:"desc,omitempty"`
	Duration        *string            `json:"duration,omitempty"`
	HealAtSlotLevel *string            `json:"heal_at_slot_level,omitempty"`
	HigherLevel     []*string          `json:"higher_level,omitempty"`
	Index           *string            `json:"index,omitempty"`
	Level           *float64           `json:"level,omitempty"`
	Material        *string            `json:"material,omitempty"`
	Name            *string            `json:"name,omitempty"`
	Range           *string            `json:"range,omitempty"`
	Ritual          *bool              `json:"ritual,omitempty"`
	School          *MagicSchool       `json:"school,omitempty"`
	Subclasses      []*SpellSubclasses `json:"subclasses,omitempty"`
	URL             *string            `json:"url,omitempty"`
}

type SpellAreaOfEffect struct {
	Size *float64 `json:"size,omitempty"`
	Type *string  `json:"type,omitempty"`
}

type SpellClasses struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type SpellDamage struct {
	DamageAtSlotLevel      *string                `json:"damage_at_slot_level,omitempty"`
	DamageAtCharacterLevel *string                `json:"damage_at_character_level,omitempty"`
	DamageType             *SpellDamageDamageType `json:"damage_type,omitempty"`
}

type SpellDamageDamageType struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type SpellDc struct {
	DcSuccess *string        `json:"dc_success,omitempty"`
	DcType    *SpellDcDcType `json:"dc_type,omitempty"`
	Desc      *string        `json:"desc,omitempty"`
}

type SpellDcDcType struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type SpellSubclasses struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type Subclass struct {
	ID             string            `json:"_id"`
	Class          *SubclassClass    `json:"class,omitempty"`
	Desc           []*string         `json:"desc,omitempty"`
	Index          *string           `json:"index,omitempty"`
	Name           *string           `json:"name,omitempty"`
	Spells         []*SubclassSpells `json:"spells,omitempty"`
	SubclassFlavor *string           `json:"subclass_flavor,omitempty"`
	SubclassLevels []*Level          `json:"subclass_levels,omitempty"`
	URL            *string           `json:"url,omitempty"`
}

type SubclassClass struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type SubclassSpells struct {
	Prerequisites []*SubclassSpellsPrerequisites `json:"prerequisites,omitempty"`
	Spell         *SubclassSpellsSpell           `json:"spell,omitempty"`
	ID            *string                        `json:"_id,omitempty"`
}

type SubclassSpellsPrerequisites struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	Type  *string `json:"type,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type SubclassSpellsSpell struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type Subrace struct {
	ID                    string                          `json:"_id"`
	AbilityBonuses        []*SubraceAbilityBonuses        `json:"ability_bonuses,omitempty"`
	Desc                  *string                         `json:"desc,omitempty"`
	Index                 *string                         `json:"index,omitempty"`
	LanguageOptions       *SubraceLanguageOptions         `json:"language_options,omitempty"`
	Name                  *string                         `json:"name,omitempty"`
	Race                  *SubraceRace                    `json:"race,omitempty"`
	RacialTraits          []*Trait                        `json:"racial_traits,omitempty"`
	StartingProficiencies []*SubraceStartingProficiencies `json:"starting_proficiencies,omitempty"`
	URL                   *string                         `json:"url,omitempty"`
}

type SubraceAbilityBonuses struct {
	AbilityScore *SubraceAbilityBonusesAbilityScore `json:"ability_score,omitempty"`
	Bonus        *float64                           `json:"bonus,omitempty"`
	ID           *string                            `json:"_id,omitempty"`
}

type SubraceAbilityBonusesAbilityScore struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type SubraceLanguageOptions struct {
	Choose *float64                      `json:"choose,omitempty"`
	From   []*SubraceLanguageOptionsFrom `json:"from,omitempty"`
	Type   *string                       `json:"type,omitempty"`
}

type SubraceLanguageOptionsFrom struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type SubraceRace struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type SubraceStartingProficiencies struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type Trait struct {
	ID                 string                   `json:"_id"`
	Desc               []*string                `json:"desc,omitempty"`
	Index              *string                  `json:"index,omitempty"`
	Name               *string                  `json:"name,omitempty"`
	Proficiencies      []*Proficiency           `json:"proficiencies,omitempty"`
	ProficiencyChoices *TraitProficiencyChoices `json:"proficiency_choices,omitempty"`
	Races              []*TraitRaces            `json:"races,omitempty"`
	Subraces           []*TraitSubraces         `json:"subraces,omitempty"`
	Parent             *TraitParent             `json:"parent,omitempty"`
	TraitSpecific      *TraitTraitSpecific      `json:"trait_specific,omitempty"`
	URL                *string                  `json:"url,omitempty"`
}

type TraitParent struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type TraitProficiencyChoices struct {
	Choose *float64                       `json:"choose,omitempty"`
	From   []*TraitProficiencyChoicesFrom `json:"from,omitempty"`
	Type   *string                        `json:"type,omitempty"`
}

type TraitProficiencyChoicesFrom struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type TraitRaces struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type TraitSubraces struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type TraitTraitSpecific struct {
	SubtraitOptions *TraitTraitSpecificSubtraitOptions `json:"subtrait_options,omitempty"`
	SpellOptions    *TraitTraitSpecificSpellOptions    `json:"spell_options,omitempty"`
	DamageType      *TraitTraitSpecificDamageType      `json:"damage_type,omitempty"`
	BreathWeapon    *TraitTraitSpecificBreathWeapon    `json:"breath_weapon,omitempty"`
}

type TraitTraitSpecificBreathWeapon struct {
	Name   *string                                 `json:"name,omitempty"`
	Desc   *string                                 `json:"desc,omitempty"`
	Usage  *TraitTraitSpecificBreathWeaponUsage    `json:"usage,omitempty"`
	Dc     *TraitTraitSpecificBreathWeaponDc       `json:"dc,omitempty"`
	Damage []*TraitTraitSpecificBreathWeaponDamage `json:"damage,omitempty"`
}

type TraitTraitSpecificBreathWeaponDamage struct {
	DamageType             *TraitTraitSpecificBreathWeaponDamageDamageType `json:"damage_type,omitempty"`
	DamageAtCharacterLevel *string                                         `json:"damage_at_character_level,omitempty"`
	ID                     *string                                         `json:"_id,omitempty"`
}

type TraitTraitSpecificBreathWeaponDamageDamageType struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type TraitTraitSpecificBreathWeaponDc struct {
	DcType      *TraitTraitSpecificBreathWeaponDcDcType `json:"dc_type,omitempty"`
	SuccessType *string                                 `json:"success_type,omitempty"`
}

type TraitTraitSpecificBreathWeaponDcDcType struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type TraitTraitSpecificBreathWeaponUsage struct {
	Type  *string  `json:"type,omitempty"`
	Times *float64 `json:"times,omitempty"`
}

type TraitTraitSpecificDamageType struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type TraitTraitSpecificSpellOptions struct {
	Choose *float64                              `json:"choose,omitempty"`
	From   []*TraitTraitSpecificSpellOptionsFrom `json:"from,omitempty"`
	Type   *string                               `json:"type,omitempty"`
}

type TraitTraitSpecificSpellOptionsFrom struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type TraitTraitSpecificSubtraitOptions struct {
	Choose *float64                                 `json:"choose,omitempty"`
	From   []*TraitTraitSpecificSubtraitOptionsFrom `json:"from,omitempty"`
	Type   *string                                  `json:"type,omitempty"`
}

type TraitTraitSpecificSubtraitOptionsFrom struct {
	Index *string `json:"index,omitempty"`
	Name  *string `json:"name,omitempty"`
	URL   *string `json:"url,omitempty"`
	ID    *string `json:"_id,omitempty"`
}

type WeaponProperty struct {
	ID    string    `json:"_id"`
	Desc  []*string `json:"desc,omitempty"`
	Index *string   `json:"index,omitempty"`
	Name  *string   `json:"name,omitempty"`
	URL   *string   `json:"url,omitempty"`
}

type SortFindManyAbilityScoreInput string

const (
	SortFindManyAbilityScoreInputIDAsc        SortFindManyAbilityScoreInput = "_ID_ASC"
	SortFindManyAbilityScoreInputIDDesc       SortFindManyAbilityScoreInput = "_ID_DESC"
	SortFindManyAbilityScoreInputDescAsc      SortFindManyAbilityScoreInput = "DESC_ASC"
	SortFindManyAbilityScoreInputDescDesc     SortFindManyAbilityScoreInput = "DESC_DESC"
	SortFindManyAbilityScoreInputFullNameAsc  SortFindManyAbilityScoreInput = "FULL_NAME_ASC"
	SortFindManyAbilityScoreInputFullNameDesc SortFindManyAbilityScoreInput = "FULL_NAME_DESC"
	SortFindManyAbilityScoreInputIndexAsc     SortFindManyAbilityScoreInput = "INDEX_ASC"
	SortFindManyAbilityScoreInputIndexDesc    SortFindManyAbilityScoreInput = "INDEX_DESC"
	SortFindManyAbilityScoreInputNameAsc      SortFindManyAbilityScoreInput = "NAME_ASC"
	SortFindManyAbilityScoreInputNameDesc     SortFindManyAbilityScoreInput = "NAME_DESC"
	SortFindManyAbilityScoreInputURLAsc       SortFindManyAbilityScoreInput = "URL_ASC"
	SortFindManyAbilityScoreInputURLDesc      SortFindManyAbilityScoreInput = "URL_DESC"
)

var AllSortFindManyAbilityScoreInput = []SortFindManyAbilityScoreInput{
	SortFindManyAbilityScoreInputIDAsc,
	SortFindManyAbilityScoreInputIDDesc,
	SortFindManyAbilityScoreInputDescAsc,
	SortFindManyAbilityScoreInputDescDesc,
	SortFindManyAbilityScoreInputFullNameAsc,
	SortFindManyAbilityScoreInputFullNameDesc,
	SortFindManyAbilityScoreInputIndexAsc,
	SortFindManyAbilityScoreInputIndexDesc,
	SortFindManyAbilityScoreInputNameAsc,
	SortFindManyAbilityScoreInputNameDesc,
	SortFindManyAbilityScoreInputURLAsc,
	SortFindManyAbilityScoreInputURLDesc,
}

func (e SortFindManyAbilityScoreInput) IsValid() bool {
	switch e {
	case SortFindManyAbilityScoreInputIDAsc, SortFindManyAbilityScoreInputIDDesc, SortFindManyAbilityScoreInputDescAsc, SortFindManyAbilityScoreInputDescDesc, SortFindManyAbilityScoreInputFullNameAsc, SortFindManyAbilityScoreInputFullNameDesc, SortFindManyAbilityScoreInputIndexAsc, SortFindManyAbilityScoreInputIndexDesc, SortFindManyAbilityScoreInputNameAsc, SortFindManyAbilityScoreInputNameDesc, SortFindManyAbilityScoreInputURLAsc, SortFindManyAbilityScoreInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyAbilityScoreInput) String() string {
	return string(e)
}

func (e *SortFindManyAbilityScoreInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyAbilityScoreInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyAbilityScoreInput", str)
	}
	return nil
}

func (e SortFindManyAbilityScoreInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyAlignmentInput string

const (
	SortFindManyAlignmentInputIDAsc            SortFindManyAlignmentInput = "_ID_ASC"
	SortFindManyAlignmentInputIDDesc           SortFindManyAlignmentInput = "_ID_DESC"
	SortFindManyAlignmentInputDescAsc          SortFindManyAlignmentInput = "DESC_ASC"
	SortFindManyAlignmentInputDescDesc         SortFindManyAlignmentInput = "DESC_DESC"
	SortFindManyAlignmentInputAbbreviationAsc  SortFindManyAlignmentInput = "ABBREVIATION_ASC"
	SortFindManyAlignmentInputAbbreviationDesc SortFindManyAlignmentInput = "ABBREVIATION_DESC"
	SortFindManyAlignmentInputIndexAsc         SortFindManyAlignmentInput = "INDEX_ASC"
	SortFindManyAlignmentInputIndexDesc        SortFindManyAlignmentInput = "INDEX_DESC"
	SortFindManyAlignmentInputNameAsc          SortFindManyAlignmentInput = "NAME_ASC"
	SortFindManyAlignmentInputNameDesc         SortFindManyAlignmentInput = "NAME_DESC"
	SortFindManyAlignmentInputURLAsc           SortFindManyAlignmentInput = "URL_ASC"
	SortFindManyAlignmentInputURLDesc          SortFindManyAlignmentInput = "URL_DESC"
)

var AllSortFindManyAlignmentInput = []SortFindManyAlignmentInput{
	SortFindManyAlignmentInputIDAsc,
	SortFindManyAlignmentInputIDDesc,
	SortFindManyAlignmentInputDescAsc,
	SortFindManyAlignmentInputDescDesc,
	SortFindManyAlignmentInputAbbreviationAsc,
	SortFindManyAlignmentInputAbbreviationDesc,
	SortFindManyAlignmentInputIndexAsc,
	SortFindManyAlignmentInputIndexDesc,
	SortFindManyAlignmentInputNameAsc,
	SortFindManyAlignmentInputNameDesc,
	SortFindManyAlignmentInputURLAsc,
	SortFindManyAlignmentInputURLDesc,
}

func (e SortFindManyAlignmentInput) IsValid() bool {
	switch e {
	case SortFindManyAlignmentInputIDAsc, SortFindManyAlignmentInputIDDesc, SortFindManyAlignmentInputDescAsc, SortFindManyAlignmentInputDescDesc, SortFindManyAlignmentInputAbbreviationAsc, SortFindManyAlignmentInputAbbreviationDesc, SortFindManyAlignmentInputIndexAsc, SortFindManyAlignmentInputIndexDesc, SortFindManyAlignmentInputNameAsc, SortFindManyAlignmentInputNameDesc, SortFindManyAlignmentInputURLAsc, SortFindManyAlignmentInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyAlignmentInput) String() string {
	return string(e)
}

func (e *SortFindManyAlignmentInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyAlignmentInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyAlignmentInput", str)
	}
	return nil
}

func (e SortFindManyAlignmentInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyBackgroundInput string

const (
	SortFindManyBackgroundInputIDAsc                       SortFindManyBackgroundInput = "_ID_ASC"
	SortFindManyBackgroundInputIDDesc                      SortFindManyBackgroundInput = "_ID_DESC"
	SortFindManyBackgroundInputIndexAsc                    SortFindManyBackgroundInput = "INDEX_ASC"
	SortFindManyBackgroundInputIndexDesc                   SortFindManyBackgroundInput = "INDEX_DESC"
	SortFindManyBackgroundInputNameAsc                     SortFindManyBackgroundInput = "NAME_ASC"
	SortFindManyBackgroundInputNameDesc                    SortFindManyBackgroundInput = "NAME_DESC"
	SortFindManyBackgroundInputLanguageOptionsChooseAsc    SortFindManyBackgroundInput = "LANGUAGE_OPTIONS__CHOOSE_ASC"
	SortFindManyBackgroundInputLanguageOptionsChooseDesc   SortFindManyBackgroundInput = "LANGUAGE_OPTIONS__CHOOSE_DESC"
	SortFindManyBackgroundInputLanguageOptionsTypeAsc      SortFindManyBackgroundInput = "LANGUAGE_OPTIONS__TYPE_ASC"
	SortFindManyBackgroundInputLanguageOptionsTypeDesc     SortFindManyBackgroundInput = "LANGUAGE_OPTIONS__TYPE_DESC"
	SortFindManyBackgroundInputURLAsc                      SortFindManyBackgroundInput = "URL_ASC"
	SortFindManyBackgroundInputURLDesc                     SortFindManyBackgroundInput = "URL_DESC"
	SortFindManyBackgroundInputFeatureNameAsc              SortFindManyBackgroundInput = "FEATURE__NAME_ASC"
	SortFindManyBackgroundInputFeatureNameDesc             SortFindManyBackgroundInput = "FEATURE__NAME_DESC"
	SortFindManyBackgroundInputFeatureDescAsc              SortFindManyBackgroundInput = "FEATURE__DESC_ASC"
	SortFindManyBackgroundInputFeatureDescDesc             SortFindManyBackgroundInput = "FEATURE__DESC_DESC"
	SortFindManyBackgroundInputPersonalityTraitsChooseAsc  SortFindManyBackgroundInput = "PERSONALITY_TRAITS__CHOOSE_ASC"
	SortFindManyBackgroundInputPersonalityTraitsChooseDesc SortFindManyBackgroundInput = "PERSONALITY_TRAITS__CHOOSE_DESC"
	SortFindManyBackgroundInputPersonalityTraitsFromAsc    SortFindManyBackgroundInput = "PERSONALITY_TRAITS__FROM_ASC"
	SortFindManyBackgroundInputPersonalityTraitsFromDesc   SortFindManyBackgroundInput = "PERSONALITY_TRAITS__FROM_DESC"
	SortFindManyBackgroundInputPersonalityTraitsTypeAsc    SortFindManyBackgroundInput = "PERSONALITY_TRAITS__TYPE_ASC"
	SortFindManyBackgroundInputPersonalityTraitsTypeDesc   SortFindManyBackgroundInput = "PERSONALITY_TRAITS__TYPE_DESC"
	SortFindManyBackgroundInputIDEalsChooseAsc             SortFindManyBackgroundInput = "IDEALS__CHOOSE_ASC"
	SortFindManyBackgroundInputIDEalsChooseDesc            SortFindManyBackgroundInput = "IDEALS__CHOOSE_DESC"
	SortFindManyBackgroundInputIDEalsTypeAsc               SortFindManyBackgroundInput = "IDEALS__TYPE_ASC"
	SortFindManyBackgroundInputIDEalsTypeDesc              SortFindManyBackgroundInput = "IDEALS__TYPE_DESC"
	SortFindManyBackgroundInputBondsChooseAsc              SortFindManyBackgroundInput = "BONDS__CHOOSE_ASC"
	SortFindManyBackgroundInputBondsChooseDesc             SortFindManyBackgroundInput = "BONDS__CHOOSE_DESC"
	SortFindManyBackgroundInputBondsFromAsc                SortFindManyBackgroundInput = "BONDS__FROM_ASC"
	SortFindManyBackgroundInputBondsFromDesc               SortFindManyBackgroundInput = "BONDS__FROM_DESC"
	SortFindManyBackgroundInputBondsTypeAsc                SortFindManyBackgroundInput = "BONDS__TYPE_ASC"
	SortFindManyBackgroundInputBondsTypeDesc               SortFindManyBackgroundInput = "BONDS__TYPE_DESC"
	SortFindManyBackgroundInputFlawsChooseAsc              SortFindManyBackgroundInput = "FLAWS__CHOOSE_ASC"
	SortFindManyBackgroundInputFlawsChooseDesc             SortFindManyBackgroundInput = "FLAWS__CHOOSE_DESC"
	SortFindManyBackgroundInputFlawsFromAsc                SortFindManyBackgroundInput = "FLAWS__FROM_ASC"
	SortFindManyBackgroundInputFlawsFromDesc               SortFindManyBackgroundInput = "FLAWS__FROM_DESC"
	SortFindManyBackgroundInputFlawsTypeAsc                SortFindManyBackgroundInput = "FLAWS__TYPE_ASC"
	SortFindManyBackgroundInputFlawsTypeDesc               SortFindManyBackgroundInput = "FLAWS__TYPE_DESC"
)

var AllSortFindManyBackgroundInput = []SortFindManyBackgroundInput{
	SortFindManyBackgroundInputIDAsc,
	SortFindManyBackgroundInputIDDesc,
	SortFindManyBackgroundInputIndexAsc,
	SortFindManyBackgroundInputIndexDesc,
	SortFindManyBackgroundInputNameAsc,
	SortFindManyBackgroundInputNameDesc,
	SortFindManyBackgroundInputLanguageOptionsChooseAsc,
	SortFindManyBackgroundInputLanguageOptionsChooseDesc,
	SortFindManyBackgroundInputLanguageOptionsTypeAsc,
	SortFindManyBackgroundInputLanguageOptionsTypeDesc,
	SortFindManyBackgroundInputURLAsc,
	SortFindManyBackgroundInputURLDesc,
	SortFindManyBackgroundInputFeatureNameAsc,
	SortFindManyBackgroundInputFeatureNameDesc,
	SortFindManyBackgroundInputFeatureDescAsc,
	SortFindManyBackgroundInputFeatureDescDesc,
	SortFindManyBackgroundInputPersonalityTraitsChooseAsc,
	SortFindManyBackgroundInputPersonalityTraitsChooseDesc,
	SortFindManyBackgroundInputPersonalityTraitsFromAsc,
	SortFindManyBackgroundInputPersonalityTraitsFromDesc,
	SortFindManyBackgroundInputPersonalityTraitsTypeAsc,
	SortFindManyBackgroundInputPersonalityTraitsTypeDesc,
	SortFindManyBackgroundInputIDEalsChooseAsc,
	SortFindManyBackgroundInputIDEalsChooseDesc,
	SortFindManyBackgroundInputIDEalsTypeAsc,
	SortFindManyBackgroundInputIDEalsTypeDesc,
	SortFindManyBackgroundInputBondsChooseAsc,
	SortFindManyBackgroundInputBondsChooseDesc,
	SortFindManyBackgroundInputBondsFromAsc,
	SortFindManyBackgroundInputBondsFromDesc,
	SortFindManyBackgroundInputBondsTypeAsc,
	SortFindManyBackgroundInputBondsTypeDesc,
	SortFindManyBackgroundInputFlawsChooseAsc,
	SortFindManyBackgroundInputFlawsChooseDesc,
	SortFindManyBackgroundInputFlawsFromAsc,
	SortFindManyBackgroundInputFlawsFromDesc,
	SortFindManyBackgroundInputFlawsTypeAsc,
	SortFindManyBackgroundInputFlawsTypeDesc,
}

func (e SortFindManyBackgroundInput) IsValid() bool {
	switch e {
	case SortFindManyBackgroundInputIDAsc, SortFindManyBackgroundInputIDDesc, SortFindManyBackgroundInputIndexAsc, SortFindManyBackgroundInputIndexDesc, SortFindManyBackgroundInputNameAsc, SortFindManyBackgroundInputNameDesc, SortFindManyBackgroundInputLanguageOptionsChooseAsc, SortFindManyBackgroundInputLanguageOptionsChooseDesc, SortFindManyBackgroundInputLanguageOptionsTypeAsc, SortFindManyBackgroundInputLanguageOptionsTypeDesc, SortFindManyBackgroundInputURLAsc, SortFindManyBackgroundInputURLDesc, SortFindManyBackgroundInputFeatureNameAsc, SortFindManyBackgroundInputFeatureNameDesc, SortFindManyBackgroundInputFeatureDescAsc, SortFindManyBackgroundInputFeatureDescDesc, SortFindManyBackgroundInputPersonalityTraitsChooseAsc, SortFindManyBackgroundInputPersonalityTraitsChooseDesc, SortFindManyBackgroundInputPersonalityTraitsFromAsc, SortFindManyBackgroundInputPersonalityTraitsFromDesc, SortFindManyBackgroundInputPersonalityTraitsTypeAsc, SortFindManyBackgroundInputPersonalityTraitsTypeDesc, SortFindManyBackgroundInputIDEalsChooseAsc, SortFindManyBackgroundInputIDEalsChooseDesc, SortFindManyBackgroundInputIDEalsTypeAsc, SortFindManyBackgroundInputIDEalsTypeDesc, SortFindManyBackgroundInputBondsChooseAsc, SortFindManyBackgroundInputBondsChooseDesc, SortFindManyBackgroundInputBondsFromAsc, SortFindManyBackgroundInputBondsFromDesc, SortFindManyBackgroundInputBondsTypeAsc, SortFindManyBackgroundInputBondsTypeDesc, SortFindManyBackgroundInputFlawsChooseAsc, SortFindManyBackgroundInputFlawsChooseDesc, SortFindManyBackgroundInputFlawsFromAsc, SortFindManyBackgroundInputFlawsFromDesc, SortFindManyBackgroundInputFlawsTypeAsc, SortFindManyBackgroundInputFlawsTypeDesc:
		return true
	}
	return false
}

func (e SortFindManyBackgroundInput) String() string {
	return string(e)
}

func (e *SortFindManyBackgroundInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyBackgroundInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyBackgroundInput", str)
	}
	return nil
}

func (e SortFindManyBackgroundInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyClassInput string

const (
	SortFindManyClassInputIDAsc                                      SortFindManyClassInput = "_ID_ASC"
	SortFindManyClassInputIDDesc                                     SortFindManyClassInput = "_ID_DESC"
	SortFindManyClassInputClassLevelsAsc                             SortFindManyClassInput = "CLASS_LEVELS_ASC"
	SortFindManyClassInputClassLevelsDesc                            SortFindManyClassInput = "CLASS_LEVELS_DESC"
	SortFindManyClassInputMultiClassingPrerequisiteOptionsChooseAsc  SortFindManyClassInput = "MULTI_CLASSING__PREREQUISITE_OPTIONS__CHOOSE_ASC"
	SortFindManyClassInputMultiClassingPrerequisiteOptionsChooseDesc SortFindManyClassInput = "MULTI_CLASSING__PREREQUISITE_OPTIONS__CHOOSE_DESC"
	SortFindManyClassInputMultiClassingPrerequisiteOptionsTypeAsc    SortFindManyClassInput = "MULTI_CLASSING__PREREQUISITE_OPTIONS__TYPE_ASC"
	SortFindManyClassInputMultiClassingPrerequisiteOptionsTypeDesc   SortFindManyClassInput = "MULTI_CLASSING__PREREQUISITE_OPTIONS__TYPE_DESC"
	SortFindManyClassInputHitDieAsc                                  SortFindManyClassInput = "HIT_DIE_ASC"
	SortFindManyClassInputHitDieDesc                                 SortFindManyClassInput = "HIT_DIE_DESC"
	SortFindManyClassInputIndexAsc                                   SortFindManyClassInput = "INDEX_ASC"
	SortFindManyClassInputIndexDesc                                  SortFindManyClassInput = "INDEX_DESC"
	SortFindManyClassInputNameAsc                                    SortFindManyClassInput = "NAME_ASC"
	SortFindManyClassInputNameDesc                                   SortFindManyClassInput = "NAME_DESC"
	SortFindManyClassInputSpellcastingLevelAsc                       SortFindManyClassInput = "SPELLCASTING__LEVEL_ASC"
	SortFindManyClassInputSpellcastingLevelDesc                      SortFindManyClassInput = "SPELLCASTING__LEVEL_DESC"
	SortFindManyClassInputSpellcastingSpellcastingAbilityIndexAsc    SortFindManyClassInput = "SPELLCASTING__SPELLCASTING_ABILITY__INDEX_ASC"
	SortFindManyClassInputSpellcastingSpellcastingAbilityIndexDesc   SortFindManyClassInput = "SPELLCASTING__SPELLCASTING_ABILITY__INDEX_DESC"
	SortFindManyClassInputSpellcastingSpellcastingAbilityNameAsc     SortFindManyClassInput = "SPELLCASTING__SPELLCASTING_ABILITY__NAME_ASC"
	SortFindManyClassInputSpellcastingSpellcastingAbilityNameDesc    SortFindManyClassInput = "SPELLCASTING__SPELLCASTING_ABILITY__NAME_DESC"
	SortFindManyClassInputSpellcastingSpellcastingAbilityURLAsc      SortFindManyClassInput = "SPELLCASTING__SPELLCASTING_ABILITY__URL_ASC"
	SortFindManyClassInputSpellcastingSpellcastingAbilityURLDesc     SortFindManyClassInput = "SPELLCASTING__SPELLCASTING_ABILITY__URL_DESC"
	SortFindManyClassInputSpellsAsc                                  SortFindManyClassInput = "SPELLS_ASC"
	SortFindManyClassInputSpellsDesc                                 SortFindManyClassInput = "SPELLS_DESC"
	SortFindManyClassInputURLAsc                                     SortFindManyClassInput = "URL_ASC"
	SortFindManyClassInputURLDesc                                    SortFindManyClassInput = "URL_DESC"
)

var AllSortFindManyClassInput = []SortFindManyClassInput{
	SortFindManyClassInputIDAsc,
	SortFindManyClassInputIDDesc,
	SortFindManyClassInputClassLevelsAsc,
	SortFindManyClassInputClassLevelsDesc,
	SortFindManyClassInputMultiClassingPrerequisiteOptionsChooseAsc,
	SortFindManyClassInputMultiClassingPrerequisiteOptionsChooseDesc,
	SortFindManyClassInputMultiClassingPrerequisiteOptionsTypeAsc,
	SortFindManyClassInputMultiClassingPrerequisiteOptionsTypeDesc,
	SortFindManyClassInputHitDieAsc,
	SortFindManyClassInputHitDieDesc,
	SortFindManyClassInputIndexAsc,
	SortFindManyClassInputIndexDesc,
	SortFindManyClassInputNameAsc,
	SortFindManyClassInputNameDesc,
	SortFindManyClassInputSpellcastingLevelAsc,
	SortFindManyClassInputSpellcastingLevelDesc,
	SortFindManyClassInputSpellcastingSpellcastingAbilityIndexAsc,
	SortFindManyClassInputSpellcastingSpellcastingAbilityIndexDesc,
	SortFindManyClassInputSpellcastingSpellcastingAbilityNameAsc,
	SortFindManyClassInputSpellcastingSpellcastingAbilityNameDesc,
	SortFindManyClassInputSpellcastingSpellcastingAbilityURLAsc,
	SortFindManyClassInputSpellcastingSpellcastingAbilityURLDesc,
	SortFindManyClassInputSpellsAsc,
	SortFindManyClassInputSpellsDesc,
	SortFindManyClassInputURLAsc,
	SortFindManyClassInputURLDesc,
}

func (e SortFindManyClassInput) IsValid() bool {
	switch e {
	case SortFindManyClassInputIDAsc, SortFindManyClassInputIDDesc, SortFindManyClassInputClassLevelsAsc, SortFindManyClassInputClassLevelsDesc, SortFindManyClassInputMultiClassingPrerequisiteOptionsChooseAsc, SortFindManyClassInputMultiClassingPrerequisiteOptionsChooseDesc, SortFindManyClassInputMultiClassingPrerequisiteOptionsTypeAsc, SortFindManyClassInputMultiClassingPrerequisiteOptionsTypeDesc, SortFindManyClassInputHitDieAsc, SortFindManyClassInputHitDieDesc, SortFindManyClassInputIndexAsc, SortFindManyClassInputIndexDesc, SortFindManyClassInputNameAsc, SortFindManyClassInputNameDesc, SortFindManyClassInputSpellcastingLevelAsc, SortFindManyClassInputSpellcastingLevelDesc, SortFindManyClassInputSpellcastingSpellcastingAbilityIndexAsc, SortFindManyClassInputSpellcastingSpellcastingAbilityIndexDesc, SortFindManyClassInputSpellcastingSpellcastingAbilityNameAsc, SortFindManyClassInputSpellcastingSpellcastingAbilityNameDesc, SortFindManyClassInputSpellcastingSpellcastingAbilityURLAsc, SortFindManyClassInputSpellcastingSpellcastingAbilityURLDesc, SortFindManyClassInputSpellsAsc, SortFindManyClassInputSpellsDesc, SortFindManyClassInputURLAsc, SortFindManyClassInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyClassInput) String() string {
	return string(e)
}

func (e *SortFindManyClassInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyClassInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyClassInput", str)
	}
	return nil
}

func (e SortFindManyClassInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyConditionInput string

const (
	SortFindManyConditionInputIDAsc     SortFindManyConditionInput = "_ID_ASC"
	SortFindManyConditionInputIDDesc    SortFindManyConditionInput = "_ID_DESC"
	SortFindManyConditionInputDescAsc   SortFindManyConditionInput = "DESC_ASC"
	SortFindManyConditionInputDescDesc  SortFindManyConditionInput = "DESC_DESC"
	SortFindManyConditionInputIndexAsc  SortFindManyConditionInput = "INDEX_ASC"
	SortFindManyConditionInputIndexDesc SortFindManyConditionInput = "INDEX_DESC"
	SortFindManyConditionInputNameAsc   SortFindManyConditionInput = "NAME_ASC"
	SortFindManyConditionInputNameDesc  SortFindManyConditionInput = "NAME_DESC"
	SortFindManyConditionInputURLAsc    SortFindManyConditionInput = "URL_ASC"
	SortFindManyConditionInputURLDesc   SortFindManyConditionInput = "URL_DESC"
)

var AllSortFindManyConditionInput = []SortFindManyConditionInput{
	SortFindManyConditionInputIDAsc,
	SortFindManyConditionInputIDDesc,
	SortFindManyConditionInputDescAsc,
	SortFindManyConditionInputDescDesc,
	SortFindManyConditionInputIndexAsc,
	SortFindManyConditionInputIndexDesc,
	SortFindManyConditionInputNameAsc,
	SortFindManyConditionInputNameDesc,
	SortFindManyConditionInputURLAsc,
	SortFindManyConditionInputURLDesc,
}

func (e SortFindManyConditionInput) IsValid() bool {
	switch e {
	case SortFindManyConditionInputIDAsc, SortFindManyConditionInputIDDesc, SortFindManyConditionInputDescAsc, SortFindManyConditionInputDescDesc, SortFindManyConditionInputIndexAsc, SortFindManyConditionInputIndexDesc, SortFindManyConditionInputNameAsc, SortFindManyConditionInputNameDesc, SortFindManyConditionInputURLAsc, SortFindManyConditionInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyConditionInput) String() string {
	return string(e)
}

func (e *SortFindManyConditionInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyConditionInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyConditionInput", str)
	}
	return nil
}

func (e SortFindManyConditionInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyDamageTypeInput string

const (
	SortFindManyDamageTypeInputIDAsc     SortFindManyDamageTypeInput = "_ID_ASC"
	SortFindManyDamageTypeInputIDDesc    SortFindManyDamageTypeInput = "_ID_DESC"
	SortFindManyDamageTypeInputDescAsc   SortFindManyDamageTypeInput = "DESC_ASC"
	SortFindManyDamageTypeInputDescDesc  SortFindManyDamageTypeInput = "DESC_DESC"
	SortFindManyDamageTypeInputIndexAsc  SortFindManyDamageTypeInput = "INDEX_ASC"
	SortFindManyDamageTypeInputIndexDesc SortFindManyDamageTypeInput = "INDEX_DESC"
	SortFindManyDamageTypeInputNameAsc   SortFindManyDamageTypeInput = "NAME_ASC"
	SortFindManyDamageTypeInputNameDesc  SortFindManyDamageTypeInput = "NAME_DESC"
	SortFindManyDamageTypeInputURLAsc    SortFindManyDamageTypeInput = "URL_ASC"
	SortFindManyDamageTypeInputURLDesc   SortFindManyDamageTypeInput = "URL_DESC"
)

var AllSortFindManyDamageTypeInput = []SortFindManyDamageTypeInput{
	SortFindManyDamageTypeInputIDAsc,
	SortFindManyDamageTypeInputIDDesc,
	SortFindManyDamageTypeInputDescAsc,
	SortFindManyDamageTypeInputDescDesc,
	SortFindManyDamageTypeInputIndexAsc,
	SortFindManyDamageTypeInputIndexDesc,
	SortFindManyDamageTypeInputNameAsc,
	SortFindManyDamageTypeInputNameDesc,
	SortFindManyDamageTypeInputURLAsc,
	SortFindManyDamageTypeInputURLDesc,
}

func (e SortFindManyDamageTypeInput) IsValid() bool {
	switch e {
	case SortFindManyDamageTypeInputIDAsc, SortFindManyDamageTypeInputIDDesc, SortFindManyDamageTypeInputDescAsc, SortFindManyDamageTypeInputDescDesc, SortFindManyDamageTypeInputIndexAsc, SortFindManyDamageTypeInputIndexDesc, SortFindManyDamageTypeInputNameAsc, SortFindManyDamageTypeInputNameDesc, SortFindManyDamageTypeInputURLAsc, SortFindManyDamageTypeInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyDamageTypeInput) String() string {
	return string(e)
}

func (e *SortFindManyDamageTypeInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyDamageTypeInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyDamageTypeInput", str)
	}
	return nil
}

func (e SortFindManyDamageTypeInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyEquipmentCategoryInput string

const (
	SortFindManyEquipmentCategoryInputIDAsc     SortFindManyEquipmentCategoryInput = "_ID_ASC"
	SortFindManyEquipmentCategoryInputIDDesc    SortFindManyEquipmentCategoryInput = "_ID_DESC"
	SortFindManyEquipmentCategoryInputIndexAsc  SortFindManyEquipmentCategoryInput = "INDEX_ASC"
	SortFindManyEquipmentCategoryInputIndexDesc SortFindManyEquipmentCategoryInput = "INDEX_DESC"
	SortFindManyEquipmentCategoryInputNameAsc   SortFindManyEquipmentCategoryInput = "NAME_ASC"
	SortFindManyEquipmentCategoryInputNameDesc  SortFindManyEquipmentCategoryInput = "NAME_DESC"
	SortFindManyEquipmentCategoryInputURLAsc    SortFindManyEquipmentCategoryInput = "URL_ASC"
	SortFindManyEquipmentCategoryInputURLDesc   SortFindManyEquipmentCategoryInput = "URL_DESC"
)

var AllSortFindManyEquipmentCategoryInput = []SortFindManyEquipmentCategoryInput{
	SortFindManyEquipmentCategoryInputIDAsc,
	SortFindManyEquipmentCategoryInputIDDesc,
	SortFindManyEquipmentCategoryInputIndexAsc,
	SortFindManyEquipmentCategoryInputIndexDesc,
	SortFindManyEquipmentCategoryInputNameAsc,
	SortFindManyEquipmentCategoryInputNameDesc,
	SortFindManyEquipmentCategoryInputURLAsc,
	SortFindManyEquipmentCategoryInputURLDesc,
}

func (e SortFindManyEquipmentCategoryInput) IsValid() bool {
	switch e {
	case SortFindManyEquipmentCategoryInputIDAsc, SortFindManyEquipmentCategoryInputIDDesc, SortFindManyEquipmentCategoryInputIndexAsc, SortFindManyEquipmentCategoryInputIndexDesc, SortFindManyEquipmentCategoryInputNameAsc, SortFindManyEquipmentCategoryInputNameDesc, SortFindManyEquipmentCategoryInputURLAsc, SortFindManyEquipmentCategoryInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyEquipmentCategoryInput) String() string {
	return string(e)
}

func (e *SortFindManyEquipmentCategoryInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyEquipmentCategoryInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyEquipmentCategoryInput", str)
	}
	return nil
}

func (e SortFindManyEquipmentCategoryInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyEquipmentInput string

const (
	SortFindManyEquipmentInputIDAsc                              SortFindManyEquipmentInput = "_ID_ASC"
	SortFindManyEquipmentInputIDDesc                             SortFindManyEquipmentInput = "_ID_DESC"
	SortFindManyEquipmentInputArmorCategoryAsc                   SortFindManyEquipmentInput = "ARMOR_CATEGORY_ASC"
	SortFindManyEquipmentInputArmorCategoryDesc                  SortFindManyEquipmentInput = "ARMOR_CATEGORY_DESC"
	SortFindManyEquipmentInputArmorClassBaseAsc                  SortFindManyEquipmentInput = "ARMOR_CLASS__BASE_ASC"
	SortFindManyEquipmentInputArmorClassBaseDesc                 SortFindManyEquipmentInput = "ARMOR_CLASS__BASE_DESC"
	SortFindManyEquipmentInputArmorClassDexBonusAsc              SortFindManyEquipmentInput = "ARMOR_CLASS__DEX_BONUS_ASC"
	SortFindManyEquipmentInputArmorClassDexBonusDesc             SortFindManyEquipmentInput = "ARMOR_CLASS__DEX_BONUS_DESC"
	SortFindManyEquipmentInputArmorClassMaxBonusAsc              SortFindManyEquipmentInput = "ARMOR_CLASS__MAX_BONUS_ASC"
	SortFindManyEquipmentInputArmorClassMaxBonusDesc             SortFindManyEquipmentInput = "ARMOR_CLASS__MAX_BONUS_DESC"
	SortFindManyEquipmentInputCapacityAsc                        SortFindManyEquipmentInput = "CAPACITY_ASC"
	SortFindManyEquipmentInputCapacityDesc                       SortFindManyEquipmentInput = "CAPACITY_DESC"
	SortFindManyEquipmentInputCategoryRangeAsc                   SortFindManyEquipmentInput = "CATEGORY_RANGE_ASC"
	SortFindManyEquipmentInputCategoryRangeDesc                  SortFindManyEquipmentInput = "CATEGORY_RANGE_DESC"
	SortFindManyEquipmentInputCostQuantityAsc                    SortFindManyEquipmentInput = "COST__QUANTITY_ASC"
	SortFindManyEquipmentInputCostQuantityDesc                   SortFindManyEquipmentInput = "COST__QUANTITY_DESC"
	SortFindManyEquipmentInputCostUnitAsc                        SortFindManyEquipmentInput = "COST__UNIT_ASC"
	SortFindManyEquipmentInputCostUnitDesc                       SortFindManyEquipmentInput = "COST__UNIT_DESC"
	SortFindManyEquipmentInputDamageDamageDiceAsc                SortFindManyEquipmentInput = "DAMAGE__DAMAGE_DICE_ASC"
	SortFindManyEquipmentInputDamageDamageDiceDesc               SortFindManyEquipmentInput = "DAMAGE__DAMAGE_DICE_DESC"
	SortFindManyEquipmentInputDamageDamageTypeIndexAsc           SortFindManyEquipmentInput = "DAMAGE__DAMAGE_TYPE__INDEX_ASC"
	SortFindManyEquipmentInputDamageDamageTypeIndexDesc          SortFindManyEquipmentInput = "DAMAGE__DAMAGE_TYPE__INDEX_DESC"
	SortFindManyEquipmentInputDamageDamageTypeNameAsc            SortFindManyEquipmentInput = "DAMAGE__DAMAGE_TYPE__NAME_ASC"
	SortFindManyEquipmentInputDamageDamageTypeNameDesc           SortFindManyEquipmentInput = "DAMAGE__DAMAGE_TYPE__NAME_DESC"
	SortFindManyEquipmentInputDamageDamageTypeURLAsc             SortFindManyEquipmentInput = "DAMAGE__DAMAGE_TYPE__URL_ASC"
	SortFindManyEquipmentInputDamageDamageTypeURLDesc            SortFindManyEquipmentInput = "DAMAGE__DAMAGE_TYPE__URL_DESC"
	SortFindManyEquipmentInputDescAsc                            SortFindManyEquipmentInput = "DESC_ASC"
	SortFindManyEquipmentInputDescDesc                           SortFindManyEquipmentInput = "DESC_DESC"
	SortFindManyEquipmentInputEquipmentCategoryIndexAsc          SortFindManyEquipmentInput = "EQUIPMENT_CATEGORY__INDEX_ASC"
	SortFindManyEquipmentInputEquipmentCategoryIndexDesc         SortFindManyEquipmentInput = "EQUIPMENT_CATEGORY__INDEX_DESC"
	SortFindManyEquipmentInputEquipmentCategoryNameAsc           SortFindManyEquipmentInput = "EQUIPMENT_CATEGORY__NAME_ASC"
	SortFindManyEquipmentInputEquipmentCategoryNameDesc          SortFindManyEquipmentInput = "EQUIPMENT_CATEGORY__NAME_DESC"
	SortFindManyEquipmentInputEquipmentCategoryURLAsc            SortFindManyEquipmentInput = "EQUIPMENT_CATEGORY__URL_ASC"
	SortFindManyEquipmentInputEquipmentCategoryURLDesc           SortFindManyEquipmentInput = "EQUIPMENT_CATEGORY__URL_DESC"
	SortFindManyEquipmentInputGearCategoryIndexAsc               SortFindManyEquipmentInput = "GEAR_CATEGORY__INDEX_ASC"
	SortFindManyEquipmentInputGearCategoryIndexDesc              SortFindManyEquipmentInput = "GEAR_CATEGORY__INDEX_DESC"
	SortFindManyEquipmentInputGearCategoryNameAsc                SortFindManyEquipmentInput = "GEAR_CATEGORY__NAME_ASC"
	SortFindManyEquipmentInputGearCategoryNameDesc               SortFindManyEquipmentInput = "GEAR_CATEGORY__NAME_DESC"
	SortFindManyEquipmentInputGearCategoryURLAsc                 SortFindManyEquipmentInput = "GEAR_CATEGORY__URL_ASC"
	SortFindManyEquipmentInputGearCategoryURLDesc                SortFindManyEquipmentInput = "GEAR_CATEGORY__URL_DESC"
	SortFindManyEquipmentInputIndexAsc                           SortFindManyEquipmentInput = "INDEX_ASC"
	SortFindManyEquipmentInputIndexDesc                          SortFindManyEquipmentInput = "INDEX_DESC"
	SortFindManyEquipmentInputNameAsc                            SortFindManyEquipmentInput = "NAME_ASC"
	SortFindManyEquipmentInputNameDesc                           SortFindManyEquipmentInput = "NAME_DESC"
	SortFindManyEquipmentInputQuantityAsc                        SortFindManyEquipmentInput = "QUANTITY_ASC"
	SortFindManyEquipmentInputQuantityDesc                       SortFindManyEquipmentInput = "QUANTITY_DESC"
	SortFindManyEquipmentInputRangeLongAsc                       SortFindManyEquipmentInput = "RANGE__LONG_ASC"
	SortFindManyEquipmentInputRangeLongDesc                      SortFindManyEquipmentInput = "RANGE__LONG_DESC"
	SortFindManyEquipmentInputRangeNormalAsc                     SortFindManyEquipmentInput = "RANGE__NORMAL_ASC"
	SortFindManyEquipmentInputRangeNormalDesc                    SortFindManyEquipmentInput = "RANGE__NORMAL_DESC"
	SortFindManyEquipmentInputSpecialAsc                         SortFindManyEquipmentInput = "SPECIAL_ASC"
	SortFindManyEquipmentInputSpecialDesc                        SortFindManyEquipmentInput = "SPECIAL_DESC"
	SortFindManyEquipmentInputSpeedQuantityAsc                   SortFindManyEquipmentInput = "SPEED__QUANTITY_ASC"
	SortFindManyEquipmentInputSpeedQuantityDesc                  SortFindManyEquipmentInput = "SPEED__QUANTITY_DESC"
	SortFindManyEquipmentInputSpeedUnitAsc                       SortFindManyEquipmentInput = "SPEED__UNIT_ASC"
	SortFindManyEquipmentInputSpeedUnitDesc                      SortFindManyEquipmentInput = "SPEED__UNIT_DESC"
	SortFindManyEquipmentInputStealthDisadvantageAsc             SortFindManyEquipmentInput = "STEALTH_DISADVANTAGE_ASC"
	SortFindManyEquipmentInputStealthDisadvantageDesc            SortFindManyEquipmentInput = "STEALTH_DISADVANTAGE_DESC"
	SortFindManyEquipmentInputStrMinimumAsc                      SortFindManyEquipmentInput = "STR_MINIMUM_ASC"
	SortFindManyEquipmentInputStrMinimumDesc                     SortFindManyEquipmentInput = "STR_MINIMUM_DESC"
	SortFindManyEquipmentInputThrowRangeLongAsc                  SortFindManyEquipmentInput = "THROW_RANGE__LONG_ASC"
	SortFindManyEquipmentInputThrowRangeLongDesc                 SortFindManyEquipmentInput = "THROW_RANGE__LONG_DESC"
	SortFindManyEquipmentInputThrowRangeNormalAsc                SortFindManyEquipmentInput = "THROW_RANGE__NORMAL_ASC"
	SortFindManyEquipmentInputThrowRangeNormalDesc               SortFindManyEquipmentInput = "THROW_RANGE__NORMAL_DESC"
	SortFindManyEquipmentInputToolCategoryAsc                    SortFindManyEquipmentInput = "TOOL_CATEGORY_ASC"
	SortFindManyEquipmentInputToolCategoryDesc                   SortFindManyEquipmentInput = "TOOL_CATEGORY_DESC"
	SortFindManyEquipmentInputTwoHandedDamageDamageDiceAsc       SortFindManyEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_DICE_ASC"
	SortFindManyEquipmentInputTwoHandedDamageDamageDiceDesc      SortFindManyEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_DICE_DESC"
	SortFindManyEquipmentInputTwoHandedDamageDamageTypeIndexAsc  SortFindManyEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_TYPE__INDEX_ASC"
	SortFindManyEquipmentInputTwoHandedDamageDamageTypeIndexDesc SortFindManyEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_TYPE__INDEX_DESC"
	SortFindManyEquipmentInputTwoHandedDamageDamageTypeNameAsc   SortFindManyEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_TYPE__NAME_ASC"
	SortFindManyEquipmentInputTwoHandedDamageDamageTypeNameDesc  SortFindManyEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_TYPE__NAME_DESC"
	SortFindManyEquipmentInputTwoHandedDamageDamageTypeURLAsc    SortFindManyEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_TYPE__URL_ASC"
	SortFindManyEquipmentInputTwoHandedDamageDamageTypeURLDesc   SortFindManyEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_TYPE__URL_DESC"
	SortFindManyEquipmentInputURLAsc                             SortFindManyEquipmentInput = "URL_ASC"
	SortFindManyEquipmentInputURLDesc                            SortFindManyEquipmentInput = "URL_DESC"
	SortFindManyEquipmentInputVehicleCategoryAsc                 SortFindManyEquipmentInput = "VEHICLE_CATEGORY_ASC"
	SortFindManyEquipmentInputVehicleCategoryDesc                SortFindManyEquipmentInput = "VEHICLE_CATEGORY_DESC"
	SortFindManyEquipmentInputWeaponCategoryAsc                  SortFindManyEquipmentInput = "WEAPON_CATEGORY_ASC"
	SortFindManyEquipmentInputWeaponCategoryDesc                 SortFindManyEquipmentInput = "WEAPON_CATEGORY_DESC"
	SortFindManyEquipmentInputWeaponRangeAsc                     SortFindManyEquipmentInput = "WEAPON_RANGE_ASC"
	SortFindManyEquipmentInputWeaponRangeDesc                    SortFindManyEquipmentInput = "WEAPON_RANGE_DESC"
	SortFindManyEquipmentInputWeightAsc                          SortFindManyEquipmentInput = "WEIGHT_ASC"
	SortFindManyEquipmentInputWeightDesc                         SortFindManyEquipmentInput = "WEIGHT_DESC"
)

var AllSortFindManyEquipmentInput = []SortFindManyEquipmentInput{
	SortFindManyEquipmentInputIDAsc,
	SortFindManyEquipmentInputIDDesc,
	SortFindManyEquipmentInputArmorCategoryAsc,
	SortFindManyEquipmentInputArmorCategoryDesc,
	SortFindManyEquipmentInputArmorClassBaseAsc,
	SortFindManyEquipmentInputArmorClassBaseDesc,
	SortFindManyEquipmentInputArmorClassDexBonusAsc,
	SortFindManyEquipmentInputArmorClassDexBonusDesc,
	SortFindManyEquipmentInputArmorClassMaxBonusAsc,
	SortFindManyEquipmentInputArmorClassMaxBonusDesc,
	SortFindManyEquipmentInputCapacityAsc,
	SortFindManyEquipmentInputCapacityDesc,
	SortFindManyEquipmentInputCategoryRangeAsc,
	SortFindManyEquipmentInputCategoryRangeDesc,
	SortFindManyEquipmentInputCostQuantityAsc,
	SortFindManyEquipmentInputCostQuantityDesc,
	SortFindManyEquipmentInputCostUnitAsc,
	SortFindManyEquipmentInputCostUnitDesc,
	SortFindManyEquipmentInputDamageDamageDiceAsc,
	SortFindManyEquipmentInputDamageDamageDiceDesc,
	SortFindManyEquipmentInputDamageDamageTypeIndexAsc,
	SortFindManyEquipmentInputDamageDamageTypeIndexDesc,
	SortFindManyEquipmentInputDamageDamageTypeNameAsc,
	SortFindManyEquipmentInputDamageDamageTypeNameDesc,
	SortFindManyEquipmentInputDamageDamageTypeURLAsc,
	SortFindManyEquipmentInputDamageDamageTypeURLDesc,
	SortFindManyEquipmentInputDescAsc,
	SortFindManyEquipmentInputDescDesc,
	SortFindManyEquipmentInputEquipmentCategoryIndexAsc,
	SortFindManyEquipmentInputEquipmentCategoryIndexDesc,
	SortFindManyEquipmentInputEquipmentCategoryNameAsc,
	SortFindManyEquipmentInputEquipmentCategoryNameDesc,
	SortFindManyEquipmentInputEquipmentCategoryURLAsc,
	SortFindManyEquipmentInputEquipmentCategoryURLDesc,
	SortFindManyEquipmentInputGearCategoryIndexAsc,
	SortFindManyEquipmentInputGearCategoryIndexDesc,
	SortFindManyEquipmentInputGearCategoryNameAsc,
	SortFindManyEquipmentInputGearCategoryNameDesc,
	SortFindManyEquipmentInputGearCategoryURLAsc,
	SortFindManyEquipmentInputGearCategoryURLDesc,
	SortFindManyEquipmentInputIndexAsc,
	SortFindManyEquipmentInputIndexDesc,
	SortFindManyEquipmentInputNameAsc,
	SortFindManyEquipmentInputNameDesc,
	SortFindManyEquipmentInputQuantityAsc,
	SortFindManyEquipmentInputQuantityDesc,
	SortFindManyEquipmentInputRangeLongAsc,
	SortFindManyEquipmentInputRangeLongDesc,
	SortFindManyEquipmentInputRangeNormalAsc,
	SortFindManyEquipmentInputRangeNormalDesc,
	SortFindManyEquipmentInputSpecialAsc,
	SortFindManyEquipmentInputSpecialDesc,
	SortFindManyEquipmentInputSpeedQuantityAsc,
	SortFindManyEquipmentInputSpeedQuantityDesc,
	SortFindManyEquipmentInputSpeedUnitAsc,
	SortFindManyEquipmentInputSpeedUnitDesc,
	SortFindManyEquipmentInputStealthDisadvantageAsc,
	SortFindManyEquipmentInputStealthDisadvantageDesc,
	SortFindManyEquipmentInputStrMinimumAsc,
	SortFindManyEquipmentInputStrMinimumDesc,
	SortFindManyEquipmentInputThrowRangeLongAsc,
	SortFindManyEquipmentInputThrowRangeLongDesc,
	SortFindManyEquipmentInputThrowRangeNormalAsc,
	SortFindManyEquipmentInputThrowRangeNormalDesc,
	SortFindManyEquipmentInputToolCategoryAsc,
	SortFindManyEquipmentInputToolCategoryDesc,
	SortFindManyEquipmentInputTwoHandedDamageDamageDiceAsc,
	SortFindManyEquipmentInputTwoHandedDamageDamageDiceDesc,
	SortFindManyEquipmentInputTwoHandedDamageDamageTypeIndexAsc,
	SortFindManyEquipmentInputTwoHandedDamageDamageTypeIndexDesc,
	SortFindManyEquipmentInputTwoHandedDamageDamageTypeNameAsc,
	SortFindManyEquipmentInputTwoHandedDamageDamageTypeNameDesc,
	SortFindManyEquipmentInputTwoHandedDamageDamageTypeURLAsc,
	SortFindManyEquipmentInputTwoHandedDamageDamageTypeURLDesc,
	SortFindManyEquipmentInputURLAsc,
	SortFindManyEquipmentInputURLDesc,
	SortFindManyEquipmentInputVehicleCategoryAsc,
	SortFindManyEquipmentInputVehicleCategoryDesc,
	SortFindManyEquipmentInputWeaponCategoryAsc,
	SortFindManyEquipmentInputWeaponCategoryDesc,
	SortFindManyEquipmentInputWeaponRangeAsc,
	SortFindManyEquipmentInputWeaponRangeDesc,
	SortFindManyEquipmentInputWeightAsc,
	SortFindManyEquipmentInputWeightDesc,
}

func (e SortFindManyEquipmentInput) IsValid() bool {
	switch e {
	case SortFindManyEquipmentInputIDAsc, SortFindManyEquipmentInputIDDesc, SortFindManyEquipmentInputArmorCategoryAsc, SortFindManyEquipmentInputArmorCategoryDesc, SortFindManyEquipmentInputArmorClassBaseAsc, SortFindManyEquipmentInputArmorClassBaseDesc, SortFindManyEquipmentInputArmorClassDexBonusAsc, SortFindManyEquipmentInputArmorClassDexBonusDesc, SortFindManyEquipmentInputArmorClassMaxBonusAsc, SortFindManyEquipmentInputArmorClassMaxBonusDesc, SortFindManyEquipmentInputCapacityAsc, SortFindManyEquipmentInputCapacityDesc, SortFindManyEquipmentInputCategoryRangeAsc, SortFindManyEquipmentInputCategoryRangeDesc, SortFindManyEquipmentInputCostQuantityAsc, SortFindManyEquipmentInputCostQuantityDesc, SortFindManyEquipmentInputCostUnitAsc, SortFindManyEquipmentInputCostUnitDesc, SortFindManyEquipmentInputDamageDamageDiceAsc, SortFindManyEquipmentInputDamageDamageDiceDesc, SortFindManyEquipmentInputDamageDamageTypeIndexAsc, SortFindManyEquipmentInputDamageDamageTypeIndexDesc, SortFindManyEquipmentInputDamageDamageTypeNameAsc, SortFindManyEquipmentInputDamageDamageTypeNameDesc, SortFindManyEquipmentInputDamageDamageTypeURLAsc, SortFindManyEquipmentInputDamageDamageTypeURLDesc, SortFindManyEquipmentInputDescAsc, SortFindManyEquipmentInputDescDesc, SortFindManyEquipmentInputEquipmentCategoryIndexAsc, SortFindManyEquipmentInputEquipmentCategoryIndexDesc, SortFindManyEquipmentInputEquipmentCategoryNameAsc, SortFindManyEquipmentInputEquipmentCategoryNameDesc, SortFindManyEquipmentInputEquipmentCategoryURLAsc, SortFindManyEquipmentInputEquipmentCategoryURLDesc, SortFindManyEquipmentInputGearCategoryIndexAsc, SortFindManyEquipmentInputGearCategoryIndexDesc, SortFindManyEquipmentInputGearCategoryNameAsc, SortFindManyEquipmentInputGearCategoryNameDesc, SortFindManyEquipmentInputGearCategoryURLAsc, SortFindManyEquipmentInputGearCategoryURLDesc, SortFindManyEquipmentInputIndexAsc, SortFindManyEquipmentInputIndexDesc, SortFindManyEquipmentInputNameAsc, SortFindManyEquipmentInputNameDesc, SortFindManyEquipmentInputQuantityAsc, SortFindManyEquipmentInputQuantityDesc, SortFindManyEquipmentInputRangeLongAsc, SortFindManyEquipmentInputRangeLongDesc, SortFindManyEquipmentInputRangeNormalAsc, SortFindManyEquipmentInputRangeNormalDesc, SortFindManyEquipmentInputSpecialAsc, SortFindManyEquipmentInputSpecialDesc, SortFindManyEquipmentInputSpeedQuantityAsc, SortFindManyEquipmentInputSpeedQuantityDesc, SortFindManyEquipmentInputSpeedUnitAsc, SortFindManyEquipmentInputSpeedUnitDesc, SortFindManyEquipmentInputStealthDisadvantageAsc, SortFindManyEquipmentInputStealthDisadvantageDesc, SortFindManyEquipmentInputStrMinimumAsc, SortFindManyEquipmentInputStrMinimumDesc, SortFindManyEquipmentInputThrowRangeLongAsc, SortFindManyEquipmentInputThrowRangeLongDesc, SortFindManyEquipmentInputThrowRangeNormalAsc, SortFindManyEquipmentInputThrowRangeNormalDesc, SortFindManyEquipmentInputToolCategoryAsc, SortFindManyEquipmentInputToolCategoryDesc, SortFindManyEquipmentInputTwoHandedDamageDamageDiceAsc, SortFindManyEquipmentInputTwoHandedDamageDamageDiceDesc, SortFindManyEquipmentInputTwoHandedDamageDamageTypeIndexAsc, SortFindManyEquipmentInputTwoHandedDamageDamageTypeIndexDesc, SortFindManyEquipmentInputTwoHandedDamageDamageTypeNameAsc, SortFindManyEquipmentInputTwoHandedDamageDamageTypeNameDesc, SortFindManyEquipmentInputTwoHandedDamageDamageTypeURLAsc, SortFindManyEquipmentInputTwoHandedDamageDamageTypeURLDesc, SortFindManyEquipmentInputURLAsc, SortFindManyEquipmentInputURLDesc, SortFindManyEquipmentInputVehicleCategoryAsc, SortFindManyEquipmentInputVehicleCategoryDesc, SortFindManyEquipmentInputWeaponCategoryAsc, SortFindManyEquipmentInputWeaponCategoryDesc, SortFindManyEquipmentInputWeaponRangeAsc, SortFindManyEquipmentInputWeaponRangeDesc, SortFindManyEquipmentInputWeightAsc, SortFindManyEquipmentInputWeightDesc:
		return true
	}
	return false
}

func (e SortFindManyEquipmentInput) String() string {
	return string(e)
}

func (e *SortFindManyEquipmentInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyEquipmentInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyEquipmentInput", str)
	}
	return nil
}

func (e SortFindManyEquipmentInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyFeatInput string

const (
	SortFindManyFeatInputIDAsc     SortFindManyFeatInput = "_ID_ASC"
	SortFindManyFeatInputIDDesc    SortFindManyFeatInput = "_ID_DESC"
	SortFindManyFeatInputIndexAsc  SortFindManyFeatInput = "INDEX_ASC"
	SortFindManyFeatInputIndexDesc SortFindManyFeatInput = "INDEX_DESC"
	SortFindManyFeatInputNameAsc   SortFindManyFeatInput = "NAME_ASC"
	SortFindManyFeatInputNameDesc  SortFindManyFeatInput = "NAME_DESC"
	SortFindManyFeatInputDescAsc   SortFindManyFeatInput = "DESC_ASC"
	SortFindManyFeatInputDescDesc  SortFindManyFeatInput = "DESC_DESC"
	SortFindManyFeatInputURLAsc    SortFindManyFeatInput = "URL_ASC"
	SortFindManyFeatInputURLDesc   SortFindManyFeatInput = "URL_DESC"
)

var AllSortFindManyFeatInput = []SortFindManyFeatInput{
	SortFindManyFeatInputIDAsc,
	SortFindManyFeatInputIDDesc,
	SortFindManyFeatInputIndexAsc,
	SortFindManyFeatInputIndexDesc,
	SortFindManyFeatInputNameAsc,
	SortFindManyFeatInputNameDesc,
	SortFindManyFeatInputDescAsc,
	SortFindManyFeatInputDescDesc,
	SortFindManyFeatInputURLAsc,
	SortFindManyFeatInputURLDesc,
}

func (e SortFindManyFeatInput) IsValid() bool {
	switch e {
	case SortFindManyFeatInputIDAsc, SortFindManyFeatInputIDDesc, SortFindManyFeatInputIndexAsc, SortFindManyFeatInputIndexDesc, SortFindManyFeatInputNameAsc, SortFindManyFeatInputNameDesc, SortFindManyFeatInputDescAsc, SortFindManyFeatInputDescDesc, SortFindManyFeatInputURLAsc, SortFindManyFeatInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyFeatInput) String() string {
	return string(e)
}

func (e *SortFindManyFeatInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyFeatInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyFeatInput", str)
	}
	return nil
}

func (e SortFindManyFeatInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyFeatureInput string

const (
	SortFindManyFeatureInputIDAsc                                      SortFindManyFeatureInput = "_ID_ASC"
	SortFindManyFeatureInputIDDesc                                     SortFindManyFeatureInput = "_ID_DESC"
	SortFindManyFeatureInputChoiceChooseAsc                            SortFindManyFeatureInput = "CHOICE__CHOOSE_ASC"
	SortFindManyFeatureInputChoiceChooseDesc                           SortFindManyFeatureInput = "CHOICE__CHOOSE_DESC"
	SortFindManyFeatureInputChoiceTypeAsc                              SortFindManyFeatureInput = "CHOICE__TYPE_ASC"
	SortFindManyFeatureInputChoiceTypeDesc                             SortFindManyFeatureInput = "CHOICE__TYPE_DESC"
	SortFindManyFeatureInputClassIndexAsc                              SortFindManyFeatureInput = "CLASS__INDEX_ASC"
	SortFindManyFeatureInputClassIndexDesc                             SortFindManyFeatureInput = "CLASS__INDEX_DESC"
	SortFindManyFeatureInputClassNameAsc                               SortFindManyFeatureInput = "CLASS__NAME_ASC"
	SortFindManyFeatureInputClassNameDesc                              SortFindManyFeatureInput = "CLASS__NAME_DESC"
	SortFindManyFeatureInputClassURLAsc                                SortFindManyFeatureInput = "CLASS__URL_ASC"
	SortFindManyFeatureInputClassURLDesc                               SortFindManyFeatureInput = "CLASS__URL_DESC"
	SortFindManyFeatureInputDescAsc                                    SortFindManyFeatureInput = "DESC_ASC"
	SortFindManyFeatureInputDescDesc                                   SortFindManyFeatureInput = "DESC_DESC"
	SortFindManyFeatureInputParentIndexAsc                             SortFindManyFeatureInput = "PARENT__INDEX_ASC"
	SortFindManyFeatureInputParentIndexDesc                            SortFindManyFeatureInput = "PARENT__INDEX_DESC"
	SortFindManyFeatureInputParentNameAsc                              SortFindManyFeatureInput = "PARENT__NAME_ASC"
	SortFindManyFeatureInputParentNameDesc                             SortFindManyFeatureInput = "PARENT__NAME_DESC"
	SortFindManyFeatureInputParentURLAsc                               SortFindManyFeatureInput = "PARENT__URL_ASC"
	SortFindManyFeatureInputParentURLDesc                              SortFindManyFeatureInput = "PARENT__URL_DESC"
	SortFindManyFeatureInputIndexAsc                                   SortFindManyFeatureInput = "INDEX_ASC"
	SortFindManyFeatureInputIndexDesc                                  SortFindManyFeatureInput = "INDEX_DESC"
	SortFindManyFeatureInputLevelAsc                                   SortFindManyFeatureInput = "LEVEL_ASC"
	SortFindManyFeatureInputLevelDesc                                  SortFindManyFeatureInput = "LEVEL_DESC"
	SortFindManyFeatureInputNameAsc                                    SortFindManyFeatureInput = "NAME_ASC"
	SortFindManyFeatureInputNameDesc                                   SortFindManyFeatureInput = "NAME_DESC"
	SortFindManyFeatureInputReferenceAsc                               SortFindManyFeatureInput = "REFERENCE_ASC"
	SortFindManyFeatureInputReferenceDesc                              SortFindManyFeatureInput = "REFERENCE_DESC"
	SortFindManyFeatureInputSubclassIndexAsc                           SortFindManyFeatureInput = "SUBCLASS__INDEX_ASC"
	SortFindManyFeatureInputSubclassIndexDesc                          SortFindManyFeatureInput = "SUBCLASS__INDEX_DESC"
	SortFindManyFeatureInputSubclassNameAsc                            SortFindManyFeatureInput = "SUBCLASS__NAME_ASC"
	SortFindManyFeatureInputSubclassNameDesc                           SortFindManyFeatureInput = "SUBCLASS__NAME_DESC"
	SortFindManyFeatureInputSubclassURLAsc                             SortFindManyFeatureInput = "SUBCLASS__URL_ASC"
	SortFindManyFeatureInputSubclassURLDesc                            SortFindManyFeatureInput = "SUBCLASS__URL_DESC"
	SortFindManyFeatureInputFeatureSpecificSubfeatureOptionsChooseAsc  SortFindManyFeatureInput = "FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__CHOOSE_ASC"
	SortFindManyFeatureInputFeatureSpecificSubfeatureOptionsChooseDesc SortFindManyFeatureInput = "FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__CHOOSE_DESC"
	SortFindManyFeatureInputFeatureSpecificSubfeatureOptionsTypeAsc    SortFindManyFeatureInput = "FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__TYPE_ASC"
	SortFindManyFeatureInputFeatureSpecificSubfeatureOptionsTypeDesc   SortFindManyFeatureInput = "FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__TYPE_DESC"
	SortFindManyFeatureInputFeatureSpecificExpertiseOptionsChooseAsc   SortFindManyFeatureInput = "FEATURE_SPECIFIC__EXPERTISE_OPTIONS__CHOOSE_ASC"
	SortFindManyFeatureInputFeatureSpecificExpertiseOptionsChooseDesc  SortFindManyFeatureInput = "FEATURE_SPECIFIC__EXPERTISE_OPTIONS__CHOOSE_DESC"
	SortFindManyFeatureInputFeatureSpecificExpertiseOptionsTypeAsc     SortFindManyFeatureInput = "FEATURE_SPECIFIC__EXPERTISE_OPTIONS__TYPE_ASC"
	SortFindManyFeatureInputFeatureSpecificExpertiseOptionsTypeDesc    SortFindManyFeatureInput = "FEATURE_SPECIFIC__EXPERTISE_OPTIONS__TYPE_DESC"
	SortFindManyFeatureInputURLAsc                                     SortFindManyFeatureInput = "URL_ASC"
	SortFindManyFeatureInputURLDesc                                    SortFindManyFeatureInput = "URL_DESC"
)

var AllSortFindManyFeatureInput = []SortFindManyFeatureInput{
	SortFindManyFeatureInputIDAsc,
	SortFindManyFeatureInputIDDesc,
	SortFindManyFeatureInputChoiceChooseAsc,
	SortFindManyFeatureInputChoiceChooseDesc,
	SortFindManyFeatureInputChoiceTypeAsc,
	SortFindManyFeatureInputChoiceTypeDesc,
	SortFindManyFeatureInputClassIndexAsc,
	SortFindManyFeatureInputClassIndexDesc,
	SortFindManyFeatureInputClassNameAsc,
	SortFindManyFeatureInputClassNameDesc,
	SortFindManyFeatureInputClassURLAsc,
	SortFindManyFeatureInputClassURLDesc,
	SortFindManyFeatureInputDescAsc,
	SortFindManyFeatureInputDescDesc,
	SortFindManyFeatureInputParentIndexAsc,
	SortFindManyFeatureInputParentIndexDesc,
	SortFindManyFeatureInputParentNameAsc,
	SortFindManyFeatureInputParentNameDesc,
	SortFindManyFeatureInputParentURLAsc,
	SortFindManyFeatureInputParentURLDesc,
	SortFindManyFeatureInputIndexAsc,
	SortFindManyFeatureInputIndexDesc,
	SortFindManyFeatureInputLevelAsc,
	SortFindManyFeatureInputLevelDesc,
	SortFindManyFeatureInputNameAsc,
	SortFindManyFeatureInputNameDesc,
	SortFindManyFeatureInputReferenceAsc,
	SortFindManyFeatureInputReferenceDesc,
	SortFindManyFeatureInputSubclassIndexAsc,
	SortFindManyFeatureInputSubclassIndexDesc,
	SortFindManyFeatureInputSubclassNameAsc,
	SortFindManyFeatureInputSubclassNameDesc,
	SortFindManyFeatureInputSubclassURLAsc,
	SortFindManyFeatureInputSubclassURLDesc,
	SortFindManyFeatureInputFeatureSpecificSubfeatureOptionsChooseAsc,
	SortFindManyFeatureInputFeatureSpecificSubfeatureOptionsChooseDesc,
	SortFindManyFeatureInputFeatureSpecificSubfeatureOptionsTypeAsc,
	SortFindManyFeatureInputFeatureSpecificSubfeatureOptionsTypeDesc,
	SortFindManyFeatureInputFeatureSpecificExpertiseOptionsChooseAsc,
	SortFindManyFeatureInputFeatureSpecificExpertiseOptionsChooseDesc,
	SortFindManyFeatureInputFeatureSpecificExpertiseOptionsTypeAsc,
	SortFindManyFeatureInputFeatureSpecificExpertiseOptionsTypeDesc,
	SortFindManyFeatureInputURLAsc,
	SortFindManyFeatureInputURLDesc,
}

func (e SortFindManyFeatureInput) IsValid() bool {
	switch e {
	case SortFindManyFeatureInputIDAsc, SortFindManyFeatureInputIDDesc, SortFindManyFeatureInputChoiceChooseAsc, SortFindManyFeatureInputChoiceChooseDesc, SortFindManyFeatureInputChoiceTypeAsc, SortFindManyFeatureInputChoiceTypeDesc, SortFindManyFeatureInputClassIndexAsc, SortFindManyFeatureInputClassIndexDesc, SortFindManyFeatureInputClassNameAsc, SortFindManyFeatureInputClassNameDesc, SortFindManyFeatureInputClassURLAsc, SortFindManyFeatureInputClassURLDesc, SortFindManyFeatureInputDescAsc, SortFindManyFeatureInputDescDesc, SortFindManyFeatureInputParentIndexAsc, SortFindManyFeatureInputParentIndexDesc, SortFindManyFeatureInputParentNameAsc, SortFindManyFeatureInputParentNameDesc, SortFindManyFeatureInputParentURLAsc, SortFindManyFeatureInputParentURLDesc, SortFindManyFeatureInputIndexAsc, SortFindManyFeatureInputIndexDesc, SortFindManyFeatureInputLevelAsc, SortFindManyFeatureInputLevelDesc, SortFindManyFeatureInputNameAsc, SortFindManyFeatureInputNameDesc, SortFindManyFeatureInputReferenceAsc, SortFindManyFeatureInputReferenceDesc, SortFindManyFeatureInputSubclassIndexAsc, SortFindManyFeatureInputSubclassIndexDesc, SortFindManyFeatureInputSubclassNameAsc, SortFindManyFeatureInputSubclassNameDesc, SortFindManyFeatureInputSubclassURLAsc, SortFindManyFeatureInputSubclassURLDesc, SortFindManyFeatureInputFeatureSpecificSubfeatureOptionsChooseAsc, SortFindManyFeatureInputFeatureSpecificSubfeatureOptionsChooseDesc, SortFindManyFeatureInputFeatureSpecificSubfeatureOptionsTypeAsc, SortFindManyFeatureInputFeatureSpecificSubfeatureOptionsTypeDesc, SortFindManyFeatureInputFeatureSpecificExpertiseOptionsChooseAsc, SortFindManyFeatureInputFeatureSpecificExpertiseOptionsChooseDesc, SortFindManyFeatureInputFeatureSpecificExpertiseOptionsTypeAsc, SortFindManyFeatureInputFeatureSpecificExpertiseOptionsTypeDesc, SortFindManyFeatureInputURLAsc, SortFindManyFeatureInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyFeatureInput) String() string {
	return string(e)
}

func (e *SortFindManyFeatureInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyFeatureInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyFeatureInput", str)
	}
	return nil
}

func (e SortFindManyFeatureInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyLanguageInput string

const (
	SortFindManyLanguageInputIDAsc               SortFindManyLanguageInput = "_ID_ASC"
	SortFindManyLanguageInputIDDesc              SortFindManyLanguageInput = "_ID_DESC"
	SortFindManyLanguageInputDescAsc             SortFindManyLanguageInput = "DESC_ASC"
	SortFindManyLanguageInputDescDesc            SortFindManyLanguageInput = "DESC_DESC"
	SortFindManyLanguageInputIndexAsc            SortFindManyLanguageInput = "INDEX_ASC"
	SortFindManyLanguageInputIndexDesc           SortFindManyLanguageInput = "INDEX_DESC"
	SortFindManyLanguageInputNameAsc             SortFindManyLanguageInput = "NAME_ASC"
	SortFindManyLanguageInputNameDesc            SortFindManyLanguageInput = "NAME_DESC"
	SortFindManyLanguageInputScriptAsc           SortFindManyLanguageInput = "SCRIPT_ASC"
	SortFindManyLanguageInputScriptDesc          SortFindManyLanguageInput = "SCRIPT_DESC"
	SortFindManyLanguageInputTypeAsc             SortFindManyLanguageInput = "TYPE_ASC"
	SortFindManyLanguageInputTypeDesc            SortFindManyLanguageInput = "TYPE_DESC"
	SortFindManyLanguageInputTypicalSpeakersAsc  SortFindManyLanguageInput = "TYPICAL_SPEAKERS_ASC"
	SortFindManyLanguageInputTypicalSpeakersDesc SortFindManyLanguageInput = "TYPICAL_SPEAKERS_DESC"
	SortFindManyLanguageInputURLAsc              SortFindManyLanguageInput = "URL_ASC"
	SortFindManyLanguageInputURLDesc             SortFindManyLanguageInput = "URL_DESC"
)

var AllSortFindManyLanguageInput = []SortFindManyLanguageInput{
	SortFindManyLanguageInputIDAsc,
	SortFindManyLanguageInputIDDesc,
	SortFindManyLanguageInputDescAsc,
	SortFindManyLanguageInputDescDesc,
	SortFindManyLanguageInputIndexAsc,
	SortFindManyLanguageInputIndexDesc,
	SortFindManyLanguageInputNameAsc,
	SortFindManyLanguageInputNameDesc,
	SortFindManyLanguageInputScriptAsc,
	SortFindManyLanguageInputScriptDesc,
	SortFindManyLanguageInputTypeAsc,
	SortFindManyLanguageInputTypeDesc,
	SortFindManyLanguageInputTypicalSpeakersAsc,
	SortFindManyLanguageInputTypicalSpeakersDesc,
	SortFindManyLanguageInputURLAsc,
	SortFindManyLanguageInputURLDesc,
}

func (e SortFindManyLanguageInput) IsValid() bool {
	switch e {
	case SortFindManyLanguageInputIDAsc, SortFindManyLanguageInputIDDesc, SortFindManyLanguageInputDescAsc, SortFindManyLanguageInputDescDesc, SortFindManyLanguageInputIndexAsc, SortFindManyLanguageInputIndexDesc, SortFindManyLanguageInputNameAsc, SortFindManyLanguageInputNameDesc, SortFindManyLanguageInputScriptAsc, SortFindManyLanguageInputScriptDesc, SortFindManyLanguageInputTypeAsc, SortFindManyLanguageInputTypeDesc, SortFindManyLanguageInputTypicalSpeakersAsc, SortFindManyLanguageInputTypicalSpeakersDesc, SortFindManyLanguageInputURLAsc, SortFindManyLanguageInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyLanguageInput) String() string {
	return string(e)
}

func (e *SortFindManyLanguageInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyLanguageInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyLanguageInput", str)
	}
	return nil
}

func (e SortFindManyLanguageInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyLevelInput string

const (
	SortFindManyLevelInputIDAsc                                              SortFindManyLevelInput = "_ID_ASC"
	SortFindManyLevelInputIDDesc                                             SortFindManyLevelInput = "_ID_DESC"
	SortFindManyLevelInputAbilityScoreBonusesAsc                             SortFindManyLevelInput = "ABILITY_SCORE_BONUSES_ASC"
	SortFindManyLevelInputAbilityScoreBonusesDesc                            SortFindManyLevelInput = "ABILITY_SCORE_BONUSES_DESC"
	SortFindManyLevelInputClassIndexAsc                                      SortFindManyLevelInput = "CLASS__INDEX_ASC"
	SortFindManyLevelInputClassIndexDesc                                     SortFindManyLevelInput = "CLASS__INDEX_DESC"
	SortFindManyLevelInputClassNameAsc                                       SortFindManyLevelInput = "CLASS__NAME_ASC"
	SortFindManyLevelInputClassNameDesc                                      SortFindManyLevelInput = "CLASS__NAME_DESC"
	SortFindManyLevelInputClassURLAsc                                        SortFindManyLevelInput = "CLASS__URL_ASC"
	SortFindManyLevelInputClassURLDesc                                       SortFindManyLevelInput = "CLASS__URL_DESC"
	SortFindManyLevelInputClassSpecificActionSurgesAsc                       SortFindManyLevelInput = "CLASS_SPECIFIC__ACTION_SURGES_ASC"
	SortFindManyLevelInputClassSpecificActionSurgesDesc                      SortFindManyLevelInput = "CLASS_SPECIFIC__ACTION_SURGES_DESC"
	SortFindManyLevelInputClassSpecificArcaneRecoveryLevelsAsc               SortFindManyLevelInput = "CLASS_SPECIFIC__ARCANE_RECOVERY_LEVELS_ASC"
	SortFindManyLevelInputClassSpecificArcaneRecoveryLevelsDesc              SortFindManyLevelInput = "CLASS_SPECIFIC__ARCANE_RECOVERY_LEVELS_DESC"
	SortFindManyLevelInputClassSpecificAuraRangeAsc                          SortFindManyLevelInput = "CLASS_SPECIFIC__AURA_RANGE_ASC"
	SortFindManyLevelInputClassSpecificAuraRangeDesc                         SortFindManyLevelInput = "CLASS_SPECIFIC__AURA_RANGE_DESC"
	SortFindManyLevelInputClassSpecificBardicInspirationDieAsc               SortFindManyLevelInput = "CLASS_SPECIFIC__BARDIC_INSPIRATION_DIE_ASC"
	SortFindManyLevelInputClassSpecificBardicInspirationDieDesc              SortFindManyLevelInput = "CLASS_SPECIFIC__BARDIC_INSPIRATION_DIE_DESC"
	SortFindManyLevelInputClassSpecificBrutalCriticalDiceAsc                 SortFindManyLevelInput = "CLASS_SPECIFIC__BRUTAL_CRITICAL_DICE_ASC"
	SortFindManyLevelInputClassSpecificBrutalCriticalDiceDesc                SortFindManyLevelInput = "CLASS_SPECIFIC__BRUTAL_CRITICAL_DICE_DESC"
	SortFindManyLevelInputClassSpecificChannelDivinityChargesAsc             SortFindManyLevelInput = "CLASS_SPECIFIC__CHANNEL_DIVINITY_CHARGES_ASC"
	SortFindManyLevelInputClassSpecificChannelDivinityChargesDesc            SortFindManyLevelInput = "CLASS_SPECIFIC__CHANNEL_DIVINITY_CHARGES_DESC"
	SortFindManyLevelInputClassSpecificDestroyUndeadCrAsc                    SortFindManyLevelInput = "CLASS_SPECIFIC__DESTROY_UNDEAD_CR_ASC"
	SortFindManyLevelInputClassSpecificDestroyUndeadCrDesc                   SortFindManyLevelInput = "CLASS_SPECIFIC__DESTROY_UNDEAD_CR_DESC"
	SortFindManyLevelInputClassSpecificExtraAttacksAsc                       SortFindManyLevelInput = "CLASS_SPECIFIC__EXTRA_ATTACKS_ASC"
	SortFindManyLevelInputClassSpecificExtraAttacksDesc                      SortFindManyLevelInput = "CLASS_SPECIFIC__EXTRA_ATTACKS_DESC"
	SortFindManyLevelInputClassSpecificFavoredEnemiesAsc                     SortFindManyLevelInput = "CLASS_SPECIFIC__FAVORED_ENEMIES_ASC"
	SortFindManyLevelInputClassSpecificFavoredEnemiesDesc                    SortFindManyLevelInput = "CLASS_SPECIFIC__FAVORED_ENEMIES_DESC"
	SortFindManyLevelInputClassSpecificFavoredTerrainAsc                     SortFindManyLevelInput = "CLASS_SPECIFIC__FAVORED_TERRAIN_ASC"
	SortFindManyLevelInputClassSpecificFavoredTerrainDesc                    SortFindManyLevelInput = "CLASS_SPECIFIC__FAVORED_TERRAIN_DESC"
	SortFindManyLevelInputClassSpecificIndomitableUsesAsc                    SortFindManyLevelInput = "CLASS_SPECIFIC__INDOMITABLE_USES_ASC"
	SortFindManyLevelInputClassSpecificIndomitableUsesDesc                   SortFindManyLevelInput = "CLASS_SPECIFIC__INDOMITABLE_USES_DESC"
	SortFindManyLevelInputClassSpecificInvocationsKnownAsc                   SortFindManyLevelInput = "CLASS_SPECIFIC__INVOCATIONS_KNOWN_ASC"
	SortFindManyLevelInputClassSpecificInvocationsKnownDesc                  SortFindManyLevelInput = "CLASS_SPECIFIC__INVOCATIONS_KNOWN_DESC"
	SortFindManyLevelInputClassSpecificKiPointsAsc                           SortFindManyLevelInput = "CLASS_SPECIFIC__KI_POINTS_ASC"
	SortFindManyLevelInputClassSpecificKiPointsDesc                          SortFindManyLevelInput = "CLASS_SPECIFIC__KI_POINTS_DESC"
	SortFindManyLevelInputClassSpecificMagicalSecretsMax5Asc                 SortFindManyLevelInput = "CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_5_ASC"
	SortFindManyLevelInputClassSpecificMagicalSecretsMax5Desc                SortFindManyLevelInput = "CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_5_DESC"
	SortFindManyLevelInputClassSpecificMagicalSecretsMax7Asc                 SortFindManyLevelInput = "CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_7_ASC"
	SortFindManyLevelInputClassSpecificMagicalSecretsMax7Desc                SortFindManyLevelInput = "CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_7_DESC"
	SortFindManyLevelInputClassSpecificMagicalSecretsMax9Asc                 SortFindManyLevelInput = "CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_9_ASC"
	SortFindManyLevelInputClassSpecificMagicalSecretsMax9Desc                SortFindManyLevelInput = "CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_9_DESC"
	SortFindManyLevelInputClassSpecificMartialArtsDiceCountAsc               SortFindManyLevelInput = "CLASS_SPECIFIC__MARTIAL_ARTS__DICE_COUNT_ASC"
	SortFindManyLevelInputClassSpecificMartialArtsDiceCountDesc              SortFindManyLevelInput = "CLASS_SPECIFIC__MARTIAL_ARTS__DICE_COUNT_DESC"
	SortFindManyLevelInputClassSpecificMartialArtsDiceValueAsc               SortFindManyLevelInput = "CLASS_SPECIFIC__MARTIAL_ARTS__DICE_VALUE_ASC"
	SortFindManyLevelInputClassSpecificMartialArtsDiceValueDesc              SortFindManyLevelInput = "CLASS_SPECIFIC__MARTIAL_ARTS__DICE_VALUE_DESC"
	SortFindManyLevelInputClassSpecificMetamagicKnownAsc                     SortFindManyLevelInput = "CLASS_SPECIFIC__METAMAGIC_KNOWN_ASC"
	SortFindManyLevelInputClassSpecificMetamagicKnownDesc                    SortFindManyLevelInput = "CLASS_SPECIFIC__METAMAGIC_KNOWN_DESC"
	SortFindManyLevelInputClassSpecificMysticArcanumLevel6Asc                SortFindManyLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_6_ASC"
	SortFindManyLevelInputClassSpecificMysticArcanumLevel6Desc               SortFindManyLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_6_DESC"
	SortFindManyLevelInputClassSpecificMysticArcanumLevel7Asc                SortFindManyLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_7_ASC"
	SortFindManyLevelInputClassSpecificMysticArcanumLevel7Desc               SortFindManyLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_7_DESC"
	SortFindManyLevelInputClassSpecificMysticArcanumLevel8Asc                SortFindManyLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_8_ASC"
	SortFindManyLevelInputClassSpecificMysticArcanumLevel8Desc               SortFindManyLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_8_DESC"
	SortFindManyLevelInputClassSpecificMysticArcanumLevel9Asc                SortFindManyLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_9_ASC"
	SortFindManyLevelInputClassSpecificMysticArcanumLevel9Desc               SortFindManyLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_9_DESC"
	SortFindManyLevelInputClassSpecificRageCountAsc                          SortFindManyLevelInput = "CLASS_SPECIFIC__RAGE_COUNT_ASC"
	SortFindManyLevelInputClassSpecificRageCountDesc                         SortFindManyLevelInput = "CLASS_SPECIFIC__RAGE_COUNT_DESC"
	SortFindManyLevelInputClassSpecificRageDamageBonusAsc                    SortFindManyLevelInput = "CLASS_SPECIFIC__RAGE_DAMAGE_BONUS_ASC"
	SortFindManyLevelInputClassSpecificRageDamageBonusDesc                   SortFindManyLevelInput = "CLASS_SPECIFIC__RAGE_DAMAGE_BONUS_DESC"
	SortFindManyLevelInputClassSpecificSneakAttackDiceCountAsc               SortFindManyLevelInput = "CLASS_SPECIFIC__SNEAK_ATTACK__DICE_COUNT_ASC"
	SortFindManyLevelInputClassSpecificSneakAttackDiceCountDesc              SortFindManyLevelInput = "CLASS_SPECIFIC__SNEAK_ATTACK__DICE_COUNT_DESC"
	SortFindManyLevelInputClassSpecificSneakAttackDiceValueAsc               SortFindManyLevelInput = "CLASS_SPECIFIC__SNEAK_ATTACK__DICE_VALUE_ASC"
	SortFindManyLevelInputClassSpecificSneakAttackDiceValueDesc              SortFindManyLevelInput = "CLASS_SPECIFIC__SNEAK_ATTACK__DICE_VALUE_DESC"
	SortFindManyLevelInputClassSpecificSongOfRestDieAsc                      SortFindManyLevelInput = "CLASS_SPECIFIC__SONG_OF_REST_DIE_ASC"
	SortFindManyLevelInputClassSpecificSongOfRestDieDesc                     SortFindManyLevelInput = "CLASS_SPECIFIC__SONG_OF_REST_DIE_DESC"
	SortFindManyLevelInputClassSpecificSorceryPointsAsc                      SortFindManyLevelInput = "CLASS_SPECIFIC__SORCERY_POINTS_ASC"
	SortFindManyLevelInputClassSpecificSorceryPointsDesc                     SortFindManyLevelInput = "CLASS_SPECIFIC__SORCERY_POINTS_DESC"
	SortFindManyLevelInputClassSpecificUnarmoredMovementAsc                  SortFindManyLevelInput = "CLASS_SPECIFIC__UNARMORED_MOVEMENT_ASC"
	SortFindManyLevelInputClassSpecificUnarmoredMovementDesc                 SortFindManyLevelInput = "CLASS_SPECIFIC__UNARMORED_MOVEMENT_DESC"
	SortFindManyLevelInputClassSpecificWildShapeFlyAsc                       SortFindManyLevelInput = "CLASS_SPECIFIC__WILD_SHAPE_FLY_ASC"
	SortFindManyLevelInputClassSpecificWildShapeFlyDesc                      SortFindManyLevelInput = "CLASS_SPECIFIC__WILD_SHAPE_FLY_DESC"
	SortFindManyLevelInputClassSpecificWildShapeMaxCrAsc                     SortFindManyLevelInput = "CLASS_SPECIFIC__WILD_SHAPE_MAX_CR_ASC"
	SortFindManyLevelInputClassSpecificWildShapeMaxCrDesc                    SortFindManyLevelInput = "CLASS_SPECIFIC__WILD_SHAPE_MAX_CR_DESC"
	SortFindManyLevelInputClassSpecificWildShapeSwimAsc                      SortFindManyLevelInput = "CLASS_SPECIFIC__WILD_SHAPE_SWIM_ASC"
	SortFindManyLevelInputClassSpecificWildShapeSwimDesc                     SortFindManyLevelInput = "CLASS_SPECIFIC__WILD_SHAPE_SWIM_DESC"
	SortFindManyLevelInputIndexAsc                                           SortFindManyLevelInput = "INDEX_ASC"
	SortFindManyLevelInputIndexDesc                                          SortFindManyLevelInput = "INDEX_DESC"
	SortFindManyLevelInputLevelAsc                                           SortFindManyLevelInput = "LEVEL_ASC"
	SortFindManyLevelInputLevelDesc                                          SortFindManyLevelInput = "LEVEL_DESC"
	SortFindManyLevelInputProfBonusAsc                                       SortFindManyLevelInput = "PROF_BONUS_ASC"
	SortFindManyLevelInputProfBonusDesc                                      SortFindManyLevelInput = "PROF_BONUS_DESC"
	SortFindManyLevelInputSpellcastingCantripsKnownAsc                       SortFindManyLevelInput = "SPELLCASTING__CANTRIPS_KNOWN_ASC"
	SortFindManyLevelInputSpellcastingCantripsKnownDesc                      SortFindManyLevelInput = "SPELLCASTING__CANTRIPS_KNOWN_DESC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel1Asc                    SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_1_ASC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel1Desc                   SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_1_DESC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel2Asc                    SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_2_ASC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel2Desc                   SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_2_DESC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel3Asc                    SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_3_ASC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel3Desc                   SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_3_DESC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel4Asc                    SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_4_ASC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel4Desc                   SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_4_DESC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel5Asc                    SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_5_ASC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel5Desc                   SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_5_DESC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel6Asc                    SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_6_ASC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel6Desc                   SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_6_DESC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel7Asc                    SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_7_ASC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel7Desc                   SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_7_DESC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel8Asc                    SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_8_ASC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel8Desc                   SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_8_DESC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel9Asc                    SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_9_ASC"
	SortFindManyLevelInputSpellcastingSpellSlotsLevel9Desc                   SortFindManyLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_9_DESC"
	SortFindManyLevelInputSpellcastingSpellsKnownAsc                         SortFindManyLevelInput = "SPELLCASTING__SPELLS_KNOWN_ASC"
	SortFindManyLevelInputSpellcastingSpellsKnownDesc                        SortFindManyLevelInput = "SPELLCASTING__SPELLS_KNOWN_DESC"
	SortFindManyLevelInputSubclassIndexAsc                                   SortFindManyLevelInput = "SUBCLASS__INDEX_ASC"
	SortFindManyLevelInputSubclassIndexDesc                                  SortFindManyLevelInput = "SUBCLASS__INDEX_DESC"
	SortFindManyLevelInputSubclassNameAsc                                    SortFindManyLevelInput = "SUBCLASS__NAME_ASC"
	SortFindManyLevelInputSubclassNameDesc                                   SortFindManyLevelInput = "SUBCLASS__NAME_DESC"
	SortFindManyLevelInputSubclassURLAsc                                     SortFindManyLevelInput = "SUBCLASS__URL_ASC"
	SortFindManyLevelInputSubclassURLDesc                                    SortFindManyLevelInput = "SUBCLASS__URL_DESC"
	SortFindManyLevelInputSubclassSpecificAdditionalMagicalSecretsMaxLvlAsc  SortFindManyLevelInput = "SUBCLASS_SPECIFIC__ADDITIONAL_MAGICAL_SECRETS_MAX_LVL_ASC"
	SortFindManyLevelInputSubclassSpecificAdditionalMagicalSecretsMaxLvlDesc SortFindManyLevelInput = "SUBCLASS_SPECIFIC__ADDITIONAL_MAGICAL_SECRETS_MAX_LVL_DESC"
	SortFindManyLevelInputSubclassSpecificAuraRangeAsc                       SortFindManyLevelInput = "SUBCLASS_SPECIFIC__AURA_RANGE_ASC"
	SortFindManyLevelInputSubclassSpecificAuraRangeDesc                      SortFindManyLevelInput = "SUBCLASS_SPECIFIC__AURA_RANGE_DESC"
	SortFindManyLevelInputURLAsc                                             SortFindManyLevelInput = "URL_ASC"
	SortFindManyLevelInputURLDesc                                            SortFindManyLevelInput = "URL_DESC"
)

var AllSortFindManyLevelInput = []SortFindManyLevelInput{
	SortFindManyLevelInputIDAsc,
	SortFindManyLevelInputIDDesc,
	SortFindManyLevelInputAbilityScoreBonusesAsc,
	SortFindManyLevelInputAbilityScoreBonusesDesc,
	SortFindManyLevelInputClassIndexAsc,
	SortFindManyLevelInputClassIndexDesc,
	SortFindManyLevelInputClassNameAsc,
	SortFindManyLevelInputClassNameDesc,
	SortFindManyLevelInputClassURLAsc,
	SortFindManyLevelInputClassURLDesc,
	SortFindManyLevelInputClassSpecificActionSurgesAsc,
	SortFindManyLevelInputClassSpecificActionSurgesDesc,
	SortFindManyLevelInputClassSpecificArcaneRecoveryLevelsAsc,
	SortFindManyLevelInputClassSpecificArcaneRecoveryLevelsDesc,
	SortFindManyLevelInputClassSpecificAuraRangeAsc,
	SortFindManyLevelInputClassSpecificAuraRangeDesc,
	SortFindManyLevelInputClassSpecificBardicInspirationDieAsc,
	SortFindManyLevelInputClassSpecificBardicInspirationDieDesc,
	SortFindManyLevelInputClassSpecificBrutalCriticalDiceAsc,
	SortFindManyLevelInputClassSpecificBrutalCriticalDiceDesc,
	SortFindManyLevelInputClassSpecificChannelDivinityChargesAsc,
	SortFindManyLevelInputClassSpecificChannelDivinityChargesDesc,
	SortFindManyLevelInputClassSpecificDestroyUndeadCrAsc,
	SortFindManyLevelInputClassSpecificDestroyUndeadCrDesc,
	SortFindManyLevelInputClassSpecificExtraAttacksAsc,
	SortFindManyLevelInputClassSpecificExtraAttacksDesc,
	SortFindManyLevelInputClassSpecificFavoredEnemiesAsc,
	SortFindManyLevelInputClassSpecificFavoredEnemiesDesc,
	SortFindManyLevelInputClassSpecificFavoredTerrainAsc,
	SortFindManyLevelInputClassSpecificFavoredTerrainDesc,
	SortFindManyLevelInputClassSpecificIndomitableUsesAsc,
	SortFindManyLevelInputClassSpecificIndomitableUsesDesc,
	SortFindManyLevelInputClassSpecificInvocationsKnownAsc,
	SortFindManyLevelInputClassSpecificInvocationsKnownDesc,
	SortFindManyLevelInputClassSpecificKiPointsAsc,
	SortFindManyLevelInputClassSpecificKiPointsDesc,
	SortFindManyLevelInputClassSpecificMagicalSecretsMax5Asc,
	SortFindManyLevelInputClassSpecificMagicalSecretsMax5Desc,
	SortFindManyLevelInputClassSpecificMagicalSecretsMax7Asc,
	SortFindManyLevelInputClassSpecificMagicalSecretsMax7Desc,
	SortFindManyLevelInputClassSpecificMagicalSecretsMax9Asc,
	SortFindManyLevelInputClassSpecificMagicalSecretsMax9Desc,
	SortFindManyLevelInputClassSpecificMartialArtsDiceCountAsc,
	SortFindManyLevelInputClassSpecificMartialArtsDiceCountDesc,
	SortFindManyLevelInputClassSpecificMartialArtsDiceValueAsc,
	SortFindManyLevelInputClassSpecificMartialArtsDiceValueDesc,
	SortFindManyLevelInputClassSpecificMetamagicKnownAsc,
	SortFindManyLevelInputClassSpecificMetamagicKnownDesc,
	SortFindManyLevelInputClassSpecificMysticArcanumLevel6Asc,
	SortFindManyLevelInputClassSpecificMysticArcanumLevel6Desc,
	SortFindManyLevelInputClassSpecificMysticArcanumLevel7Asc,
	SortFindManyLevelInputClassSpecificMysticArcanumLevel7Desc,
	SortFindManyLevelInputClassSpecificMysticArcanumLevel8Asc,
	SortFindManyLevelInputClassSpecificMysticArcanumLevel8Desc,
	SortFindManyLevelInputClassSpecificMysticArcanumLevel9Asc,
	SortFindManyLevelInputClassSpecificMysticArcanumLevel9Desc,
	SortFindManyLevelInputClassSpecificRageCountAsc,
	SortFindManyLevelInputClassSpecificRageCountDesc,
	SortFindManyLevelInputClassSpecificRageDamageBonusAsc,
	SortFindManyLevelInputClassSpecificRageDamageBonusDesc,
	SortFindManyLevelInputClassSpecificSneakAttackDiceCountAsc,
	SortFindManyLevelInputClassSpecificSneakAttackDiceCountDesc,
	SortFindManyLevelInputClassSpecificSneakAttackDiceValueAsc,
	SortFindManyLevelInputClassSpecificSneakAttackDiceValueDesc,
	SortFindManyLevelInputClassSpecificSongOfRestDieAsc,
	SortFindManyLevelInputClassSpecificSongOfRestDieDesc,
	SortFindManyLevelInputClassSpecificSorceryPointsAsc,
	SortFindManyLevelInputClassSpecificSorceryPointsDesc,
	SortFindManyLevelInputClassSpecificUnarmoredMovementAsc,
	SortFindManyLevelInputClassSpecificUnarmoredMovementDesc,
	SortFindManyLevelInputClassSpecificWildShapeFlyAsc,
	SortFindManyLevelInputClassSpecificWildShapeFlyDesc,
	SortFindManyLevelInputClassSpecificWildShapeMaxCrAsc,
	SortFindManyLevelInputClassSpecificWildShapeMaxCrDesc,
	SortFindManyLevelInputClassSpecificWildShapeSwimAsc,
	SortFindManyLevelInputClassSpecificWildShapeSwimDesc,
	SortFindManyLevelInputIndexAsc,
	SortFindManyLevelInputIndexDesc,
	SortFindManyLevelInputLevelAsc,
	SortFindManyLevelInputLevelDesc,
	SortFindManyLevelInputProfBonusAsc,
	SortFindManyLevelInputProfBonusDesc,
	SortFindManyLevelInputSpellcastingCantripsKnownAsc,
	SortFindManyLevelInputSpellcastingCantripsKnownDesc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel1Asc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel1Desc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel2Asc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel2Desc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel3Asc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel3Desc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel4Asc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel4Desc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel5Asc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel5Desc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel6Asc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel6Desc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel7Asc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel7Desc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel8Asc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel8Desc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel9Asc,
	SortFindManyLevelInputSpellcastingSpellSlotsLevel9Desc,
	SortFindManyLevelInputSpellcastingSpellsKnownAsc,
	SortFindManyLevelInputSpellcastingSpellsKnownDesc,
	SortFindManyLevelInputSubclassIndexAsc,
	SortFindManyLevelInputSubclassIndexDesc,
	SortFindManyLevelInputSubclassNameAsc,
	SortFindManyLevelInputSubclassNameDesc,
	SortFindManyLevelInputSubclassURLAsc,
	SortFindManyLevelInputSubclassURLDesc,
	SortFindManyLevelInputSubclassSpecificAdditionalMagicalSecretsMaxLvlAsc,
	SortFindManyLevelInputSubclassSpecificAdditionalMagicalSecretsMaxLvlDesc,
	SortFindManyLevelInputSubclassSpecificAuraRangeAsc,
	SortFindManyLevelInputSubclassSpecificAuraRangeDesc,
	SortFindManyLevelInputURLAsc,
	SortFindManyLevelInputURLDesc,
}

func (e SortFindManyLevelInput) IsValid() bool {
	switch e {
	case SortFindManyLevelInputIDAsc, SortFindManyLevelInputIDDesc, SortFindManyLevelInputAbilityScoreBonusesAsc, SortFindManyLevelInputAbilityScoreBonusesDesc, SortFindManyLevelInputClassIndexAsc, SortFindManyLevelInputClassIndexDesc, SortFindManyLevelInputClassNameAsc, SortFindManyLevelInputClassNameDesc, SortFindManyLevelInputClassURLAsc, SortFindManyLevelInputClassURLDesc, SortFindManyLevelInputClassSpecificActionSurgesAsc, SortFindManyLevelInputClassSpecificActionSurgesDesc, SortFindManyLevelInputClassSpecificArcaneRecoveryLevelsAsc, SortFindManyLevelInputClassSpecificArcaneRecoveryLevelsDesc, SortFindManyLevelInputClassSpecificAuraRangeAsc, SortFindManyLevelInputClassSpecificAuraRangeDesc, SortFindManyLevelInputClassSpecificBardicInspirationDieAsc, SortFindManyLevelInputClassSpecificBardicInspirationDieDesc, SortFindManyLevelInputClassSpecificBrutalCriticalDiceAsc, SortFindManyLevelInputClassSpecificBrutalCriticalDiceDesc, SortFindManyLevelInputClassSpecificChannelDivinityChargesAsc, SortFindManyLevelInputClassSpecificChannelDivinityChargesDesc, SortFindManyLevelInputClassSpecificDestroyUndeadCrAsc, SortFindManyLevelInputClassSpecificDestroyUndeadCrDesc, SortFindManyLevelInputClassSpecificExtraAttacksAsc, SortFindManyLevelInputClassSpecificExtraAttacksDesc, SortFindManyLevelInputClassSpecificFavoredEnemiesAsc, SortFindManyLevelInputClassSpecificFavoredEnemiesDesc, SortFindManyLevelInputClassSpecificFavoredTerrainAsc, SortFindManyLevelInputClassSpecificFavoredTerrainDesc, SortFindManyLevelInputClassSpecificIndomitableUsesAsc, SortFindManyLevelInputClassSpecificIndomitableUsesDesc, SortFindManyLevelInputClassSpecificInvocationsKnownAsc, SortFindManyLevelInputClassSpecificInvocationsKnownDesc, SortFindManyLevelInputClassSpecificKiPointsAsc, SortFindManyLevelInputClassSpecificKiPointsDesc, SortFindManyLevelInputClassSpecificMagicalSecretsMax5Asc, SortFindManyLevelInputClassSpecificMagicalSecretsMax5Desc, SortFindManyLevelInputClassSpecificMagicalSecretsMax7Asc, SortFindManyLevelInputClassSpecificMagicalSecretsMax7Desc, SortFindManyLevelInputClassSpecificMagicalSecretsMax9Asc, SortFindManyLevelInputClassSpecificMagicalSecretsMax9Desc, SortFindManyLevelInputClassSpecificMartialArtsDiceCountAsc, SortFindManyLevelInputClassSpecificMartialArtsDiceCountDesc, SortFindManyLevelInputClassSpecificMartialArtsDiceValueAsc, SortFindManyLevelInputClassSpecificMartialArtsDiceValueDesc, SortFindManyLevelInputClassSpecificMetamagicKnownAsc, SortFindManyLevelInputClassSpecificMetamagicKnownDesc, SortFindManyLevelInputClassSpecificMysticArcanumLevel6Asc, SortFindManyLevelInputClassSpecificMysticArcanumLevel6Desc, SortFindManyLevelInputClassSpecificMysticArcanumLevel7Asc, SortFindManyLevelInputClassSpecificMysticArcanumLevel7Desc, SortFindManyLevelInputClassSpecificMysticArcanumLevel8Asc, SortFindManyLevelInputClassSpecificMysticArcanumLevel8Desc, SortFindManyLevelInputClassSpecificMysticArcanumLevel9Asc, SortFindManyLevelInputClassSpecificMysticArcanumLevel9Desc, SortFindManyLevelInputClassSpecificRageCountAsc, SortFindManyLevelInputClassSpecificRageCountDesc, SortFindManyLevelInputClassSpecificRageDamageBonusAsc, SortFindManyLevelInputClassSpecificRageDamageBonusDesc, SortFindManyLevelInputClassSpecificSneakAttackDiceCountAsc, SortFindManyLevelInputClassSpecificSneakAttackDiceCountDesc, SortFindManyLevelInputClassSpecificSneakAttackDiceValueAsc, SortFindManyLevelInputClassSpecificSneakAttackDiceValueDesc, SortFindManyLevelInputClassSpecificSongOfRestDieAsc, SortFindManyLevelInputClassSpecificSongOfRestDieDesc, SortFindManyLevelInputClassSpecificSorceryPointsAsc, SortFindManyLevelInputClassSpecificSorceryPointsDesc, SortFindManyLevelInputClassSpecificUnarmoredMovementAsc, SortFindManyLevelInputClassSpecificUnarmoredMovementDesc, SortFindManyLevelInputClassSpecificWildShapeFlyAsc, SortFindManyLevelInputClassSpecificWildShapeFlyDesc, SortFindManyLevelInputClassSpecificWildShapeMaxCrAsc, SortFindManyLevelInputClassSpecificWildShapeMaxCrDesc, SortFindManyLevelInputClassSpecificWildShapeSwimAsc, SortFindManyLevelInputClassSpecificWildShapeSwimDesc, SortFindManyLevelInputIndexAsc, SortFindManyLevelInputIndexDesc, SortFindManyLevelInputLevelAsc, SortFindManyLevelInputLevelDesc, SortFindManyLevelInputProfBonusAsc, SortFindManyLevelInputProfBonusDesc, SortFindManyLevelInputSpellcastingCantripsKnownAsc, SortFindManyLevelInputSpellcastingCantripsKnownDesc, SortFindManyLevelInputSpellcastingSpellSlotsLevel1Asc, SortFindManyLevelInputSpellcastingSpellSlotsLevel1Desc, SortFindManyLevelInputSpellcastingSpellSlotsLevel2Asc, SortFindManyLevelInputSpellcastingSpellSlotsLevel2Desc, SortFindManyLevelInputSpellcastingSpellSlotsLevel3Asc, SortFindManyLevelInputSpellcastingSpellSlotsLevel3Desc, SortFindManyLevelInputSpellcastingSpellSlotsLevel4Asc, SortFindManyLevelInputSpellcastingSpellSlotsLevel4Desc, SortFindManyLevelInputSpellcastingSpellSlotsLevel5Asc, SortFindManyLevelInputSpellcastingSpellSlotsLevel5Desc, SortFindManyLevelInputSpellcastingSpellSlotsLevel6Asc, SortFindManyLevelInputSpellcastingSpellSlotsLevel6Desc, SortFindManyLevelInputSpellcastingSpellSlotsLevel7Asc, SortFindManyLevelInputSpellcastingSpellSlotsLevel7Desc, SortFindManyLevelInputSpellcastingSpellSlotsLevel8Asc, SortFindManyLevelInputSpellcastingSpellSlotsLevel8Desc, SortFindManyLevelInputSpellcastingSpellSlotsLevel9Asc, SortFindManyLevelInputSpellcastingSpellSlotsLevel9Desc, SortFindManyLevelInputSpellcastingSpellsKnownAsc, SortFindManyLevelInputSpellcastingSpellsKnownDesc, SortFindManyLevelInputSubclassIndexAsc, SortFindManyLevelInputSubclassIndexDesc, SortFindManyLevelInputSubclassNameAsc, SortFindManyLevelInputSubclassNameDesc, SortFindManyLevelInputSubclassURLAsc, SortFindManyLevelInputSubclassURLDesc, SortFindManyLevelInputSubclassSpecificAdditionalMagicalSecretsMaxLvlAsc, SortFindManyLevelInputSubclassSpecificAdditionalMagicalSecretsMaxLvlDesc, SortFindManyLevelInputSubclassSpecificAuraRangeAsc, SortFindManyLevelInputSubclassSpecificAuraRangeDesc, SortFindManyLevelInputURLAsc, SortFindManyLevelInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyLevelInput) String() string {
	return string(e)
}

func (e *SortFindManyLevelInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyLevelInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyLevelInput", str)
	}
	return nil
}

func (e SortFindManyLevelInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyMagicItemInput string

const (
	SortFindManyMagicItemInputIDAsc                      SortFindManyMagicItemInput = "_ID_ASC"
	SortFindManyMagicItemInputIDDesc                     SortFindManyMagicItemInput = "_ID_DESC"
	SortFindManyMagicItemInputDescAsc                    SortFindManyMagicItemInput = "DESC_ASC"
	SortFindManyMagicItemInputDescDesc                   SortFindManyMagicItemInput = "DESC_DESC"
	SortFindManyMagicItemInputEquipmentCategoryIndexAsc  SortFindManyMagicItemInput = "EQUIPMENT_CATEGORY__INDEX_ASC"
	SortFindManyMagicItemInputEquipmentCategoryIndexDesc SortFindManyMagicItemInput = "EQUIPMENT_CATEGORY__INDEX_DESC"
	SortFindManyMagicItemInputEquipmentCategoryNameAsc   SortFindManyMagicItemInput = "EQUIPMENT_CATEGORY__NAME_ASC"
	SortFindManyMagicItemInputEquipmentCategoryNameDesc  SortFindManyMagicItemInput = "EQUIPMENT_CATEGORY__NAME_DESC"
	SortFindManyMagicItemInputEquipmentCategoryURLAsc    SortFindManyMagicItemInput = "EQUIPMENT_CATEGORY__URL_ASC"
	SortFindManyMagicItemInputEquipmentCategoryURLDesc   SortFindManyMagicItemInput = "EQUIPMENT_CATEGORY__URL_DESC"
	SortFindManyMagicItemInputIndexAsc                   SortFindManyMagicItemInput = "INDEX_ASC"
	SortFindManyMagicItemInputIndexDesc                  SortFindManyMagicItemInput = "INDEX_DESC"
	SortFindManyMagicItemInputNameAsc                    SortFindManyMagicItemInput = "NAME_ASC"
	SortFindManyMagicItemInputNameDesc                   SortFindManyMagicItemInput = "NAME_DESC"
	SortFindManyMagicItemInputURLAsc                     SortFindManyMagicItemInput = "URL_ASC"
	SortFindManyMagicItemInputURLDesc                    SortFindManyMagicItemInput = "URL_DESC"
)

var AllSortFindManyMagicItemInput = []SortFindManyMagicItemInput{
	SortFindManyMagicItemInputIDAsc,
	SortFindManyMagicItemInputIDDesc,
	SortFindManyMagicItemInputDescAsc,
	SortFindManyMagicItemInputDescDesc,
	SortFindManyMagicItemInputEquipmentCategoryIndexAsc,
	SortFindManyMagicItemInputEquipmentCategoryIndexDesc,
	SortFindManyMagicItemInputEquipmentCategoryNameAsc,
	SortFindManyMagicItemInputEquipmentCategoryNameDesc,
	SortFindManyMagicItemInputEquipmentCategoryURLAsc,
	SortFindManyMagicItemInputEquipmentCategoryURLDesc,
	SortFindManyMagicItemInputIndexAsc,
	SortFindManyMagicItemInputIndexDesc,
	SortFindManyMagicItemInputNameAsc,
	SortFindManyMagicItemInputNameDesc,
	SortFindManyMagicItemInputURLAsc,
	SortFindManyMagicItemInputURLDesc,
}

func (e SortFindManyMagicItemInput) IsValid() bool {
	switch e {
	case SortFindManyMagicItemInputIDAsc, SortFindManyMagicItemInputIDDesc, SortFindManyMagicItemInputDescAsc, SortFindManyMagicItemInputDescDesc, SortFindManyMagicItemInputEquipmentCategoryIndexAsc, SortFindManyMagicItemInputEquipmentCategoryIndexDesc, SortFindManyMagicItemInputEquipmentCategoryNameAsc, SortFindManyMagicItemInputEquipmentCategoryNameDesc, SortFindManyMagicItemInputEquipmentCategoryURLAsc, SortFindManyMagicItemInputEquipmentCategoryURLDesc, SortFindManyMagicItemInputIndexAsc, SortFindManyMagicItemInputIndexDesc, SortFindManyMagicItemInputNameAsc, SortFindManyMagicItemInputNameDesc, SortFindManyMagicItemInputURLAsc, SortFindManyMagicItemInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyMagicItemInput) String() string {
	return string(e)
}

func (e *SortFindManyMagicItemInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyMagicItemInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyMagicItemInput", str)
	}
	return nil
}

func (e SortFindManyMagicItemInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyMagicSchoolInput string

const (
	SortFindManyMagicSchoolInputIDAsc     SortFindManyMagicSchoolInput = "_ID_ASC"
	SortFindManyMagicSchoolInputIDDesc    SortFindManyMagicSchoolInput = "_ID_DESC"
	SortFindManyMagicSchoolInputDescAsc   SortFindManyMagicSchoolInput = "DESC_ASC"
	SortFindManyMagicSchoolInputDescDesc  SortFindManyMagicSchoolInput = "DESC_DESC"
	SortFindManyMagicSchoolInputIndexAsc  SortFindManyMagicSchoolInput = "INDEX_ASC"
	SortFindManyMagicSchoolInputIndexDesc SortFindManyMagicSchoolInput = "INDEX_DESC"
	SortFindManyMagicSchoolInputNameAsc   SortFindManyMagicSchoolInput = "NAME_ASC"
	SortFindManyMagicSchoolInputNameDesc  SortFindManyMagicSchoolInput = "NAME_DESC"
	SortFindManyMagicSchoolInputURLAsc    SortFindManyMagicSchoolInput = "URL_ASC"
	SortFindManyMagicSchoolInputURLDesc   SortFindManyMagicSchoolInput = "URL_DESC"
)

var AllSortFindManyMagicSchoolInput = []SortFindManyMagicSchoolInput{
	SortFindManyMagicSchoolInputIDAsc,
	SortFindManyMagicSchoolInputIDDesc,
	SortFindManyMagicSchoolInputDescAsc,
	SortFindManyMagicSchoolInputDescDesc,
	SortFindManyMagicSchoolInputIndexAsc,
	SortFindManyMagicSchoolInputIndexDesc,
	SortFindManyMagicSchoolInputNameAsc,
	SortFindManyMagicSchoolInputNameDesc,
	SortFindManyMagicSchoolInputURLAsc,
	SortFindManyMagicSchoolInputURLDesc,
}

func (e SortFindManyMagicSchoolInput) IsValid() bool {
	switch e {
	case SortFindManyMagicSchoolInputIDAsc, SortFindManyMagicSchoolInputIDDesc, SortFindManyMagicSchoolInputDescAsc, SortFindManyMagicSchoolInputDescDesc, SortFindManyMagicSchoolInputIndexAsc, SortFindManyMagicSchoolInputIndexDesc, SortFindManyMagicSchoolInputNameAsc, SortFindManyMagicSchoolInputNameDesc, SortFindManyMagicSchoolInputURLAsc, SortFindManyMagicSchoolInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyMagicSchoolInput) String() string {
	return string(e)
}

func (e *SortFindManyMagicSchoolInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyMagicSchoolInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyMagicSchoolInput", str)
	}
	return nil
}

func (e SortFindManyMagicSchoolInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyMonsterInput string

const (
	SortFindManyMonsterInputIDAsc                       SortFindManyMonsterInput = "_ID_ASC"
	SortFindManyMonsterInputIDDesc                      SortFindManyMonsterInput = "_ID_DESC"
	SortFindManyMonsterInputAlignmentAsc                SortFindManyMonsterInput = "ALIGNMENT_ASC"
	SortFindManyMonsterInputAlignmentDesc               SortFindManyMonsterInput = "ALIGNMENT_DESC"
	SortFindManyMonsterInputArmorClassAsc               SortFindManyMonsterInput = "ARMOR_CLASS_ASC"
	SortFindManyMonsterInputArmorClassDesc              SortFindManyMonsterInput = "ARMOR_CLASS_DESC"
	SortFindManyMonsterInputChallengeRatingAsc          SortFindManyMonsterInput = "CHALLENGE_RATING_ASC"
	SortFindManyMonsterInputChallengeRatingDesc         SortFindManyMonsterInput = "CHALLENGE_RATING_DESC"
	SortFindManyMonsterInputCharismaAsc                 SortFindManyMonsterInput = "CHARISMA_ASC"
	SortFindManyMonsterInputCharismaDesc                SortFindManyMonsterInput = "CHARISMA_DESC"
	SortFindManyMonsterInputConstitutionAsc             SortFindManyMonsterInput = "CONSTITUTION_ASC"
	SortFindManyMonsterInputConstitutionDesc            SortFindManyMonsterInput = "CONSTITUTION_DESC"
	SortFindManyMonsterInputDexterityAsc                SortFindManyMonsterInput = "DEXTERITY_ASC"
	SortFindManyMonsterInputDexterityDesc               SortFindManyMonsterInput = "DEXTERITY_DESC"
	SortFindManyMonsterInputHitDiceAsc                  SortFindManyMonsterInput = "HIT_DICE_ASC"
	SortFindManyMonsterInputHitDiceDesc                 SortFindManyMonsterInput = "HIT_DICE_DESC"
	SortFindManyMonsterInputHitPointsAsc                SortFindManyMonsterInput = "HIT_POINTS_ASC"
	SortFindManyMonsterInputHitPointsDesc               SortFindManyMonsterInput = "HIT_POINTS_DESC"
	SortFindManyMonsterInputIndexAsc                    SortFindManyMonsterInput = "INDEX_ASC"
	SortFindManyMonsterInputIndexDesc                   SortFindManyMonsterInput = "INDEX_DESC"
	SortFindManyMonsterInputIntelligenceAsc             SortFindManyMonsterInput = "INTELLIGENCE_ASC"
	SortFindManyMonsterInputIntelligenceDesc            SortFindManyMonsterInput = "INTELLIGENCE_DESC"
	SortFindManyMonsterInputLanguagesAsc                SortFindManyMonsterInput = "LANGUAGES_ASC"
	SortFindManyMonsterInputLanguagesDesc               SortFindManyMonsterInput = "LANGUAGES_DESC"
	SortFindManyMonsterInputNameAsc                     SortFindManyMonsterInput = "NAME_ASC"
	SortFindManyMonsterInputNameDesc                    SortFindManyMonsterInput = "NAME_DESC"
	SortFindManyMonsterInputSensesBlindsightAsc         SortFindManyMonsterInput = "SENSES__BLINDSIGHT_ASC"
	SortFindManyMonsterInputSensesBlindsightDesc        SortFindManyMonsterInput = "SENSES__BLINDSIGHT_DESC"
	SortFindManyMonsterInputSensesDarkvisionAsc         SortFindManyMonsterInput = "SENSES__DARKVISION_ASC"
	SortFindManyMonsterInputSensesDarkvisionDesc        SortFindManyMonsterInput = "SENSES__DARKVISION_DESC"
	SortFindManyMonsterInputSensesPassivePerceptionAsc  SortFindManyMonsterInput = "SENSES__PASSIVE_PERCEPTION_ASC"
	SortFindManyMonsterInputSensesPassivePerceptionDesc SortFindManyMonsterInput = "SENSES__PASSIVE_PERCEPTION_DESC"
	SortFindManyMonsterInputSensesTremorsenseAsc        SortFindManyMonsterInput = "SENSES__TREMORSENSE_ASC"
	SortFindManyMonsterInputSensesTremorsenseDesc       SortFindManyMonsterInput = "SENSES__TREMORSENSE_DESC"
	SortFindManyMonsterInputSensesTruesightAsc          SortFindManyMonsterInput = "SENSES__TRUESIGHT_ASC"
	SortFindManyMonsterInputSensesTruesightDesc         SortFindManyMonsterInput = "SENSES__TRUESIGHT_DESC"
	SortFindManyMonsterInputSizeAsc                     SortFindManyMonsterInput = "SIZE_ASC"
	SortFindManyMonsterInputSizeDesc                    SortFindManyMonsterInput = "SIZE_DESC"
	SortFindManyMonsterInputSpeedBurrowAsc              SortFindManyMonsterInput = "SPEED__BURROW_ASC"
	SortFindManyMonsterInputSpeedBurrowDesc             SortFindManyMonsterInput = "SPEED__BURROW_DESC"
	SortFindManyMonsterInputSpeedClimbAsc               SortFindManyMonsterInput = "SPEED__CLIMB_ASC"
	SortFindManyMonsterInputSpeedClimbDesc              SortFindManyMonsterInput = "SPEED__CLIMB_DESC"
	SortFindManyMonsterInputSpeedFlyAsc                 SortFindManyMonsterInput = "SPEED__FLY_ASC"
	SortFindManyMonsterInputSpeedFlyDesc                SortFindManyMonsterInput = "SPEED__FLY_DESC"
	SortFindManyMonsterInputSpeedHoverAsc               SortFindManyMonsterInput = "SPEED__HOVER_ASC"
	SortFindManyMonsterInputSpeedHoverDesc              SortFindManyMonsterInput = "SPEED__HOVER_DESC"
	SortFindManyMonsterInputSpeedSwimAsc                SortFindManyMonsterInput = "SPEED__SWIM_ASC"
	SortFindManyMonsterInputSpeedSwimDesc               SortFindManyMonsterInput = "SPEED__SWIM_DESC"
	SortFindManyMonsterInputSpeedWalkAsc                SortFindManyMonsterInput = "SPEED__WALK_ASC"
	SortFindManyMonsterInputSpeedWalkDesc               SortFindManyMonsterInput = "SPEED__WALK_DESC"
	SortFindManyMonsterInputStrengthAsc                 SortFindManyMonsterInput = "STRENGTH_ASC"
	SortFindManyMonsterInputStrengthDesc                SortFindManyMonsterInput = "STRENGTH_DESC"
	SortFindManyMonsterInputSubtypeAsc                  SortFindManyMonsterInput = "SUBTYPE_ASC"
	SortFindManyMonsterInputSubtypeDesc                 SortFindManyMonsterInput = "SUBTYPE_DESC"
	SortFindManyMonsterInputTypeAsc                     SortFindManyMonsterInput = "TYPE_ASC"
	SortFindManyMonsterInputTypeDesc                    SortFindManyMonsterInput = "TYPE_DESC"
	SortFindManyMonsterInputURLAsc                      SortFindManyMonsterInput = "URL_ASC"
	SortFindManyMonsterInputURLDesc                     SortFindManyMonsterInput = "URL_DESC"
	SortFindManyMonsterInputWisdomAsc                   SortFindManyMonsterInput = "WISDOM_ASC"
	SortFindManyMonsterInputWisdomDesc                  SortFindManyMonsterInput = "WISDOM_DESC"
	SortFindManyMonsterInputXpAsc                       SortFindManyMonsterInput = "XP_ASC"
	SortFindManyMonsterInputXpDesc                      SortFindManyMonsterInput = "XP_DESC"
)

var AllSortFindManyMonsterInput = []SortFindManyMonsterInput{
	SortFindManyMonsterInputIDAsc,
	SortFindManyMonsterInputIDDesc,
	SortFindManyMonsterInputAlignmentAsc,
	SortFindManyMonsterInputAlignmentDesc,
	SortFindManyMonsterInputArmorClassAsc,
	SortFindManyMonsterInputArmorClassDesc,
	SortFindManyMonsterInputChallengeRatingAsc,
	SortFindManyMonsterInputChallengeRatingDesc,
	SortFindManyMonsterInputCharismaAsc,
	SortFindManyMonsterInputCharismaDesc,
	SortFindManyMonsterInputConstitutionAsc,
	SortFindManyMonsterInputConstitutionDesc,
	SortFindManyMonsterInputDexterityAsc,
	SortFindManyMonsterInputDexterityDesc,
	SortFindManyMonsterInputHitDiceAsc,
	SortFindManyMonsterInputHitDiceDesc,
	SortFindManyMonsterInputHitPointsAsc,
	SortFindManyMonsterInputHitPointsDesc,
	SortFindManyMonsterInputIndexAsc,
	SortFindManyMonsterInputIndexDesc,
	SortFindManyMonsterInputIntelligenceAsc,
	SortFindManyMonsterInputIntelligenceDesc,
	SortFindManyMonsterInputLanguagesAsc,
	SortFindManyMonsterInputLanguagesDesc,
	SortFindManyMonsterInputNameAsc,
	SortFindManyMonsterInputNameDesc,
	SortFindManyMonsterInputSensesBlindsightAsc,
	SortFindManyMonsterInputSensesBlindsightDesc,
	SortFindManyMonsterInputSensesDarkvisionAsc,
	SortFindManyMonsterInputSensesDarkvisionDesc,
	SortFindManyMonsterInputSensesPassivePerceptionAsc,
	SortFindManyMonsterInputSensesPassivePerceptionDesc,
	SortFindManyMonsterInputSensesTremorsenseAsc,
	SortFindManyMonsterInputSensesTremorsenseDesc,
	SortFindManyMonsterInputSensesTruesightAsc,
	SortFindManyMonsterInputSensesTruesightDesc,
	SortFindManyMonsterInputSizeAsc,
	SortFindManyMonsterInputSizeDesc,
	SortFindManyMonsterInputSpeedBurrowAsc,
	SortFindManyMonsterInputSpeedBurrowDesc,
	SortFindManyMonsterInputSpeedClimbAsc,
	SortFindManyMonsterInputSpeedClimbDesc,
	SortFindManyMonsterInputSpeedFlyAsc,
	SortFindManyMonsterInputSpeedFlyDesc,
	SortFindManyMonsterInputSpeedHoverAsc,
	SortFindManyMonsterInputSpeedHoverDesc,
	SortFindManyMonsterInputSpeedSwimAsc,
	SortFindManyMonsterInputSpeedSwimDesc,
	SortFindManyMonsterInputSpeedWalkAsc,
	SortFindManyMonsterInputSpeedWalkDesc,
	SortFindManyMonsterInputStrengthAsc,
	SortFindManyMonsterInputStrengthDesc,
	SortFindManyMonsterInputSubtypeAsc,
	SortFindManyMonsterInputSubtypeDesc,
	SortFindManyMonsterInputTypeAsc,
	SortFindManyMonsterInputTypeDesc,
	SortFindManyMonsterInputURLAsc,
	SortFindManyMonsterInputURLDesc,
	SortFindManyMonsterInputWisdomAsc,
	SortFindManyMonsterInputWisdomDesc,
	SortFindManyMonsterInputXpAsc,
	SortFindManyMonsterInputXpDesc,
}

func (e SortFindManyMonsterInput) IsValid() bool {
	switch e {
	case SortFindManyMonsterInputIDAsc, SortFindManyMonsterInputIDDesc, SortFindManyMonsterInputAlignmentAsc, SortFindManyMonsterInputAlignmentDesc, SortFindManyMonsterInputArmorClassAsc, SortFindManyMonsterInputArmorClassDesc, SortFindManyMonsterInputChallengeRatingAsc, SortFindManyMonsterInputChallengeRatingDesc, SortFindManyMonsterInputCharismaAsc, SortFindManyMonsterInputCharismaDesc, SortFindManyMonsterInputConstitutionAsc, SortFindManyMonsterInputConstitutionDesc, SortFindManyMonsterInputDexterityAsc, SortFindManyMonsterInputDexterityDesc, SortFindManyMonsterInputHitDiceAsc, SortFindManyMonsterInputHitDiceDesc, SortFindManyMonsterInputHitPointsAsc, SortFindManyMonsterInputHitPointsDesc, SortFindManyMonsterInputIndexAsc, SortFindManyMonsterInputIndexDesc, SortFindManyMonsterInputIntelligenceAsc, SortFindManyMonsterInputIntelligenceDesc, SortFindManyMonsterInputLanguagesAsc, SortFindManyMonsterInputLanguagesDesc, SortFindManyMonsterInputNameAsc, SortFindManyMonsterInputNameDesc, SortFindManyMonsterInputSensesBlindsightAsc, SortFindManyMonsterInputSensesBlindsightDesc, SortFindManyMonsterInputSensesDarkvisionAsc, SortFindManyMonsterInputSensesDarkvisionDesc, SortFindManyMonsterInputSensesPassivePerceptionAsc, SortFindManyMonsterInputSensesPassivePerceptionDesc, SortFindManyMonsterInputSensesTremorsenseAsc, SortFindManyMonsterInputSensesTremorsenseDesc, SortFindManyMonsterInputSensesTruesightAsc, SortFindManyMonsterInputSensesTruesightDesc, SortFindManyMonsterInputSizeAsc, SortFindManyMonsterInputSizeDesc, SortFindManyMonsterInputSpeedBurrowAsc, SortFindManyMonsterInputSpeedBurrowDesc, SortFindManyMonsterInputSpeedClimbAsc, SortFindManyMonsterInputSpeedClimbDesc, SortFindManyMonsterInputSpeedFlyAsc, SortFindManyMonsterInputSpeedFlyDesc, SortFindManyMonsterInputSpeedHoverAsc, SortFindManyMonsterInputSpeedHoverDesc, SortFindManyMonsterInputSpeedSwimAsc, SortFindManyMonsterInputSpeedSwimDesc, SortFindManyMonsterInputSpeedWalkAsc, SortFindManyMonsterInputSpeedWalkDesc, SortFindManyMonsterInputStrengthAsc, SortFindManyMonsterInputStrengthDesc, SortFindManyMonsterInputSubtypeAsc, SortFindManyMonsterInputSubtypeDesc, SortFindManyMonsterInputTypeAsc, SortFindManyMonsterInputTypeDesc, SortFindManyMonsterInputURLAsc, SortFindManyMonsterInputURLDesc, SortFindManyMonsterInputWisdomAsc, SortFindManyMonsterInputWisdomDesc, SortFindManyMonsterInputXpAsc, SortFindManyMonsterInputXpDesc:
		return true
	}
	return false
}

func (e SortFindManyMonsterInput) String() string {
	return string(e)
}

func (e *SortFindManyMonsterInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyMonsterInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyMonsterInput", str)
	}
	return nil
}

func (e SortFindManyMonsterInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyProficiencyInput string

const (
	SortFindManyProficiencyInputIDAsc     SortFindManyProficiencyInput = "_ID_ASC"
	SortFindManyProficiencyInputIDDesc    SortFindManyProficiencyInput = "_ID_DESC"
	SortFindManyProficiencyInputIndexAsc  SortFindManyProficiencyInput = "INDEX_ASC"
	SortFindManyProficiencyInputIndexDesc SortFindManyProficiencyInput = "INDEX_DESC"
	SortFindManyProficiencyInputNameAsc   SortFindManyProficiencyInput = "NAME_ASC"
	SortFindManyProficiencyInputNameDesc  SortFindManyProficiencyInput = "NAME_DESC"
	SortFindManyProficiencyInputTypeAsc   SortFindManyProficiencyInput = "TYPE_ASC"
	SortFindManyProficiencyInputTypeDesc  SortFindManyProficiencyInput = "TYPE_DESC"
	SortFindManyProficiencyInputURLAsc    SortFindManyProficiencyInput = "URL_ASC"
	SortFindManyProficiencyInputURLDesc   SortFindManyProficiencyInput = "URL_DESC"
)

var AllSortFindManyProficiencyInput = []SortFindManyProficiencyInput{
	SortFindManyProficiencyInputIDAsc,
	SortFindManyProficiencyInputIDDesc,
	SortFindManyProficiencyInputIndexAsc,
	SortFindManyProficiencyInputIndexDesc,
	SortFindManyProficiencyInputNameAsc,
	SortFindManyProficiencyInputNameDesc,
	SortFindManyProficiencyInputTypeAsc,
	SortFindManyProficiencyInputTypeDesc,
	SortFindManyProficiencyInputURLAsc,
	SortFindManyProficiencyInputURLDesc,
}

func (e SortFindManyProficiencyInput) IsValid() bool {
	switch e {
	case SortFindManyProficiencyInputIDAsc, SortFindManyProficiencyInputIDDesc, SortFindManyProficiencyInputIndexAsc, SortFindManyProficiencyInputIndexDesc, SortFindManyProficiencyInputNameAsc, SortFindManyProficiencyInputNameDesc, SortFindManyProficiencyInputTypeAsc, SortFindManyProficiencyInputTypeDesc, SortFindManyProficiencyInputURLAsc, SortFindManyProficiencyInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyProficiencyInput) String() string {
	return string(e)
}

func (e *SortFindManyProficiencyInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyProficiencyInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyProficiencyInput", str)
	}
	return nil
}

func (e SortFindManyProficiencyInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyRaceInput string

const (
	SortFindManyRaceInputIDAsc                                SortFindManyRaceInput = "_ID_ASC"
	SortFindManyRaceInputIDDesc                               SortFindManyRaceInput = "_ID_DESC"
	SortFindManyRaceInputAbilityBonusOptionsChooseAsc         SortFindManyRaceInput = "ABILITY_BONUS_OPTIONS__CHOOSE_ASC"
	SortFindManyRaceInputAbilityBonusOptionsChooseDesc        SortFindManyRaceInput = "ABILITY_BONUS_OPTIONS__CHOOSE_DESC"
	SortFindManyRaceInputAbilityBonusOptionsTypeAsc           SortFindManyRaceInput = "ABILITY_BONUS_OPTIONS__TYPE_ASC"
	SortFindManyRaceInputAbilityBonusOptionsTypeDesc          SortFindManyRaceInput = "ABILITY_BONUS_OPTIONS__TYPE_DESC"
	SortFindManyRaceInputAgeAsc                               SortFindManyRaceInput = "AGE_ASC"
	SortFindManyRaceInputAgeDesc                              SortFindManyRaceInput = "AGE_DESC"
	SortFindManyRaceInputAlignmentAsc                         SortFindManyRaceInput = "ALIGNMENT_ASC"
	SortFindManyRaceInputAlignmentDesc                        SortFindManyRaceInput = "ALIGNMENT_DESC"
	SortFindManyRaceInputIndexAsc                             SortFindManyRaceInput = "INDEX_ASC"
	SortFindManyRaceInputIndexDesc                            SortFindManyRaceInput = "INDEX_DESC"
	SortFindManyRaceInputLanguageDescAsc                      SortFindManyRaceInput = "LANGUAGE_DESC_ASC"
	SortFindManyRaceInputLanguageDescDesc                     SortFindManyRaceInput = "LANGUAGE_DESC_DESC"
	SortFindManyRaceInputLanguageOptionsChooseAsc             SortFindManyRaceInput = "LANGUAGE_OPTIONS__CHOOSE_ASC"
	SortFindManyRaceInputLanguageOptionsChooseDesc            SortFindManyRaceInput = "LANGUAGE_OPTIONS__CHOOSE_DESC"
	SortFindManyRaceInputLanguageOptionsTypeAsc               SortFindManyRaceInput = "LANGUAGE_OPTIONS__TYPE_ASC"
	SortFindManyRaceInputLanguageOptionsTypeDesc              SortFindManyRaceInput = "LANGUAGE_OPTIONS__TYPE_DESC"
	SortFindManyRaceInputNameAsc                              SortFindManyRaceInput = "NAME_ASC"
	SortFindManyRaceInputNameDesc                             SortFindManyRaceInput = "NAME_DESC"
	SortFindManyRaceInputSizeAsc                              SortFindManyRaceInput = "SIZE_ASC"
	SortFindManyRaceInputSizeDesc                             SortFindManyRaceInput = "SIZE_DESC"
	SortFindManyRaceInputSizeDescriptionAsc                   SortFindManyRaceInput = "SIZE_DESCRIPTION_ASC"
	SortFindManyRaceInputSizeDescriptionDesc                  SortFindManyRaceInput = "SIZE_DESCRIPTION_DESC"
	SortFindManyRaceInputSpeedAsc                             SortFindManyRaceInput = "SPEED_ASC"
	SortFindManyRaceInputSpeedDesc                            SortFindManyRaceInput = "SPEED_DESC"
	SortFindManyRaceInputStartingProficiencyOptionsChooseAsc  SortFindManyRaceInput = "STARTING_PROFICIENCY_OPTIONS__CHOOSE_ASC"
	SortFindManyRaceInputStartingProficiencyOptionsChooseDesc SortFindManyRaceInput = "STARTING_PROFICIENCY_OPTIONS__CHOOSE_DESC"
	SortFindManyRaceInputStartingProficiencyOptionsTypeAsc    SortFindManyRaceInput = "STARTING_PROFICIENCY_OPTIONS__TYPE_ASC"
	SortFindManyRaceInputStartingProficiencyOptionsTypeDesc   SortFindManyRaceInput = "STARTING_PROFICIENCY_OPTIONS__TYPE_DESC"
	SortFindManyRaceInputURLAsc                               SortFindManyRaceInput = "URL_ASC"
	SortFindManyRaceInputURLDesc                              SortFindManyRaceInput = "URL_DESC"
)

var AllSortFindManyRaceInput = []SortFindManyRaceInput{
	SortFindManyRaceInputIDAsc,
	SortFindManyRaceInputIDDesc,
	SortFindManyRaceInputAbilityBonusOptionsChooseAsc,
	SortFindManyRaceInputAbilityBonusOptionsChooseDesc,
	SortFindManyRaceInputAbilityBonusOptionsTypeAsc,
	SortFindManyRaceInputAbilityBonusOptionsTypeDesc,
	SortFindManyRaceInputAgeAsc,
	SortFindManyRaceInputAgeDesc,
	SortFindManyRaceInputAlignmentAsc,
	SortFindManyRaceInputAlignmentDesc,
	SortFindManyRaceInputIndexAsc,
	SortFindManyRaceInputIndexDesc,
	SortFindManyRaceInputLanguageDescAsc,
	SortFindManyRaceInputLanguageDescDesc,
	SortFindManyRaceInputLanguageOptionsChooseAsc,
	SortFindManyRaceInputLanguageOptionsChooseDesc,
	SortFindManyRaceInputLanguageOptionsTypeAsc,
	SortFindManyRaceInputLanguageOptionsTypeDesc,
	SortFindManyRaceInputNameAsc,
	SortFindManyRaceInputNameDesc,
	SortFindManyRaceInputSizeAsc,
	SortFindManyRaceInputSizeDesc,
	SortFindManyRaceInputSizeDescriptionAsc,
	SortFindManyRaceInputSizeDescriptionDesc,
	SortFindManyRaceInputSpeedAsc,
	SortFindManyRaceInputSpeedDesc,
	SortFindManyRaceInputStartingProficiencyOptionsChooseAsc,
	SortFindManyRaceInputStartingProficiencyOptionsChooseDesc,
	SortFindManyRaceInputStartingProficiencyOptionsTypeAsc,
	SortFindManyRaceInputStartingProficiencyOptionsTypeDesc,
	SortFindManyRaceInputURLAsc,
	SortFindManyRaceInputURLDesc,
}

func (e SortFindManyRaceInput) IsValid() bool {
	switch e {
	case SortFindManyRaceInputIDAsc, SortFindManyRaceInputIDDesc, SortFindManyRaceInputAbilityBonusOptionsChooseAsc, SortFindManyRaceInputAbilityBonusOptionsChooseDesc, SortFindManyRaceInputAbilityBonusOptionsTypeAsc, SortFindManyRaceInputAbilityBonusOptionsTypeDesc, SortFindManyRaceInputAgeAsc, SortFindManyRaceInputAgeDesc, SortFindManyRaceInputAlignmentAsc, SortFindManyRaceInputAlignmentDesc, SortFindManyRaceInputIndexAsc, SortFindManyRaceInputIndexDesc, SortFindManyRaceInputLanguageDescAsc, SortFindManyRaceInputLanguageDescDesc, SortFindManyRaceInputLanguageOptionsChooseAsc, SortFindManyRaceInputLanguageOptionsChooseDesc, SortFindManyRaceInputLanguageOptionsTypeAsc, SortFindManyRaceInputLanguageOptionsTypeDesc, SortFindManyRaceInputNameAsc, SortFindManyRaceInputNameDesc, SortFindManyRaceInputSizeAsc, SortFindManyRaceInputSizeDesc, SortFindManyRaceInputSizeDescriptionAsc, SortFindManyRaceInputSizeDescriptionDesc, SortFindManyRaceInputSpeedAsc, SortFindManyRaceInputSpeedDesc, SortFindManyRaceInputStartingProficiencyOptionsChooseAsc, SortFindManyRaceInputStartingProficiencyOptionsChooseDesc, SortFindManyRaceInputStartingProficiencyOptionsTypeAsc, SortFindManyRaceInputStartingProficiencyOptionsTypeDesc, SortFindManyRaceInputURLAsc, SortFindManyRaceInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyRaceInput) String() string {
	return string(e)
}

func (e *SortFindManyRaceInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyRaceInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyRaceInput", str)
	}
	return nil
}

func (e SortFindManyRaceInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyRuleInput string

const (
	SortFindManyRuleInputIDAsc     SortFindManyRuleInput = "_ID_ASC"
	SortFindManyRuleInputIDDesc    SortFindManyRuleInput = "_ID_DESC"
	SortFindManyRuleInputDescAsc   SortFindManyRuleInput = "DESC_ASC"
	SortFindManyRuleInputDescDesc  SortFindManyRuleInput = "DESC_DESC"
	SortFindManyRuleInputIndexAsc  SortFindManyRuleInput = "INDEX_ASC"
	SortFindManyRuleInputIndexDesc SortFindManyRuleInput = "INDEX_DESC"
	SortFindManyRuleInputNameAsc   SortFindManyRuleInput = "NAME_ASC"
	SortFindManyRuleInputNameDesc  SortFindManyRuleInput = "NAME_DESC"
	SortFindManyRuleInputURLAsc    SortFindManyRuleInput = "URL_ASC"
	SortFindManyRuleInputURLDesc   SortFindManyRuleInput = "URL_DESC"
)

var AllSortFindManyRuleInput = []SortFindManyRuleInput{
	SortFindManyRuleInputIDAsc,
	SortFindManyRuleInputIDDesc,
	SortFindManyRuleInputDescAsc,
	SortFindManyRuleInputDescDesc,
	SortFindManyRuleInputIndexAsc,
	SortFindManyRuleInputIndexDesc,
	SortFindManyRuleInputNameAsc,
	SortFindManyRuleInputNameDesc,
	SortFindManyRuleInputURLAsc,
	SortFindManyRuleInputURLDesc,
}

func (e SortFindManyRuleInput) IsValid() bool {
	switch e {
	case SortFindManyRuleInputIDAsc, SortFindManyRuleInputIDDesc, SortFindManyRuleInputDescAsc, SortFindManyRuleInputDescDesc, SortFindManyRuleInputIndexAsc, SortFindManyRuleInputIndexDesc, SortFindManyRuleInputNameAsc, SortFindManyRuleInputNameDesc, SortFindManyRuleInputURLAsc, SortFindManyRuleInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyRuleInput) String() string {
	return string(e)
}

func (e *SortFindManyRuleInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyRuleInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyRuleInput", str)
	}
	return nil
}

func (e SortFindManyRuleInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyRuleSectionInput string

const (
	SortFindManyRuleSectionInputIDAsc     SortFindManyRuleSectionInput = "_ID_ASC"
	SortFindManyRuleSectionInputIDDesc    SortFindManyRuleSectionInput = "_ID_DESC"
	SortFindManyRuleSectionInputDescAsc   SortFindManyRuleSectionInput = "DESC_ASC"
	SortFindManyRuleSectionInputDescDesc  SortFindManyRuleSectionInput = "DESC_DESC"
	SortFindManyRuleSectionInputIndexAsc  SortFindManyRuleSectionInput = "INDEX_ASC"
	SortFindManyRuleSectionInputIndexDesc SortFindManyRuleSectionInput = "INDEX_DESC"
	SortFindManyRuleSectionInputNameAsc   SortFindManyRuleSectionInput = "NAME_ASC"
	SortFindManyRuleSectionInputNameDesc  SortFindManyRuleSectionInput = "NAME_DESC"
	SortFindManyRuleSectionInputURLAsc    SortFindManyRuleSectionInput = "URL_ASC"
	SortFindManyRuleSectionInputURLDesc   SortFindManyRuleSectionInput = "URL_DESC"
)

var AllSortFindManyRuleSectionInput = []SortFindManyRuleSectionInput{
	SortFindManyRuleSectionInputIDAsc,
	SortFindManyRuleSectionInputIDDesc,
	SortFindManyRuleSectionInputDescAsc,
	SortFindManyRuleSectionInputDescDesc,
	SortFindManyRuleSectionInputIndexAsc,
	SortFindManyRuleSectionInputIndexDesc,
	SortFindManyRuleSectionInputNameAsc,
	SortFindManyRuleSectionInputNameDesc,
	SortFindManyRuleSectionInputURLAsc,
	SortFindManyRuleSectionInputURLDesc,
}

func (e SortFindManyRuleSectionInput) IsValid() bool {
	switch e {
	case SortFindManyRuleSectionInputIDAsc, SortFindManyRuleSectionInputIDDesc, SortFindManyRuleSectionInputDescAsc, SortFindManyRuleSectionInputDescDesc, SortFindManyRuleSectionInputIndexAsc, SortFindManyRuleSectionInputIndexDesc, SortFindManyRuleSectionInputNameAsc, SortFindManyRuleSectionInputNameDesc, SortFindManyRuleSectionInputURLAsc, SortFindManyRuleSectionInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyRuleSectionInput) String() string {
	return string(e)
}

func (e *SortFindManyRuleSectionInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyRuleSectionInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyRuleSectionInput", str)
	}
	return nil
}

func (e SortFindManyRuleSectionInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManySkillInput string

const (
	SortFindManySkillInputIDAsc                 SortFindManySkillInput = "_ID_ASC"
	SortFindManySkillInputIDDesc                SortFindManySkillInput = "_ID_DESC"
	SortFindManySkillInputAbilityScoreIndexAsc  SortFindManySkillInput = "ABILITY_SCORE__INDEX_ASC"
	SortFindManySkillInputAbilityScoreIndexDesc SortFindManySkillInput = "ABILITY_SCORE__INDEX_DESC"
	SortFindManySkillInputAbilityScoreNameAsc   SortFindManySkillInput = "ABILITY_SCORE__NAME_ASC"
	SortFindManySkillInputAbilityScoreNameDesc  SortFindManySkillInput = "ABILITY_SCORE__NAME_DESC"
	SortFindManySkillInputAbilityScoreURLAsc    SortFindManySkillInput = "ABILITY_SCORE__URL_ASC"
	SortFindManySkillInputAbilityScoreURLDesc   SortFindManySkillInput = "ABILITY_SCORE__URL_DESC"
	SortFindManySkillInputDescAsc               SortFindManySkillInput = "DESC_ASC"
	SortFindManySkillInputDescDesc              SortFindManySkillInput = "DESC_DESC"
	SortFindManySkillInputIndexAsc              SortFindManySkillInput = "INDEX_ASC"
	SortFindManySkillInputIndexDesc             SortFindManySkillInput = "INDEX_DESC"
	SortFindManySkillInputNameAsc               SortFindManySkillInput = "NAME_ASC"
	SortFindManySkillInputNameDesc              SortFindManySkillInput = "NAME_DESC"
	SortFindManySkillInputURLAsc                SortFindManySkillInput = "URL_ASC"
	SortFindManySkillInputURLDesc               SortFindManySkillInput = "URL_DESC"
)

var AllSortFindManySkillInput = []SortFindManySkillInput{
	SortFindManySkillInputIDAsc,
	SortFindManySkillInputIDDesc,
	SortFindManySkillInputAbilityScoreIndexAsc,
	SortFindManySkillInputAbilityScoreIndexDesc,
	SortFindManySkillInputAbilityScoreNameAsc,
	SortFindManySkillInputAbilityScoreNameDesc,
	SortFindManySkillInputAbilityScoreURLAsc,
	SortFindManySkillInputAbilityScoreURLDesc,
	SortFindManySkillInputDescAsc,
	SortFindManySkillInputDescDesc,
	SortFindManySkillInputIndexAsc,
	SortFindManySkillInputIndexDesc,
	SortFindManySkillInputNameAsc,
	SortFindManySkillInputNameDesc,
	SortFindManySkillInputURLAsc,
	SortFindManySkillInputURLDesc,
}

func (e SortFindManySkillInput) IsValid() bool {
	switch e {
	case SortFindManySkillInputIDAsc, SortFindManySkillInputIDDesc, SortFindManySkillInputAbilityScoreIndexAsc, SortFindManySkillInputAbilityScoreIndexDesc, SortFindManySkillInputAbilityScoreNameAsc, SortFindManySkillInputAbilityScoreNameDesc, SortFindManySkillInputAbilityScoreURLAsc, SortFindManySkillInputAbilityScoreURLDesc, SortFindManySkillInputDescAsc, SortFindManySkillInputDescDesc, SortFindManySkillInputIndexAsc, SortFindManySkillInputIndexDesc, SortFindManySkillInputNameAsc, SortFindManySkillInputNameDesc, SortFindManySkillInputURLAsc, SortFindManySkillInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManySkillInput) String() string {
	return string(e)
}

func (e *SortFindManySkillInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManySkillInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManySkillInput", str)
	}
	return nil
}

func (e SortFindManySkillInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManySpellInput string

const (
	SortFindManySpellInputIDAsc           SortFindManySpellInput = "_ID_ASC"
	SortFindManySpellInputIDDesc          SortFindManySpellInput = "_ID_DESC"
	SortFindManySpellInputSchoolIndexAsc  SortFindManySpellInput = "SCHOOL__INDEX_ASC"
	SortFindManySpellInputSchoolIndexDesc SortFindManySpellInput = "SCHOOL__INDEX_DESC"
	SortFindManySpellInputSchoolNameAsc   SortFindManySpellInput = "SCHOOL__NAME_ASC"
	SortFindManySpellInputSchoolNameDesc  SortFindManySpellInput = "SCHOOL__NAME_DESC"
	SortFindManySpellInputSchoolURLAsc    SortFindManySpellInput = "SCHOOL__URL_ASC"
	SortFindManySpellInputSchoolURLDesc   SortFindManySpellInput = "SCHOOL__URL_DESC"
)

var AllSortFindManySpellInput = []SortFindManySpellInput{
	SortFindManySpellInputIDAsc,
	SortFindManySpellInputIDDesc,
	SortFindManySpellInputSchoolIndexAsc,
	SortFindManySpellInputSchoolIndexDesc,
	SortFindManySpellInputSchoolNameAsc,
	SortFindManySpellInputSchoolNameDesc,
	SortFindManySpellInputSchoolURLAsc,
	SortFindManySpellInputSchoolURLDesc,
}

func (e SortFindManySpellInput) IsValid() bool {
	switch e {
	case SortFindManySpellInputIDAsc, SortFindManySpellInputIDDesc, SortFindManySpellInputSchoolIndexAsc, SortFindManySpellInputSchoolIndexDesc, SortFindManySpellInputSchoolNameAsc, SortFindManySpellInputSchoolNameDesc, SortFindManySpellInputSchoolURLAsc, SortFindManySpellInputSchoolURLDesc:
		return true
	}
	return false
}

func (e SortFindManySpellInput) String() string {
	return string(e)
}

func (e *SortFindManySpellInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManySpellInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManySpellInput", str)
	}
	return nil
}

func (e SortFindManySpellInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManySubclassInput string

const (
	SortFindManySubclassInputIDAsc              SortFindManySubclassInput = "_ID_ASC"
	SortFindManySubclassInputIDDesc             SortFindManySubclassInput = "_ID_DESC"
	SortFindManySubclassInputClassIndexAsc      SortFindManySubclassInput = "CLASS__INDEX_ASC"
	SortFindManySubclassInputClassIndexDesc     SortFindManySubclassInput = "CLASS__INDEX_DESC"
	SortFindManySubclassInputClassNameAsc       SortFindManySubclassInput = "CLASS__NAME_ASC"
	SortFindManySubclassInputClassNameDesc      SortFindManySubclassInput = "CLASS__NAME_DESC"
	SortFindManySubclassInputClassURLAsc        SortFindManySubclassInput = "CLASS__URL_ASC"
	SortFindManySubclassInputClassURLDesc       SortFindManySubclassInput = "CLASS__URL_DESC"
	SortFindManySubclassInputDescAsc            SortFindManySubclassInput = "DESC_ASC"
	SortFindManySubclassInputDescDesc           SortFindManySubclassInput = "DESC_DESC"
	SortFindManySubclassInputIndexAsc           SortFindManySubclassInput = "INDEX_ASC"
	SortFindManySubclassInputIndexDesc          SortFindManySubclassInput = "INDEX_DESC"
	SortFindManySubclassInputNameAsc            SortFindManySubclassInput = "NAME_ASC"
	SortFindManySubclassInputNameDesc           SortFindManySubclassInput = "NAME_DESC"
	SortFindManySubclassInputSubclassFlavorAsc  SortFindManySubclassInput = "SUBCLASS_FLAVOR_ASC"
	SortFindManySubclassInputSubclassFlavorDesc SortFindManySubclassInput = "SUBCLASS_FLAVOR_DESC"
	SortFindManySubclassInputSubclassLevelsAsc  SortFindManySubclassInput = "SUBCLASS_LEVELS_ASC"
	SortFindManySubclassInputSubclassLevelsDesc SortFindManySubclassInput = "SUBCLASS_LEVELS_DESC"
	SortFindManySubclassInputURLAsc             SortFindManySubclassInput = "URL_ASC"
	SortFindManySubclassInputURLDesc            SortFindManySubclassInput = "URL_DESC"
)

var AllSortFindManySubclassInput = []SortFindManySubclassInput{
	SortFindManySubclassInputIDAsc,
	SortFindManySubclassInputIDDesc,
	SortFindManySubclassInputClassIndexAsc,
	SortFindManySubclassInputClassIndexDesc,
	SortFindManySubclassInputClassNameAsc,
	SortFindManySubclassInputClassNameDesc,
	SortFindManySubclassInputClassURLAsc,
	SortFindManySubclassInputClassURLDesc,
	SortFindManySubclassInputDescAsc,
	SortFindManySubclassInputDescDesc,
	SortFindManySubclassInputIndexAsc,
	SortFindManySubclassInputIndexDesc,
	SortFindManySubclassInputNameAsc,
	SortFindManySubclassInputNameDesc,
	SortFindManySubclassInputSubclassFlavorAsc,
	SortFindManySubclassInputSubclassFlavorDesc,
	SortFindManySubclassInputSubclassLevelsAsc,
	SortFindManySubclassInputSubclassLevelsDesc,
	SortFindManySubclassInputURLAsc,
	SortFindManySubclassInputURLDesc,
}

func (e SortFindManySubclassInput) IsValid() bool {
	switch e {
	case SortFindManySubclassInputIDAsc, SortFindManySubclassInputIDDesc, SortFindManySubclassInputClassIndexAsc, SortFindManySubclassInputClassIndexDesc, SortFindManySubclassInputClassNameAsc, SortFindManySubclassInputClassNameDesc, SortFindManySubclassInputClassURLAsc, SortFindManySubclassInputClassURLDesc, SortFindManySubclassInputDescAsc, SortFindManySubclassInputDescDesc, SortFindManySubclassInputIndexAsc, SortFindManySubclassInputIndexDesc, SortFindManySubclassInputNameAsc, SortFindManySubclassInputNameDesc, SortFindManySubclassInputSubclassFlavorAsc, SortFindManySubclassInputSubclassFlavorDesc, SortFindManySubclassInputSubclassLevelsAsc, SortFindManySubclassInputSubclassLevelsDesc, SortFindManySubclassInputURLAsc, SortFindManySubclassInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManySubclassInput) String() string {
	return string(e)
}

func (e *SortFindManySubclassInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManySubclassInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManySubclassInput", str)
	}
	return nil
}

func (e SortFindManySubclassInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManySubraceInput string

const (
	SortFindManySubraceInputIDAsc                     SortFindManySubraceInput = "_ID_ASC"
	SortFindManySubraceInputIDDesc                    SortFindManySubraceInput = "_ID_DESC"
	SortFindManySubraceInputDescAsc                   SortFindManySubraceInput = "DESC_ASC"
	SortFindManySubraceInputDescDesc                  SortFindManySubraceInput = "DESC_DESC"
	SortFindManySubraceInputIndexAsc                  SortFindManySubraceInput = "INDEX_ASC"
	SortFindManySubraceInputIndexDesc                 SortFindManySubraceInput = "INDEX_DESC"
	SortFindManySubraceInputLanguageOptionsChooseAsc  SortFindManySubraceInput = "LANGUAGE_OPTIONS__CHOOSE_ASC"
	SortFindManySubraceInputLanguageOptionsChooseDesc SortFindManySubraceInput = "LANGUAGE_OPTIONS__CHOOSE_DESC"
	SortFindManySubraceInputLanguageOptionsTypeAsc    SortFindManySubraceInput = "LANGUAGE_OPTIONS__TYPE_ASC"
	SortFindManySubraceInputLanguageOptionsTypeDesc   SortFindManySubraceInput = "LANGUAGE_OPTIONS__TYPE_DESC"
	SortFindManySubraceInputNameAsc                   SortFindManySubraceInput = "NAME_ASC"
	SortFindManySubraceInputNameDesc                  SortFindManySubraceInput = "NAME_DESC"
	SortFindManySubraceInputRaceIndexAsc              SortFindManySubraceInput = "RACE__INDEX_ASC"
	SortFindManySubraceInputRaceIndexDesc             SortFindManySubraceInput = "RACE__INDEX_DESC"
	SortFindManySubraceInputRaceNameAsc               SortFindManySubraceInput = "RACE__NAME_ASC"
	SortFindManySubraceInputRaceNameDesc              SortFindManySubraceInput = "RACE__NAME_DESC"
	SortFindManySubraceInputRaceURLAsc                SortFindManySubraceInput = "RACE__URL_ASC"
	SortFindManySubraceInputRaceURLDesc               SortFindManySubraceInput = "RACE__URL_DESC"
	SortFindManySubraceInputURLAsc                    SortFindManySubraceInput = "URL_ASC"
	SortFindManySubraceInputURLDesc                   SortFindManySubraceInput = "URL_DESC"
)

var AllSortFindManySubraceInput = []SortFindManySubraceInput{
	SortFindManySubraceInputIDAsc,
	SortFindManySubraceInputIDDesc,
	SortFindManySubraceInputDescAsc,
	SortFindManySubraceInputDescDesc,
	SortFindManySubraceInputIndexAsc,
	SortFindManySubraceInputIndexDesc,
	SortFindManySubraceInputLanguageOptionsChooseAsc,
	SortFindManySubraceInputLanguageOptionsChooseDesc,
	SortFindManySubraceInputLanguageOptionsTypeAsc,
	SortFindManySubraceInputLanguageOptionsTypeDesc,
	SortFindManySubraceInputNameAsc,
	SortFindManySubraceInputNameDesc,
	SortFindManySubraceInputRaceIndexAsc,
	SortFindManySubraceInputRaceIndexDesc,
	SortFindManySubraceInputRaceNameAsc,
	SortFindManySubraceInputRaceNameDesc,
	SortFindManySubraceInputRaceURLAsc,
	SortFindManySubraceInputRaceURLDesc,
	SortFindManySubraceInputURLAsc,
	SortFindManySubraceInputURLDesc,
}

func (e SortFindManySubraceInput) IsValid() bool {
	switch e {
	case SortFindManySubraceInputIDAsc, SortFindManySubraceInputIDDesc, SortFindManySubraceInputDescAsc, SortFindManySubraceInputDescDesc, SortFindManySubraceInputIndexAsc, SortFindManySubraceInputIndexDesc, SortFindManySubraceInputLanguageOptionsChooseAsc, SortFindManySubraceInputLanguageOptionsChooseDesc, SortFindManySubraceInputLanguageOptionsTypeAsc, SortFindManySubraceInputLanguageOptionsTypeDesc, SortFindManySubraceInputNameAsc, SortFindManySubraceInputNameDesc, SortFindManySubraceInputRaceIndexAsc, SortFindManySubraceInputRaceIndexDesc, SortFindManySubraceInputRaceNameAsc, SortFindManySubraceInputRaceNameDesc, SortFindManySubraceInputRaceURLAsc, SortFindManySubraceInputRaceURLDesc, SortFindManySubraceInputURLAsc, SortFindManySubraceInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManySubraceInput) String() string {
	return string(e)
}

func (e *SortFindManySubraceInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManySubraceInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManySubraceInput", str)
	}
	return nil
}

func (e SortFindManySubraceInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyTraitInput string

const (
	SortFindManyTraitInputIDAsc                                      SortFindManyTraitInput = "_ID_ASC"
	SortFindManyTraitInputIDDesc                                     SortFindManyTraitInput = "_ID_DESC"
	SortFindManyTraitInputDescAsc                                    SortFindManyTraitInput = "DESC_ASC"
	SortFindManyTraitInputDescDesc                                   SortFindManyTraitInput = "DESC_DESC"
	SortFindManyTraitInputIndexAsc                                   SortFindManyTraitInput = "INDEX_ASC"
	SortFindManyTraitInputIndexDesc                                  SortFindManyTraitInput = "INDEX_DESC"
	SortFindManyTraitInputNameAsc                                    SortFindManyTraitInput = "NAME_ASC"
	SortFindManyTraitInputNameDesc                                   SortFindManyTraitInput = "NAME_DESC"
	SortFindManyTraitInputProficiencyChoicesChooseAsc                SortFindManyTraitInput = "PROFICIENCY_CHOICES__CHOOSE_ASC"
	SortFindManyTraitInputProficiencyChoicesChooseDesc               SortFindManyTraitInput = "PROFICIENCY_CHOICES__CHOOSE_DESC"
	SortFindManyTraitInputProficiencyChoicesTypeAsc                  SortFindManyTraitInput = "PROFICIENCY_CHOICES__TYPE_ASC"
	SortFindManyTraitInputProficiencyChoicesTypeDesc                 SortFindManyTraitInput = "PROFICIENCY_CHOICES__TYPE_DESC"
	SortFindManyTraitInputParentIndexAsc                             SortFindManyTraitInput = "PARENT__INDEX_ASC"
	SortFindManyTraitInputParentIndexDesc                            SortFindManyTraitInput = "PARENT__INDEX_DESC"
	SortFindManyTraitInputParentNameAsc                              SortFindManyTraitInput = "PARENT__NAME_ASC"
	SortFindManyTraitInputParentNameDesc                             SortFindManyTraitInput = "PARENT__NAME_DESC"
	SortFindManyTraitInputParentURLAsc                               SortFindManyTraitInput = "PARENT__URL_ASC"
	SortFindManyTraitInputParentURLDesc                              SortFindManyTraitInput = "PARENT__URL_DESC"
	SortFindManyTraitInputTraitSpecificSubtraitOptionsChooseAsc      SortFindManyTraitInput = "TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__CHOOSE_ASC"
	SortFindManyTraitInputTraitSpecificSubtraitOptionsChooseDesc     SortFindManyTraitInput = "TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__CHOOSE_DESC"
	SortFindManyTraitInputTraitSpecificSubtraitOptionsTypeAsc        SortFindManyTraitInput = "TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__TYPE_ASC"
	SortFindManyTraitInputTraitSpecificSubtraitOptionsTypeDesc       SortFindManyTraitInput = "TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__TYPE_DESC"
	SortFindManyTraitInputTraitSpecificSpellOptionsChooseAsc         SortFindManyTraitInput = "TRAIT_SPECIFIC__SPELL_OPTIONS__CHOOSE_ASC"
	SortFindManyTraitInputTraitSpecificSpellOptionsChooseDesc        SortFindManyTraitInput = "TRAIT_SPECIFIC__SPELL_OPTIONS__CHOOSE_DESC"
	SortFindManyTraitInputTraitSpecificSpellOptionsTypeAsc           SortFindManyTraitInput = "TRAIT_SPECIFIC__SPELL_OPTIONS__TYPE_ASC"
	SortFindManyTraitInputTraitSpecificSpellOptionsTypeDesc          SortFindManyTraitInput = "TRAIT_SPECIFIC__SPELL_OPTIONS__TYPE_DESC"
	SortFindManyTraitInputTraitSpecificDamageTypeIndexAsc            SortFindManyTraitInput = "TRAIT_SPECIFIC__DAMAGE_TYPE__INDEX_ASC"
	SortFindManyTraitInputTraitSpecificDamageTypeIndexDesc           SortFindManyTraitInput = "TRAIT_SPECIFIC__DAMAGE_TYPE__INDEX_DESC"
	SortFindManyTraitInputTraitSpecificDamageTypeNameAsc             SortFindManyTraitInput = "TRAIT_SPECIFIC__DAMAGE_TYPE__NAME_ASC"
	SortFindManyTraitInputTraitSpecificDamageTypeNameDesc            SortFindManyTraitInput = "TRAIT_SPECIFIC__DAMAGE_TYPE__NAME_DESC"
	SortFindManyTraitInputTraitSpecificDamageTypeURLAsc              SortFindManyTraitInput = "TRAIT_SPECIFIC__DAMAGE_TYPE__URL_ASC"
	SortFindManyTraitInputTraitSpecificDamageTypeURLDesc             SortFindManyTraitInput = "TRAIT_SPECIFIC__DAMAGE_TYPE__URL_DESC"
	SortFindManyTraitInputTraitSpecificBreathWeaponNameAsc           SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__NAME_ASC"
	SortFindManyTraitInputTraitSpecificBreathWeaponNameDesc          SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__NAME_DESC"
	SortFindManyTraitInputTraitSpecificBreathWeaponDescAsc           SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DESC_ASC"
	SortFindManyTraitInputTraitSpecificBreathWeaponDescDesc          SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DESC_DESC"
	SortFindManyTraitInputTraitSpecificBreathWeaponUsageTypeAsc      SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TYPE_ASC"
	SortFindManyTraitInputTraitSpecificBreathWeaponUsageTypeDesc     SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TYPE_DESC"
	SortFindManyTraitInputTraitSpecificBreathWeaponUsageTimesAsc     SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TIMES_ASC"
	SortFindManyTraitInputTraitSpecificBreathWeaponUsageTimesDesc    SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TIMES_DESC"
	SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeIndexAsc  SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__INDEX_ASC"
	SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeIndexDesc SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__INDEX_DESC"
	SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeNameAsc   SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__NAME_ASC"
	SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeNameDesc  SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__NAME_DESC"
	SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeURLAsc    SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__URL_ASC"
	SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeURLDesc   SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__URL_DESC"
	SortFindManyTraitInputTraitSpecificBreathWeaponDcSuccessTypeAsc  SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__SUCCESS_TYPE_ASC"
	SortFindManyTraitInputTraitSpecificBreathWeaponDcSuccessTypeDesc SortFindManyTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__SUCCESS_TYPE_DESC"
	SortFindManyTraitInputURLAsc                                     SortFindManyTraitInput = "URL_ASC"
	SortFindManyTraitInputURLDesc                                    SortFindManyTraitInput = "URL_DESC"
)

var AllSortFindManyTraitInput = []SortFindManyTraitInput{
	SortFindManyTraitInputIDAsc,
	SortFindManyTraitInputIDDesc,
	SortFindManyTraitInputDescAsc,
	SortFindManyTraitInputDescDesc,
	SortFindManyTraitInputIndexAsc,
	SortFindManyTraitInputIndexDesc,
	SortFindManyTraitInputNameAsc,
	SortFindManyTraitInputNameDesc,
	SortFindManyTraitInputProficiencyChoicesChooseAsc,
	SortFindManyTraitInputProficiencyChoicesChooseDesc,
	SortFindManyTraitInputProficiencyChoicesTypeAsc,
	SortFindManyTraitInputProficiencyChoicesTypeDesc,
	SortFindManyTraitInputParentIndexAsc,
	SortFindManyTraitInputParentIndexDesc,
	SortFindManyTraitInputParentNameAsc,
	SortFindManyTraitInputParentNameDesc,
	SortFindManyTraitInputParentURLAsc,
	SortFindManyTraitInputParentURLDesc,
	SortFindManyTraitInputTraitSpecificSubtraitOptionsChooseAsc,
	SortFindManyTraitInputTraitSpecificSubtraitOptionsChooseDesc,
	SortFindManyTraitInputTraitSpecificSubtraitOptionsTypeAsc,
	SortFindManyTraitInputTraitSpecificSubtraitOptionsTypeDesc,
	SortFindManyTraitInputTraitSpecificSpellOptionsChooseAsc,
	SortFindManyTraitInputTraitSpecificSpellOptionsChooseDesc,
	SortFindManyTraitInputTraitSpecificSpellOptionsTypeAsc,
	SortFindManyTraitInputTraitSpecificSpellOptionsTypeDesc,
	SortFindManyTraitInputTraitSpecificDamageTypeIndexAsc,
	SortFindManyTraitInputTraitSpecificDamageTypeIndexDesc,
	SortFindManyTraitInputTraitSpecificDamageTypeNameAsc,
	SortFindManyTraitInputTraitSpecificDamageTypeNameDesc,
	SortFindManyTraitInputTraitSpecificDamageTypeURLAsc,
	SortFindManyTraitInputTraitSpecificDamageTypeURLDesc,
	SortFindManyTraitInputTraitSpecificBreathWeaponNameAsc,
	SortFindManyTraitInputTraitSpecificBreathWeaponNameDesc,
	SortFindManyTraitInputTraitSpecificBreathWeaponDescAsc,
	SortFindManyTraitInputTraitSpecificBreathWeaponDescDesc,
	SortFindManyTraitInputTraitSpecificBreathWeaponUsageTypeAsc,
	SortFindManyTraitInputTraitSpecificBreathWeaponUsageTypeDesc,
	SortFindManyTraitInputTraitSpecificBreathWeaponUsageTimesAsc,
	SortFindManyTraitInputTraitSpecificBreathWeaponUsageTimesDesc,
	SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeIndexAsc,
	SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeIndexDesc,
	SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeNameAsc,
	SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeNameDesc,
	SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeURLAsc,
	SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeURLDesc,
	SortFindManyTraitInputTraitSpecificBreathWeaponDcSuccessTypeAsc,
	SortFindManyTraitInputTraitSpecificBreathWeaponDcSuccessTypeDesc,
	SortFindManyTraitInputURLAsc,
	SortFindManyTraitInputURLDesc,
}

func (e SortFindManyTraitInput) IsValid() bool {
	switch e {
	case SortFindManyTraitInputIDAsc, SortFindManyTraitInputIDDesc, SortFindManyTraitInputDescAsc, SortFindManyTraitInputDescDesc, SortFindManyTraitInputIndexAsc, SortFindManyTraitInputIndexDesc, SortFindManyTraitInputNameAsc, SortFindManyTraitInputNameDesc, SortFindManyTraitInputProficiencyChoicesChooseAsc, SortFindManyTraitInputProficiencyChoicesChooseDesc, SortFindManyTraitInputProficiencyChoicesTypeAsc, SortFindManyTraitInputProficiencyChoicesTypeDesc, SortFindManyTraitInputParentIndexAsc, SortFindManyTraitInputParentIndexDesc, SortFindManyTraitInputParentNameAsc, SortFindManyTraitInputParentNameDesc, SortFindManyTraitInputParentURLAsc, SortFindManyTraitInputParentURLDesc, SortFindManyTraitInputTraitSpecificSubtraitOptionsChooseAsc, SortFindManyTraitInputTraitSpecificSubtraitOptionsChooseDesc, SortFindManyTraitInputTraitSpecificSubtraitOptionsTypeAsc, SortFindManyTraitInputTraitSpecificSubtraitOptionsTypeDesc, SortFindManyTraitInputTraitSpecificSpellOptionsChooseAsc, SortFindManyTraitInputTraitSpecificSpellOptionsChooseDesc, SortFindManyTraitInputTraitSpecificSpellOptionsTypeAsc, SortFindManyTraitInputTraitSpecificSpellOptionsTypeDesc, SortFindManyTraitInputTraitSpecificDamageTypeIndexAsc, SortFindManyTraitInputTraitSpecificDamageTypeIndexDesc, SortFindManyTraitInputTraitSpecificDamageTypeNameAsc, SortFindManyTraitInputTraitSpecificDamageTypeNameDesc, SortFindManyTraitInputTraitSpecificDamageTypeURLAsc, SortFindManyTraitInputTraitSpecificDamageTypeURLDesc, SortFindManyTraitInputTraitSpecificBreathWeaponNameAsc, SortFindManyTraitInputTraitSpecificBreathWeaponNameDesc, SortFindManyTraitInputTraitSpecificBreathWeaponDescAsc, SortFindManyTraitInputTraitSpecificBreathWeaponDescDesc, SortFindManyTraitInputTraitSpecificBreathWeaponUsageTypeAsc, SortFindManyTraitInputTraitSpecificBreathWeaponUsageTypeDesc, SortFindManyTraitInputTraitSpecificBreathWeaponUsageTimesAsc, SortFindManyTraitInputTraitSpecificBreathWeaponUsageTimesDesc, SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeIndexAsc, SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeIndexDesc, SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeNameAsc, SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeNameDesc, SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeURLAsc, SortFindManyTraitInputTraitSpecificBreathWeaponDcDcTypeURLDesc, SortFindManyTraitInputTraitSpecificBreathWeaponDcSuccessTypeAsc, SortFindManyTraitInputTraitSpecificBreathWeaponDcSuccessTypeDesc, SortFindManyTraitInputURLAsc, SortFindManyTraitInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyTraitInput) String() string {
	return string(e)
}

func (e *SortFindManyTraitInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyTraitInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyTraitInput", str)
	}
	return nil
}

func (e SortFindManyTraitInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindManyWeaponPropertyInput string

const (
	SortFindManyWeaponPropertyInputIDAsc     SortFindManyWeaponPropertyInput = "_ID_ASC"
	SortFindManyWeaponPropertyInputIDDesc    SortFindManyWeaponPropertyInput = "_ID_DESC"
	SortFindManyWeaponPropertyInputDescAsc   SortFindManyWeaponPropertyInput = "DESC_ASC"
	SortFindManyWeaponPropertyInputDescDesc  SortFindManyWeaponPropertyInput = "DESC_DESC"
	SortFindManyWeaponPropertyInputIndexAsc  SortFindManyWeaponPropertyInput = "INDEX_ASC"
	SortFindManyWeaponPropertyInputIndexDesc SortFindManyWeaponPropertyInput = "INDEX_DESC"
	SortFindManyWeaponPropertyInputNameAsc   SortFindManyWeaponPropertyInput = "NAME_ASC"
	SortFindManyWeaponPropertyInputNameDesc  SortFindManyWeaponPropertyInput = "NAME_DESC"
	SortFindManyWeaponPropertyInputURLAsc    SortFindManyWeaponPropertyInput = "URL_ASC"
	SortFindManyWeaponPropertyInputURLDesc   SortFindManyWeaponPropertyInput = "URL_DESC"
)

var AllSortFindManyWeaponPropertyInput = []SortFindManyWeaponPropertyInput{
	SortFindManyWeaponPropertyInputIDAsc,
	SortFindManyWeaponPropertyInputIDDesc,
	SortFindManyWeaponPropertyInputDescAsc,
	SortFindManyWeaponPropertyInputDescDesc,
	SortFindManyWeaponPropertyInputIndexAsc,
	SortFindManyWeaponPropertyInputIndexDesc,
	SortFindManyWeaponPropertyInputNameAsc,
	SortFindManyWeaponPropertyInputNameDesc,
	SortFindManyWeaponPropertyInputURLAsc,
	SortFindManyWeaponPropertyInputURLDesc,
}

func (e SortFindManyWeaponPropertyInput) IsValid() bool {
	switch e {
	case SortFindManyWeaponPropertyInputIDAsc, SortFindManyWeaponPropertyInputIDDesc, SortFindManyWeaponPropertyInputDescAsc, SortFindManyWeaponPropertyInputDescDesc, SortFindManyWeaponPropertyInputIndexAsc, SortFindManyWeaponPropertyInputIndexDesc, SortFindManyWeaponPropertyInputNameAsc, SortFindManyWeaponPropertyInputNameDesc, SortFindManyWeaponPropertyInputURLAsc, SortFindManyWeaponPropertyInputURLDesc:
		return true
	}
	return false
}

func (e SortFindManyWeaponPropertyInput) String() string {
	return string(e)
}

func (e *SortFindManyWeaponPropertyInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindManyWeaponPropertyInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindManyWeaponPropertyInput", str)
	}
	return nil
}

func (e SortFindManyWeaponPropertyInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneAbilityScoreInput string

const (
	SortFindOneAbilityScoreInputIDAsc        SortFindOneAbilityScoreInput = "_ID_ASC"
	SortFindOneAbilityScoreInputIDDesc       SortFindOneAbilityScoreInput = "_ID_DESC"
	SortFindOneAbilityScoreInputDescAsc      SortFindOneAbilityScoreInput = "DESC_ASC"
	SortFindOneAbilityScoreInputDescDesc     SortFindOneAbilityScoreInput = "DESC_DESC"
	SortFindOneAbilityScoreInputFullNameAsc  SortFindOneAbilityScoreInput = "FULL_NAME_ASC"
	SortFindOneAbilityScoreInputFullNameDesc SortFindOneAbilityScoreInput = "FULL_NAME_DESC"
	SortFindOneAbilityScoreInputIndexAsc     SortFindOneAbilityScoreInput = "INDEX_ASC"
	SortFindOneAbilityScoreInputIndexDesc    SortFindOneAbilityScoreInput = "INDEX_DESC"
	SortFindOneAbilityScoreInputNameAsc      SortFindOneAbilityScoreInput = "NAME_ASC"
	SortFindOneAbilityScoreInputNameDesc     SortFindOneAbilityScoreInput = "NAME_DESC"
	SortFindOneAbilityScoreInputURLAsc       SortFindOneAbilityScoreInput = "URL_ASC"
	SortFindOneAbilityScoreInputURLDesc      SortFindOneAbilityScoreInput = "URL_DESC"
)

var AllSortFindOneAbilityScoreInput = []SortFindOneAbilityScoreInput{
	SortFindOneAbilityScoreInputIDAsc,
	SortFindOneAbilityScoreInputIDDesc,
	SortFindOneAbilityScoreInputDescAsc,
	SortFindOneAbilityScoreInputDescDesc,
	SortFindOneAbilityScoreInputFullNameAsc,
	SortFindOneAbilityScoreInputFullNameDesc,
	SortFindOneAbilityScoreInputIndexAsc,
	SortFindOneAbilityScoreInputIndexDesc,
	SortFindOneAbilityScoreInputNameAsc,
	SortFindOneAbilityScoreInputNameDesc,
	SortFindOneAbilityScoreInputURLAsc,
	SortFindOneAbilityScoreInputURLDesc,
}

func (e SortFindOneAbilityScoreInput) IsValid() bool {
	switch e {
	case SortFindOneAbilityScoreInputIDAsc, SortFindOneAbilityScoreInputIDDesc, SortFindOneAbilityScoreInputDescAsc, SortFindOneAbilityScoreInputDescDesc, SortFindOneAbilityScoreInputFullNameAsc, SortFindOneAbilityScoreInputFullNameDesc, SortFindOneAbilityScoreInputIndexAsc, SortFindOneAbilityScoreInputIndexDesc, SortFindOneAbilityScoreInputNameAsc, SortFindOneAbilityScoreInputNameDesc, SortFindOneAbilityScoreInputURLAsc, SortFindOneAbilityScoreInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneAbilityScoreInput) String() string {
	return string(e)
}

func (e *SortFindOneAbilityScoreInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneAbilityScoreInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneAbilityScoreInput", str)
	}
	return nil
}

func (e SortFindOneAbilityScoreInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneAlignmentInput string

const (
	SortFindOneAlignmentInputIDAsc            SortFindOneAlignmentInput = "_ID_ASC"
	SortFindOneAlignmentInputIDDesc           SortFindOneAlignmentInput = "_ID_DESC"
	SortFindOneAlignmentInputDescAsc          SortFindOneAlignmentInput = "DESC_ASC"
	SortFindOneAlignmentInputDescDesc         SortFindOneAlignmentInput = "DESC_DESC"
	SortFindOneAlignmentInputAbbreviationAsc  SortFindOneAlignmentInput = "ABBREVIATION_ASC"
	SortFindOneAlignmentInputAbbreviationDesc SortFindOneAlignmentInput = "ABBREVIATION_DESC"
	SortFindOneAlignmentInputIndexAsc         SortFindOneAlignmentInput = "INDEX_ASC"
	SortFindOneAlignmentInputIndexDesc        SortFindOneAlignmentInput = "INDEX_DESC"
	SortFindOneAlignmentInputNameAsc          SortFindOneAlignmentInput = "NAME_ASC"
	SortFindOneAlignmentInputNameDesc         SortFindOneAlignmentInput = "NAME_DESC"
	SortFindOneAlignmentInputURLAsc           SortFindOneAlignmentInput = "URL_ASC"
	SortFindOneAlignmentInputURLDesc          SortFindOneAlignmentInput = "URL_DESC"
)

var AllSortFindOneAlignmentInput = []SortFindOneAlignmentInput{
	SortFindOneAlignmentInputIDAsc,
	SortFindOneAlignmentInputIDDesc,
	SortFindOneAlignmentInputDescAsc,
	SortFindOneAlignmentInputDescDesc,
	SortFindOneAlignmentInputAbbreviationAsc,
	SortFindOneAlignmentInputAbbreviationDesc,
	SortFindOneAlignmentInputIndexAsc,
	SortFindOneAlignmentInputIndexDesc,
	SortFindOneAlignmentInputNameAsc,
	SortFindOneAlignmentInputNameDesc,
	SortFindOneAlignmentInputURLAsc,
	SortFindOneAlignmentInputURLDesc,
}

func (e SortFindOneAlignmentInput) IsValid() bool {
	switch e {
	case SortFindOneAlignmentInputIDAsc, SortFindOneAlignmentInputIDDesc, SortFindOneAlignmentInputDescAsc, SortFindOneAlignmentInputDescDesc, SortFindOneAlignmentInputAbbreviationAsc, SortFindOneAlignmentInputAbbreviationDesc, SortFindOneAlignmentInputIndexAsc, SortFindOneAlignmentInputIndexDesc, SortFindOneAlignmentInputNameAsc, SortFindOneAlignmentInputNameDesc, SortFindOneAlignmentInputURLAsc, SortFindOneAlignmentInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneAlignmentInput) String() string {
	return string(e)
}

func (e *SortFindOneAlignmentInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneAlignmentInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneAlignmentInput", str)
	}
	return nil
}

func (e SortFindOneAlignmentInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneBackgroundInput string

const (
	SortFindOneBackgroundInputIDAsc                       SortFindOneBackgroundInput = "_ID_ASC"
	SortFindOneBackgroundInputIDDesc                      SortFindOneBackgroundInput = "_ID_DESC"
	SortFindOneBackgroundInputIndexAsc                    SortFindOneBackgroundInput = "INDEX_ASC"
	SortFindOneBackgroundInputIndexDesc                   SortFindOneBackgroundInput = "INDEX_DESC"
	SortFindOneBackgroundInputNameAsc                     SortFindOneBackgroundInput = "NAME_ASC"
	SortFindOneBackgroundInputNameDesc                    SortFindOneBackgroundInput = "NAME_DESC"
	SortFindOneBackgroundInputLanguageOptionsChooseAsc    SortFindOneBackgroundInput = "LANGUAGE_OPTIONS__CHOOSE_ASC"
	SortFindOneBackgroundInputLanguageOptionsChooseDesc   SortFindOneBackgroundInput = "LANGUAGE_OPTIONS__CHOOSE_DESC"
	SortFindOneBackgroundInputLanguageOptionsTypeAsc      SortFindOneBackgroundInput = "LANGUAGE_OPTIONS__TYPE_ASC"
	SortFindOneBackgroundInputLanguageOptionsTypeDesc     SortFindOneBackgroundInput = "LANGUAGE_OPTIONS__TYPE_DESC"
	SortFindOneBackgroundInputURLAsc                      SortFindOneBackgroundInput = "URL_ASC"
	SortFindOneBackgroundInputURLDesc                     SortFindOneBackgroundInput = "URL_DESC"
	SortFindOneBackgroundInputFeatureNameAsc              SortFindOneBackgroundInput = "FEATURE__NAME_ASC"
	SortFindOneBackgroundInputFeatureNameDesc             SortFindOneBackgroundInput = "FEATURE__NAME_DESC"
	SortFindOneBackgroundInputFeatureDescAsc              SortFindOneBackgroundInput = "FEATURE__DESC_ASC"
	SortFindOneBackgroundInputFeatureDescDesc             SortFindOneBackgroundInput = "FEATURE__DESC_DESC"
	SortFindOneBackgroundInputPersonalityTraitsChooseAsc  SortFindOneBackgroundInput = "PERSONALITY_TRAITS__CHOOSE_ASC"
	SortFindOneBackgroundInputPersonalityTraitsChooseDesc SortFindOneBackgroundInput = "PERSONALITY_TRAITS__CHOOSE_DESC"
	SortFindOneBackgroundInputPersonalityTraitsFromAsc    SortFindOneBackgroundInput = "PERSONALITY_TRAITS__FROM_ASC"
	SortFindOneBackgroundInputPersonalityTraitsFromDesc   SortFindOneBackgroundInput = "PERSONALITY_TRAITS__FROM_DESC"
	SortFindOneBackgroundInputPersonalityTraitsTypeAsc    SortFindOneBackgroundInput = "PERSONALITY_TRAITS__TYPE_ASC"
	SortFindOneBackgroundInputPersonalityTraitsTypeDesc   SortFindOneBackgroundInput = "PERSONALITY_TRAITS__TYPE_DESC"
	SortFindOneBackgroundInputIDEalsChooseAsc             SortFindOneBackgroundInput = "IDEALS__CHOOSE_ASC"
	SortFindOneBackgroundInputIDEalsChooseDesc            SortFindOneBackgroundInput = "IDEALS__CHOOSE_DESC"
	SortFindOneBackgroundInputIDEalsTypeAsc               SortFindOneBackgroundInput = "IDEALS__TYPE_ASC"
	SortFindOneBackgroundInputIDEalsTypeDesc              SortFindOneBackgroundInput = "IDEALS__TYPE_DESC"
	SortFindOneBackgroundInputBondsChooseAsc              SortFindOneBackgroundInput = "BONDS__CHOOSE_ASC"
	SortFindOneBackgroundInputBondsChooseDesc             SortFindOneBackgroundInput = "BONDS__CHOOSE_DESC"
	SortFindOneBackgroundInputBondsFromAsc                SortFindOneBackgroundInput = "BONDS__FROM_ASC"
	SortFindOneBackgroundInputBondsFromDesc               SortFindOneBackgroundInput = "BONDS__FROM_DESC"
	SortFindOneBackgroundInputBondsTypeAsc                SortFindOneBackgroundInput = "BONDS__TYPE_ASC"
	SortFindOneBackgroundInputBondsTypeDesc               SortFindOneBackgroundInput = "BONDS__TYPE_DESC"
	SortFindOneBackgroundInputFlawsChooseAsc              SortFindOneBackgroundInput = "FLAWS__CHOOSE_ASC"
	SortFindOneBackgroundInputFlawsChooseDesc             SortFindOneBackgroundInput = "FLAWS__CHOOSE_DESC"
	SortFindOneBackgroundInputFlawsFromAsc                SortFindOneBackgroundInput = "FLAWS__FROM_ASC"
	SortFindOneBackgroundInputFlawsFromDesc               SortFindOneBackgroundInput = "FLAWS__FROM_DESC"
	SortFindOneBackgroundInputFlawsTypeAsc                SortFindOneBackgroundInput = "FLAWS__TYPE_ASC"
	SortFindOneBackgroundInputFlawsTypeDesc               SortFindOneBackgroundInput = "FLAWS__TYPE_DESC"
)

var AllSortFindOneBackgroundInput = []SortFindOneBackgroundInput{
	SortFindOneBackgroundInputIDAsc,
	SortFindOneBackgroundInputIDDesc,
	SortFindOneBackgroundInputIndexAsc,
	SortFindOneBackgroundInputIndexDesc,
	SortFindOneBackgroundInputNameAsc,
	SortFindOneBackgroundInputNameDesc,
	SortFindOneBackgroundInputLanguageOptionsChooseAsc,
	SortFindOneBackgroundInputLanguageOptionsChooseDesc,
	SortFindOneBackgroundInputLanguageOptionsTypeAsc,
	SortFindOneBackgroundInputLanguageOptionsTypeDesc,
	SortFindOneBackgroundInputURLAsc,
	SortFindOneBackgroundInputURLDesc,
	SortFindOneBackgroundInputFeatureNameAsc,
	SortFindOneBackgroundInputFeatureNameDesc,
	SortFindOneBackgroundInputFeatureDescAsc,
	SortFindOneBackgroundInputFeatureDescDesc,
	SortFindOneBackgroundInputPersonalityTraitsChooseAsc,
	SortFindOneBackgroundInputPersonalityTraitsChooseDesc,
	SortFindOneBackgroundInputPersonalityTraitsFromAsc,
	SortFindOneBackgroundInputPersonalityTraitsFromDesc,
	SortFindOneBackgroundInputPersonalityTraitsTypeAsc,
	SortFindOneBackgroundInputPersonalityTraitsTypeDesc,
	SortFindOneBackgroundInputIDEalsChooseAsc,
	SortFindOneBackgroundInputIDEalsChooseDesc,
	SortFindOneBackgroundInputIDEalsTypeAsc,
	SortFindOneBackgroundInputIDEalsTypeDesc,
	SortFindOneBackgroundInputBondsChooseAsc,
	SortFindOneBackgroundInputBondsChooseDesc,
	SortFindOneBackgroundInputBondsFromAsc,
	SortFindOneBackgroundInputBondsFromDesc,
	SortFindOneBackgroundInputBondsTypeAsc,
	SortFindOneBackgroundInputBondsTypeDesc,
	SortFindOneBackgroundInputFlawsChooseAsc,
	SortFindOneBackgroundInputFlawsChooseDesc,
	SortFindOneBackgroundInputFlawsFromAsc,
	SortFindOneBackgroundInputFlawsFromDesc,
	SortFindOneBackgroundInputFlawsTypeAsc,
	SortFindOneBackgroundInputFlawsTypeDesc,
}

func (e SortFindOneBackgroundInput) IsValid() bool {
	switch e {
	case SortFindOneBackgroundInputIDAsc, SortFindOneBackgroundInputIDDesc, SortFindOneBackgroundInputIndexAsc, SortFindOneBackgroundInputIndexDesc, SortFindOneBackgroundInputNameAsc, SortFindOneBackgroundInputNameDesc, SortFindOneBackgroundInputLanguageOptionsChooseAsc, SortFindOneBackgroundInputLanguageOptionsChooseDesc, SortFindOneBackgroundInputLanguageOptionsTypeAsc, SortFindOneBackgroundInputLanguageOptionsTypeDesc, SortFindOneBackgroundInputURLAsc, SortFindOneBackgroundInputURLDesc, SortFindOneBackgroundInputFeatureNameAsc, SortFindOneBackgroundInputFeatureNameDesc, SortFindOneBackgroundInputFeatureDescAsc, SortFindOneBackgroundInputFeatureDescDesc, SortFindOneBackgroundInputPersonalityTraitsChooseAsc, SortFindOneBackgroundInputPersonalityTraitsChooseDesc, SortFindOneBackgroundInputPersonalityTraitsFromAsc, SortFindOneBackgroundInputPersonalityTraitsFromDesc, SortFindOneBackgroundInputPersonalityTraitsTypeAsc, SortFindOneBackgroundInputPersonalityTraitsTypeDesc, SortFindOneBackgroundInputIDEalsChooseAsc, SortFindOneBackgroundInputIDEalsChooseDesc, SortFindOneBackgroundInputIDEalsTypeAsc, SortFindOneBackgroundInputIDEalsTypeDesc, SortFindOneBackgroundInputBondsChooseAsc, SortFindOneBackgroundInputBondsChooseDesc, SortFindOneBackgroundInputBondsFromAsc, SortFindOneBackgroundInputBondsFromDesc, SortFindOneBackgroundInputBondsTypeAsc, SortFindOneBackgroundInputBondsTypeDesc, SortFindOneBackgroundInputFlawsChooseAsc, SortFindOneBackgroundInputFlawsChooseDesc, SortFindOneBackgroundInputFlawsFromAsc, SortFindOneBackgroundInputFlawsFromDesc, SortFindOneBackgroundInputFlawsTypeAsc, SortFindOneBackgroundInputFlawsTypeDesc:
		return true
	}
	return false
}

func (e SortFindOneBackgroundInput) String() string {
	return string(e)
}

func (e *SortFindOneBackgroundInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneBackgroundInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneBackgroundInput", str)
	}
	return nil
}

func (e SortFindOneBackgroundInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneClassInput string

const (
	SortFindOneClassInputIDAsc                                      SortFindOneClassInput = "_ID_ASC"
	SortFindOneClassInputIDDesc                                     SortFindOneClassInput = "_ID_DESC"
	SortFindOneClassInputClassLevelsAsc                             SortFindOneClassInput = "CLASS_LEVELS_ASC"
	SortFindOneClassInputClassLevelsDesc                            SortFindOneClassInput = "CLASS_LEVELS_DESC"
	SortFindOneClassInputMultiClassingPrerequisiteOptionsChooseAsc  SortFindOneClassInput = "MULTI_CLASSING__PREREQUISITE_OPTIONS__CHOOSE_ASC"
	SortFindOneClassInputMultiClassingPrerequisiteOptionsChooseDesc SortFindOneClassInput = "MULTI_CLASSING__PREREQUISITE_OPTIONS__CHOOSE_DESC"
	SortFindOneClassInputMultiClassingPrerequisiteOptionsTypeAsc    SortFindOneClassInput = "MULTI_CLASSING__PREREQUISITE_OPTIONS__TYPE_ASC"
	SortFindOneClassInputMultiClassingPrerequisiteOptionsTypeDesc   SortFindOneClassInput = "MULTI_CLASSING__PREREQUISITE_OPTIONS__TYPE_DESC"
	SortFindOneClassInputHitDieAsc                                  SortFindOneClassInput = "HIT_DIE_ASC"
	SortFindOneClassInputHitDieDesc                                 SortFindOneClassInput = "HIT_DIE_DESC"
	SortFindOneClassInputIndexAsc                                   SortFindOneClassInput = "INDEX_ASC"
	SortFindOneClassInputIndexDesc                                  SortFindOneClassInput = "INDEX_DESC"
	SortFindOneClassInputNameAsc                                    SortFindOneClassInput = "NAME_ASC"
	SortFindOneClassInputNameDesc                                   SortFindOneClassInput = "NAME_DESC"
	SortFindOneClassInputSpellcastingLevelAsc                       SortFindOneClassInput = "SPELLCASTING__LEVEL_ASC"
	SortFindOneClassInputSpellcastingLevelDesc                      SortFindOneClassInput = "SPELLCASTING__LEVEL_DESC"
	SortFindOneClassInputSpellcastingSpellcastingAbilityIndexAsc    SortFindOneClassInput = "SPELLCASTING__SPELLCASTING_ABILITY__INDEX_ASC"
	SortFindOneClassInputSpellcastingSpellcastingAbilityIndexDesc   SortFindOneClassInput = "SPELLCASTING__SPELLCASTING_ABILITY__INDEX_DESC"
	SortFindOneClassInputSpellcastingSpellcastingAbilityNameAsc     SortFindOneClassInput = "SPELLCASTING__SPELLCASTING_ABILITY__NAME_ASC"
	SortFindOneClassInputSpellcastingSpellcastingAbilityNameDesc    SortFindOneClassInput = "SPELLCASTING__SPELLCASTING_ABILITY__NAME_DESC"
	SortFindOneClassInputSpellcastingSpellcastingAbilityURLAsc      SortFindOneClassInput = "SPELLCASTING__SPELLCASTING_ABILITY__URL_ASC"
	SortFindOneClassInputSpellcastingSpellcastingAbilityURLDesc     SortFindOneClassInput = "SPELLCASTING__SPELLCASTING_ABILITY__URL_DESC"
	SortFindOneClassInputSpellsAsc                                  SortFindOneClassInput = "SPELLS_ASC"
	SortFindOneClassInputSpellsDesc                                 SortFindOneClassInput = "SPELLS_DESC"
	SortFindOneClassInputURLAsc                                     SortFindOneClassInput = "URL_ASC"
	SortFindOneClassInputURLDesc                                    SortFindOneClassInput = "URL_DESC"
)

var AllSortFindOneClassInput = []SortFindOneClassInput{
	SortFindOneClassInputIDAsc,
	SortFindOneClassInputIDDesc,
	SortFindOneClassInputClassLevelsAsc,
	SortFindOneClassInputClassLevelsDesc,
	SortFindOneClassInputMultiClassingPrerequisiteOptionsChooseAsc,
	SortFindOneClassInputMultiClassingPrerequisiteOptionsChooseDesc,
	SortFindOneClassInputMultiClassingPrerequisiteOptionsTypeAsc,
	SortFindOneClassInputMultiClassingPrerequisiteOptionsTypeDesc,
	SortFindOneClassInputHitDieAsc,
	SortFindOneClassInputHitDieDesc,
	SortFindOneClassInputIndexAsc,
	SortFindOneClassInputIndexDesc,
	SortFindOneClassInputNameAsc,
	SortFindOneClassInputNameDesc,
	SortFindOneClassInputSpellcastingLevelAsc,
	SortFindOneClassInputSpellcastingLevelDesc,
	SortFindOneClassInputSpellcastingSpellcastingAbilityIndexAsc,
	SortFindOneClassInputSpellcastingSpellcastingAbilityIndexDesc,
	SortFindOneClassInputSpellcastingSpellcastingAbilityNameAsc,
	SortFindOneClassInputSpellcastingSpellcastingAbilityNameDesc,
	SortFindOneClassInputSpellcastingSpellcastingAbilityURLAsc,
	SortFindOneClassInputSpellcastingSpellcastingAbilityURLDesc,
	SortFindOneClassInputSpellsAsc,
	SortFindOneClassInputSpellsDesc,
	SortFindOneClassInputURLAsc,
	SortFindOneClassInputURLDesc,
}

func (e SortFindOneClassInput) IsValid() bool {
	switch e {
	case SortFindOneClassInputIDAsc, SortFindOneClassInputIDDesc, SortFindOneClassInputClassLevelsAsc, SortFindOneClassInputClassLevelsDesc, SortFindOneClassInputMultiClassingPrerequisiteOptionsChooseAsc, SortFindOneClassInputMultiClassingPrerequisiteOptionsChooseDesc, SortFindOneClassInputMultiClassingPrerequisiteOptionsTypeAsc, SortFindOneClassInputMultiClassingPrerequisiteOptionsTypeDesc, SortFindOneClassInputHitDieAsc, SortFindOneClassInputHitDieDesc, SortFindOneClassInputIndexAsc, SortFindOneClassInputIndexDesc, SortFindOneClassInputNameAsc, SortFindOneClassInputNameDesc, SortFindOneClassInputSpellcastingLevelAsc, SortFindOneClassInputSpellcastingLevelDesc, SortFindOneClassInputSpellcastingSpellcastingAbilityIndexAsc, SortFindOneClassInputSpellcastingSpellcastingAbilityIndexDesc, SortFindOneClassInputSpellcastingSpellcastingAbilityNameAsc, SortFindOneClassInputSpellcastingSpellcastingAbilityNameDesc, SortFindOneClassInputSpellcastingSpellcastingAbilityURLAsc, SortFindOneClassInputSpellcastingSpellcastingAbilityURLDesc, SortFindOneClassInputSpellsAsc, SortFindOneClassInputSpellsDesc, SortFindOneClassInputURLAsc, SortFindOneClassInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneClassInput) String() string {
	return string(e)
}

func (e *SortFindOneClassInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneClassInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneClassInput", str)
	}
	return nil
}

func (e SortFindOneClassInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneConditionInput string

const (
	SortFindOneConditionInputIDAsc     SortFindOneConditionInput = "_ID_ASC"
	SortFindOneConditionInputIDDesc    SortFindOneConditionInput = "_ID_DESC"
	SortFindOneConditionInputDescAsc   SortFindOneConditionInput = "DESC_ASC"
	SortFindOneConditionInputDescDesc  SortFindOneConditionInput = "DESC_DESC"
	SortFindOneConditionInputIndexAsc  SortFindOneConditionInput = "INDEX_ASC"
	SortFindOneConditionInputIndexDesc SortFindOneConditionInput = "INDEX_DESC"
	SortFindOneConditionInputNameAsc   SortFindOneConditionInput = "NAME_ASC"
	SortFindOneConditionInputNameDesc  SortFindOneConditionInput = "NAME_DESC"
	SortFindOneConditionInputURLAsc    SortFindOneConditionInput = "URL_ASC"
	SortFindOneConditionInputURLDesc   SortFindOneConditionInput = "URL_DESC"
)

var AllSortFindOneConditionInput = []SortFindOneConditionInput{
	SortFindOneConditionInputIDAsc,
	SortFindOneConditionInputIDDesc,
	SortFindOneConditionInputDescAsc,
	SortFindOneConditionInputDescDesc,
	SortFindOneConditionInputIndexAsc,
	SortFindOneConditionInputIndexDesc,
	SortFindOneConditionInputNameAsc,
	SortFindOneConditionInputNameDesc,
	SortFindOneConditionInputURLAsc,
	SortFindOneConditionInputURLDesc,
}

func (e SortFindOneConditionInput) IsValid() bool {
	switch e {
	case SortFindOneConditionInputIDAsc, SortFindOneConditionInputIDDesc, SortFindOneConditionInputDescAsc, SortFindOneConditionInputDescDesc, SortFindOneConditionInputIndexAsc, SortFindOneConditionInputIndexDesc, SortFindOneConditionInputNameAsc, SortFindOneConditionInputNameDesc, SortFindOneConditionInputURLAsc, SortFindOneConditionInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneConditionInput) String() string {
	return string(e)
}

func (e *SortFindOneConditionInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneConditionInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneConditionInput", str)
	}
	return nil
}

func (e SortFindOneConditionInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneDamageTypeInput string

const (
	SortFindOneDamageTypeInputIDAsc     SortFindOneDamageTypeInput = "_ID_ASC"
	SortFindOneDamageTypeInputIDDesc    SortFindOneDamageTypeInput = "_ID_DESC"
	SortFindOneDamageTypeInputDescAsc   SortFindOneDamageTypeInput = "DESC_ASC"
	SortFindOneDamageTypeInputDescDesc  SortFindOneDamageTypeInput = "DESC_DESC"
	SortFindOneDamageTypeInputIndexAsc  SortFindOneDamageTypeInput = "INDEX_ASC"
	SortFindOneDamageTypeInputIndexDesc SortFindOneDamageTypeInput = "INDEX_DESC"
	SortFindOneDamageTypeInputNameAsc   SortFindOneDamageTypeInput = "NAME_ASC"
	SortFindOneDamageTypeInputNameDesc  SortFindOneDamageTypeInput = "NAME_DESC"
	SortFindOneDamageTypeInputURLAsc    SortFindOneDamageTypeInput = "URL_ASC"
	SortFindOneDamageTypeInputURLDesc   SortFindOneDamageTypeInput = "URL_DESC"
)

var AllSortFindOneDamageTypeInput = []SortFindOneDamageTypeInput{
	SortFindOneDamageTypeInputIDAsc,
	SortFindOneDamageTypeInputIDDesc,
	SortFindOneDamageTypeInputDescAsc,
	SortFindOneDamageTypeInputDescDesc,
	SortFindOneDamageTypeInputIndexAsc,
	SortFindOneDamageTypeInputIndexDesc,
	SortFindOneDamageTypeInputNameAsc,
	SortFindOneDamageTypeInputNameDesc,
	SortFindOneDamageTypeInputURLAsc,
	SortFindOneDamageTypeInputURLDesc,
}

func (e SortFindOneDamageTypeInput) IsValid() bool {
	switch e {
	case SortFindOneDamageTypeInputIDAsc, SortFindOneDamageTypeInputIDDesc, SortFindOneDamageTypeInputDescAsc, SortFindOneDamageTypeInputDescDesc, SortFindOneDamageTypeInputIndexAsc, SortFindOneDamageTypeInputIndexDesc, SortFindOneDamageTypeInputNameAsc, SortFindOneDamageTypeInputNameDesc, SortFindOneDamageTypeInputURLAsc, SortFindOneDamageTypeInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneDamageTypeInput) String() string {
	return string(e)
}

func (e *SortFindOneDamageTypeInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneDamageTypeInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneDamageTypeInput", str)
	}
	return nil
}

func (e SortFindOneDamageTypeInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneEquipmentCategoryInput string

const (
	SortFindOneEquipmentCategoryInputIDAsc     SortFindOneEquipmentCategoryInput = "_ID_ASC"
	SortFindOneEquipmentCategoryInputIDDesc    SortFindOneEquipmentCategoryInput = "_ID_DESC"
	SortFindOneEquipmentCategoryInputIndexAsc  SortFindOneEquipmentCategoryInput = "INDEX_ASC"
	SortFindOneEquipmentCategoryInputIndexDesc SortFindOneEquipmentCategoryInput = "INDEX_DESC"
	SortFindOneEquipmentCategoryInputNameAsc   SortFindOneEquipmentCategoryInput = "NAME_ASC"
	SortFindOneEquipmentCategoryInputNameDesc  SortFindOneEquipmentCategoryInput = "NAME_DESC"
	SortFindOneEquipmentCategoryInputURLAsc    SortFindOneEquipmentCategoryInput = "URL_ASC"
	SortFindOneEquipmentCategoryInputURLDesc   SortFindOneEquipmentCategoryInput = "URL_DESC"
)

var AllSortFindOneEquipmentCategoryInput = []SortFindOneEquipmentCategoryInput{
	SortFindOneEquipmentCategoryInputIDAsc,
	SortFindOneEquipmentCategoryInputIDDesc,
	SortFindOneEquipmentCategoryInputIndexAsc,
	SortFindOneEquipmentCategoryInputIndexDesc,
	SortFindOneEquipmentCategoryInputNameAsc,
	SortFindOneEquipmentCategoryInputNameDesc,
	SortFindOneEquipmentCategoryInputURLAsc,
	SortFindOneEquipmentCategoryInputURLDesc,
}

func (e SortFindOneEquipmentCategoryInput) IsValid() bool {
	switch e {
	case SortFindOneEquipmentCategoryInputIDAsc, SortFindOneEquipmentCategoryInputIDDesc, SortFindOneEquipmentCategoryInputIndexAsc, SortFindOneEquipmentCategoryInputIndexDesc, SortFindOneEquipmentCategoryInputNameAsc, SortFindOneEquipmentCategoryInputNameDesc, SortFindOneEquipmentCategoryInputURLAsc, SortFindOneEquipmentCategoryInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneEquipmentCategoryInput) String() string {
	return string(e)
}

func (e *SortFindOneEquipmentCategoryInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneEquipmentCategoryInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneEquipmentCategoryInput", str)
	}
	return nil
}

func (e SortFindOneEquipmentCategoryInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneEquipmentInput string

const (
	SortFindOneEquipmentInputIDAsc                              SortFindOneEquipmentInput = "_ID_ASC"
	SortFindOneEquipmentInputIDDesc                             SortFindOneEquipmentInput = "_ID_DESC"
	SortFindOneEquipmentInputArmorCategoryAsc                   SortFindOneEquipmentInput = "ARMOR_CATEGORY_ASC"
	SortFindOneEquipmentInputArmorCategoryDesc                  SortFindOneEquipmentInput = "ARMOR_CATEGORY_DESC"
	SortFindOneEquipmentInputArmorClassBaseAsc                  SortFindOneEquipmentInput = "ARMOR_CLASS__BASE_ASC"
	SortFindOneEquipmentInputArmorClassBaseDesc                 SortFindOneEquipmentInput = "ARMOR_CLASS__BASE_DESC"
	SortFindOneEquipmentInputArmorClassDexBonusAsc              SortFindOneEquipmentInput = "ARMOR_CLASS__DEX_BONUS_ASC"
	SortFindOneEquipmentInputArmorClassDexBonusDesc             SortFindOneEquipmentInput = "ARMOR_CLASS__DEX_BONUS_DESC"
	SortFindOneEquipmentInputArmorClassMaxBonusAsc              SortFindOneEquipmentInput = "ARMOR_CLASS__MAX_BONUS_ASC"
	SortFindOneEquipmentInputArmorClassMaxBonusDesc             SortFindOneEquipmentInput = "ARMOR_CLASS__MAX_BONUS_DESC"
	SortFindOneEquipmentInputCapacityAsc                        SortFindOneEquipmentInput = "CAPACITY_ASC"
	SortFindOneEquipmentInputCapacityDesc                       SortFindOneEquipmentInput = "CAPACITY_DESC"
	SortFindOneEquipmentInputCategoryRangeAsc                   SortFindOneEquipmentInput = "CATEGORY_RANGE_ASC"
	SortFindOneEquipmentInputCategoryRangeDesc                  SortFindOneEquipmentInput = "CATEGORY_RANGE_DESC"
	SortFindOneEquipmentInputCostQuantityAsc                    SortFindOneEquipmentInput = "COST__QUANTITY_ASC"
	SortFindOneEquipmentInputCostQuantityDesc                   SortFindOneEquipmentInput = "COST__QUANTITY_DESC"
	SortFindOneEquipmentInputCostUnitAsc                        SortFindOneEquipmentInput = "COST__UNIT_ASC"
	SortFindOneEquipmentInputCostUnitDesc                       SortFindOneEquipmentInput = "COST__UNIT_DESC"
	SortFindOneEquipmentInputDamageDamageDiceAsc                SortFindOneEquipmentInput = "DAMAGE__DAMAGE_DICE_ASC"
	SortFindOneEquipmentInputDamageDamageDiceDesc               SortFindOneEquipmentInput = "DAMAGE__DAMAGE_DICE_DESC"
	SortFindOneEquipmentInputDamageDamageTypeIndexAsc           SortFindOneEquipmentInput = "DAMAGE__DAMAGE_TYPE__INDEX_ASC"
	SortFindOneEquipmentInputDamageDamageTypeIndexDesc          SortFindOneEquipmentInput = "DAMAGE__DAMAGE_TYPE__INDEX_DESC"
	SortFindOneEquipmentInputDamageDamageTypeNameAsc            SortFindOneEquipmentInput = "DAMAGE__DAMAGE_TYPE__NAME_ASC"
	SortFindOneEquipmentInputDamageDamageTypeNameDesc           SortFindOneEquipmentInput = "DAMAGE__DAMAGE_TYPE__NAME_DESC"
	SortFindOneEquipmentInputDamageDamageTypeURLAsc             SortFindOneEquipmentInput = "DAMAGE__DAMAGE_TYPE__URL_ASC"
	SortFindOneEquipmentInputDamageDamageTypeURLDesc            SortFindOneEquipmentInput = "DAMAGE__DAMAGE_TYPE__URL_DESC"
	SortFindOneEquipmentInputDescAsc                            SortFindOneEquipmentInput = "DESC_ASC"
	SortFindOneEquipmentInputDescDesc                           SortFindOneEquipmentInput = "DESC_DESC"
	SortFindOneEquipmentInputEquipmentCategoryIndexAsc          SortFindOneEquipmentInput = "EQUIPMENT_CATEGORY__INDEX_ASC"
	SortFindOneEquipmentInputEquipmentCategoryIndexDesc         SortFindOneEquipmentInput = "EQUIPMENT_CATEGORY__INDEX_DESC"
	SortFindOneEquipmentInputEquipmentCategoryNameAsc           SortFindOneEquipmentInput = "EQUIPMENT_CATEGORY__NAME_ASC"
	SortFindOneEquipmentInputEquipmentCategoryNameDesc          SortFindOneEquipmentInput = "EQUIPMENT_CATEGORY__NAME_DESC"
	SortFindOneEquipmentInputEquipmentCategoryURLAsc            SortFindOneEquipmentInput = "EQUIPMENT_CATEGORY__URL_ASC"
	SortFindOneEquipmentInputEquipmentCategoryURLDesc           SortFindOneEquipmentInput = "EQUIPMENT_CATEGORY__URL_DESC"
	SortFindOneEquipmentInputGearCategoryIndexAsc               SortFindOneEquipmentInput = "GEAR_CATEGORY__INDEX_ASC"
	SortFindOneEquipmentInputGearCategoryIndexDesc              SortFindOneEquipmentInput = "GEAR_CATEGORY__INDEX_DESC"
	SortFindOneEquipmentInputGearCategoryNameAsc                SortFindOneEquipmentInput = "GEAR_CATEGORY__NAME_ASC"
	SortFindOneEquipmentInputGearCategoryNameDesc               SortFindOneEquipmentInput = "GEAR_CATEGORY__NAME_DESC"
	SortFindOneEquipmentInputGearCategoryURLAsc                 SortFindOneEquipmentInput = "GEAR_CATEGORY__URL_ASC"
	SortFindOneEquipmentInputGearCategoryURLDesc                SortFindOneEquipmentInput = "GEAR_CATEGORY__URL_DESC"
	SortFindOneEquipmentInputIndexAsc                           SortFindOneEquipmentInput = "INDEX_ASC"
	SortFindOneEquipmentInputIndexDesc                          SortFindOneEquipmentInput = "INDEX_DESC"
	SortFindOneEquipmentInputNameAsc                            SortFindOneEquipmentInput = "NAME_ASC"
	SortFindOneEquipmentInputNameDesc                           SortFindOneEquipmentInput = "NAME_DESC"
	SortFindOneEquipmentInputQuantityAsc                        SortFindOneEquipmentInput = "QUANTITY_ASC"
	SortFindOneEquipmentInputQuantityDesc                       SortFindOneEquipmentInput = "QUANTITY_DESC"
	SortFindOneEquipmentInputRangeLongAsc                       SortFindOneEquipmentInput = "RANGE__LONG_ASC"
	SortFindOneEquipmentInputRangeLongDesc                      SortFindOneEquipmentInput = "RANGE__LONG_DESC"
	SortFindOneEquipmentInputRangeNormalAsc                     SortFindOneEquipmentInput = "RANGE__NORMAL_ASC"
	SortFindOneEquipmentInputRangeNormalDesc                    SortFindOneEquipmentInput = "RANGE__NORMAL_DESC"
	SortFindOneEquipmentInputSpecialAsc                         SortFindOneEquipmentInput = "SPECIAL_ASC"
	SortFindOneEquipmentInputSpecialDesc                        SortFindOneEquipmentInput = "SPECIAL_DESC"
	SortFindOneEquipmentInputSpeedQuantityAsc                   SortFindOneEquipmentInput = "SPEED__QUANTITY_ASC"
	SortFindOneEquipmentInputSpeedQuantityDesc                  SortFindOneEquipmentInput = "SPEED__QUANTITY_DESC"
	SortFindOneEquipmentInputSpeedUnitAsc                       SortFindOneEquipmentInput = "SPEED__UNIT_ASC"
	SortFindOneEquipmentInputSpeedUnitDesc                      SortFindOneEquipmentInput = "SPEED__UNIT_DESC"
	SortFindOneEquipmentInputStealthDisadvantageAsc             SortFindOneEquipmentInput = "STEALTH_DISADVANTAGE_ASC"
	SortFindOneEquipmentInputStealthDisadvantageDesc            SortFindOneEquipmentInput = "STEALTH_DISADVANTAGE_DESC"
	SortFindOneEquipmentInputStrMinimumAsc                      SortFindOneEquipmentInput = "STR_MINIMUM_ASC"
	SortFindOneEquipmentInputStrMinimumDesc                     SortFindOneEquipmentInput = "STR_MINIMUM_DESC"
	SortFindOneEquipmentInputThrowRangeLongAsc                  SortFindOneEquipmentInput = "THROW_RANGE__LONG_ASC"
	SortFindOneEquipmentInputThrowRangeLongDesc                 SortFindOneEquipmentInput = "THROW_RANGE__LONG_DESC"
	SortFindOneEquipmentInputThrowRangeNormalAsc                SortFindOneEquipmentInput = "THROW_RANGE__NORMAL_ASC"
	SortFindOneEquipmentInputThrowRangeNormalDesc               SortFindOneEquipmentInput = "THROW_RANGE__NORMAL_DESC"
	SortFindOneEquipmentInputToolCategoryAsc                    SortFindOneEquipmentInput = "TOOL_CATEGORY_ASC"
	SortFindOneEquipmentInputToolCategoryDesc                   SortFindOneEquipmentInput = "TOOL_CATEGORY_DESC"
	SortFindOneEquipmentInputTwoHandedDamageDamageDiceAsc       SortFindOneEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_DICE_ASC"
	SortFindOneEquipmentInputTwoHandedDamageDamageDiceDesc      SortFindOneEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_DICE_DESC"
	SortFindOneEquipmentInputTwoHandedDamageDamageTypeIndexAsc  SortFindOneEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_TYPE__INDEX_ASC"
	SortFindOneEquipmentInputTwoHandedDamageDamageTypeIndexDesc SortFindOneEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_TYPE__INDEX_DESC"
	SortFindOneEquipmentInputTwoHandedDamageDamageTypeNameAsc   SortFindOneEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_TYPE__NAME_ASC"
	SortFindOneEquipmentInputTwoHandedDamageDamageTypeNameDesc  SortFindOneEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_TYPE__NAME_DESC"
	SortFindOneEquipmentInputTwoHandedDamageDamageTypeURLAsc    SortFindOneEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_TYPE__URL_ASC"
	SortFindOneEquipmentInputTwoHandedDamageDamageTypeURLDesc   SortFindOneEquipmentInput = "TWO_HANDED_DAMAGE__DAMAGE_TYPE__URL_DESC"
	SortFindOneEquipmentInputURLAsc                             SortFindOneEquipmentInput = "URL_ASC"
	SortFindOneEquipmentInputURLDesc                            SortFindOneEquipmentInput = "URL_DESC"
	SortFindOneEquipmentInputVehicleCategoryAsc                 SortFindOneEquipmentInput = "VEHICLE_CATEGORY_ASC"
	SortFindOneEquipmentInputVehicleCategoryDesc                SortFindOneEquipmentInput = "VEHICLE_CATEGORY_DESC"
	SortFindOneEquipmentInputWeaponCategoryAsc                  SortFindOneEquipmentInput = "WEAPON_CATEGORY_ASC"
	SortFindOneEquipmentInputWeaponCategoryDesc                 SortFindOneEquipmentInput = "WEAPON_CATEGORY_DESC"
	SortFindOneEquipmentInputWeaponRangeAsc                     SortFindOneEquipmentInput = "WEAPON_RANGE_ASC"
	SortFindOneEquipmentInputWeaponRangeDesc                    SortFindOneEquipmentInput = "WEAPON_RANGE_DESC"
	SortFindOneEquipmentInputWeightAsc                          SortFindOneEquipmentInput = "WEIGHT_ASC"
	SortFindOneEquipmentInputWeightDesc                         SortFindOneEquipmentInput = "WEIGHT_DESC"
)

var AllSortFindOneEquipmentInput = []SortFindOneEquipmentInput{
	SortFindOneEquipmentInputIDAsc,
	SortFindOneEquipmentInputIDDesc,
	SortFindOneEquipmentInputArmorCategoryAsc,
	SortFindOneEquipmentInputArmorCategoryDesc,
	SortFindOneEquipmentInputArmorClassBaseAsc,
	SortFindOneEquipmentInputArmorClassBaseDesc,
	SortFindOneEquipmentInputArmorClassDexBonusAsc,
	SortFindOneEquipmentInputArmorClassDexBonusDesc,
	SortFindOneEquipmentInputArmorClassMaxBonusAsc,
	SortFindOneEquipmentInputArmorClassMaxBonusDesc,
	SortFindOneEquipmentInputCapacityAsc,
	SortFindOneEquipmentInputCapacityDesc,
	SortFindOneEquipmentInputCategoryRangeAsc,
	SortFindOneEquipmentInputCategoryRangeDesc,
	SortFindOneEquipmentInputCostQuantityAsc,
	SortFindOneEquipmentInputCostQuantityDesc,
	SortFindOneEquipmentInputCostUnitAsc,
	SortFindOneEquipmentInputCostUnitDesc,
	SortFindOneEquipmentInputDamageDamageDiceAsc,
	SortFindOneEquipmentInputDamageDamageDiceDesc,
	SortFindOneEquipmentInputDamageDamageTypeIndexAsc,
	SortFindOneEquipmentInputDamageDamageTypeIndexDesc,
	SortFindOneEquipmentInputDamageDamageTypeNameAsc,
	SortFindOneEquipmentInputDamageDamageTypeNameDesc,
	SortFindOneEquipmentInputDamageDamageTypeURLAsc,
	SortFindOneEquipmentInputDamageDamageTypeURLDesc,
	SortFindOneEquipmentInputDescAsc,
	SortFindOneEquipmentInputDescDesc,
	SortFindOneEquipmentInputEquipmentCategoryIndexAsc,
	SortFindOneEquipmentInputEquipmentCategoryIndexDesc,
	SortFindOneEquipmentInputEquipmentCategoryNameAsc,
	SortFindOneEquipmentInputEquipmentCategoryNameDesc,
	SortFindOneEquipmentInputEquipmentCategoryURLAsc,
	SortFindOneEquipmentInputEquipmentCategoryURLDesc,
	SortFindOneEquipmentInputGearCategoryIndexAsc,
	SortFindOneEquipmentInputGearCategoryIndexDesc,
	SortFindOneEquipmentInputGearCategoryNameAsc,
	SortFindOneEquipmentInputGearCategoryNameDesc,
	SortFindOneEquipmentInputGearCategoryURLAsc,
	SortFindOneEquipmentInputGearCategoryURLDesc,
	SortFindOneEquipmentInputIndexAsc,
	SortFindOneEquipmentInputIndexDesc,
	SortFindOneEquipmentInputNameAsc,
	SortFindOneEquipmentInputNameDesc,
	SortFindOneEquipmentInputQuantityAsc,
	SortFindOneEquipmentInputQuantityDesc,
	SortFindOneEquipmentInputRangeLongAsc,
	SortFindOneEquipmentInputRangeLongDesc,
	SortFindOneEquipmentInputRangeNormalAsc,
	SortFindOneEquipmentInputRangeNormalDesc,
	SortFindOneEquipmentInputSpecialAsc,
	SortFindOneEquipmentInputSpecialDesc,
	SortFindOneEquipmentInputSpeedQuantityAsc,
	SortFindOneEquipmentInputSpeedQuantityDesc,
	SortFindOneEquipmentInputSpeedUnitAsc,
	SortFindOneEquipmentInputSpeedUnitDesc,
	SortFindOneEquipmentInputStealthDisadvantageAsc,
	SortFindOneEquipmentInputStealthDisadvantageDesc,
	SortFindOneEquipmentInputStrMinimumAsc,
	SortFindOneEquipmentInputStrMinimumDesc,
	SortFindOneEquipmentInputThrowRangeLongAsc,
	SortFindOneEquipmentInputThrowRangeLongDesc,
	SortFindOneEquipmentInputThrowRangeNormalAsc,
	SortFindOneEquipmentInputThrowRangeNormalDesc,
	SortFindOneEquipmentInputToolCategoryAsc,
	SortFindOneEquipmentInputToolCategoryDesc,
	SortFindOneEquipmentInputTwoHandedDamageDamageDiceAsc,
	SortFindOneEquipmentInputTwoHandedDamageDamageDiceDesc,
	SortFindOneEquipmentInputTwoHandedDamageDamageTypeIndexAsc,
	SortFindOneEquipmentInputTwoHandedDamageDamageTypeIndexDesc,
	SortFindOneEquipmentInputTwoHandedDamageDamageTypeNameAsc,
	SortFindOneEquipmentInputTwoHandedDamageDamageTypeNameDesc,
	SortFindOneEquipmentInputTwoHandedDamageDamageTypeURLAsc,
	SortFindOneEquipmentInputTwoHandedDamageDamageTypeURLDesc,
	SortFindOneEquipmentInputURLAsc,
	SortFindOneEquipmentInputURLDesc,
	SortFindOneEquipmentInputVehicleCategoryAsc,
	SortFindOneEquipmentInputVehicleCategoryDesc,
	SortFindOneEquipmentInputWeaponCategoryAsc,
	SortFindOneEquipmentInputWeaponCategoryDesc,
	SortFindOneEquipmentInputWeaponRangeAsc,
	SortFindOneEquipmentInputWeaponRangeDesc,
	SortFindOneEquipmentInputWeightAsc,
	SortFindOneEquipmentInputWeightDesc,
}

func (e SortFindOneEquipmentInput) IsValid() bool {
	switch e {
	case SortFindOneEquipmentInputIDAsc, SortFindOneEquipmentInputIDDesc, SortFindOneEquipmentInputArmorCategoryAsc, SortFindOneEquipmentInputArmorCategoryDesc, SortFindOneEquipmentInputArmorClassBaseAsc, SortFindOneEquipmentInputArmorClassBaseDesc, SortFindOneEquipmentInputArmorClassDexBonusAsc, SortFindOneEquipmentInputArmorClassDexBonusDesc, SortFindOneEquipmentInputArmorClassMaxBonusAsc, SortFindOneEquipmentInputArmorClassMaxBonusDesc, SortFindOneEquipmentInputCapacityAsc, SortFindOneEquipmentInputCapacityDesc, SortFindOneEquipmentInputCategoryRangeAsc, SortFindOneEquipmentInputCategoryRangeDesc, SortFindOneEquipmentInputCostQuantityAsc, SortFindOneEquipmentInputCostQuantityDesc, SortFindOneEquipmentInputCostUnitAsc, SortFindOneEquipmentInputCostUnitDesc, SortFindOneEquipmentInputDamageDamageDiceAsc, SortFindOneEquipmentInputDamageDamageDiceDesc, SortFindOneEquipmentInputDamageDamageTypeIndexAsc, SortFindOneEquipmentInputDamageDamageTypeIndexDesc, SortFindOneEquipmentInputDamageDamageTypeNameAsc, SortFindOneEquipmentInputDamageDamageTypeNameDesc, SortFindOneEquipmentInputDamageDamageTypeURLAsc, SortFindOneEquipmentInputDamageDamageTypeURLDesc, SortFindOneEquipmentInputDescAsc, SortFindOneEquipmentInputDescDesc, SortFindOneEquipmentInputEquipmentCategoryIndexAsc, SortFindOneEquipmentInputEquipmentCategoryIndexDesc, SortFindOneEquipmentInputEquipmentCategoryNameAsc, SortFindOneEquipmentInputEquipmentCategoryNameDesc, SortFindOneEquipmentInputEquipmentCategoryURLAsc, SortFindOneEquipmentInputEquipmentCategoryURLDesc, SortFindOneEquipmentInputGearCategoryIndexAsc, SortFindOneEquipmentInputGearCategoryIndexDesc, SortFindOneEquipmentInputGearCategoryNameAsc, SortFindOneEquipmentInputGearCategoryNameDesc, SortFindOneEquipmentInputGearCategoryURLAsc, SortFindOneEquipmentInputGearCategoryURLDesc, SortFindOneEquipmentInputIndexAsc, SortFindOneEquipmentInputIndexDesc, SortFindOneEquipmentInputNameAsc, SortFindOneEquipmentInputNameDesc, SortFindOneEquipmentInputQuantityAsc, SortFindOneEquipmentInputQuantityDesc, SortFindOneEquipmentInputRangeLongAsc, SortFindOneEquipmentInputRangeLongDesc, SortFindOneEquipmentInputRangeNormalAsc, SortFindOneEquipmentInputRangeNormalDesc, SortFindOneEquipmentInputSpecialAsc, SortFindOneEquipmentInputSpecialDesc, SortFindOneEquipmentInputSpeedQuantityAsc, SortFindOneEquipmentInputSpeedQuantityDesc, SortFindOneEquipmentInputSpeedUnitAsc, SortFindOneEquipmentInputSpeedUnitDesc, SortFindOneEquipmentInputStealthDisadvantageAsc, SortFindOneEquipmentInputStealthDisadvantageDesc, SortFindOneEquipmentInputStrMinimumAsc, SortFindOneEquipmentInputStrMinimumDesc, SortFindOneEquipmentInputThrowRangeLongAsc, SortFindOneEquipmentInputThrowRangeLongDesc, SortFindOneEquipmentInputThrowRangeNormalAsc, SortFindOneEquipmentInputThrowRangeNormalDesc, SortFindOneEquipmentInputToolCategoryAsc, SortFindOneEquipmentInputToolCategoryDesc, SortFindOneEquipmentInputTwoHandedDamageDamageDiceAsc, SortFindOneEquipmentInputTwoHandedDamageDamageDiceDesc, SortFindOneEquipmentInputTwoHandedDamageDamageTypeIndexAsc, SortFindOneEquipmentInputTwoHandedDamageDamageTypeIndexDesc, SortFindOneEquipmentInputTwoHandedDamageDamageTypeNameAsc, SortFindOneEquipmentInputTwoHandedDamageDamageTypeNameDesc, SortFindOneEquipmentInputTwoHandedDamageDamageTypeURLAsc, SortFindOneEquipmentInputTwoHandedDamageDamageTypeURLDesc, SortFindOneEquipmentInputURLAsc, SortFindOneEquipmentInputURLDesc, SortFindOneEquipmentInputVehicleCategoryAsc, SortFindOneEquipmentInputVehicleCategoryDesc, SortFindOneEquipmentInputWeaponCategoryAsc, SortFindOneEquipmentInputWeaponCategoryDesc, SortFindOneEquipmentInputWeaponRangeAsc, SortFindOneEquipmentInputWeaponRangeDesc, SortFindOneEquipmentInputWeightAsc, SortFindOneEquipmentInputWeightDesc:
		return true
	}
	return false
}

func (e SortFindOneEquipmentInput) String() string {
	return string(e)
}

func (e *SortFindOneEquipmentInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneEquipmentInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneEquipmentInput", str)
	}
	return nil
}

func (e SortFindOneEquipmentInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneFeatInput string

const (
	SortFindOneFeatInputIDAsc     SortFindOneFeatInput = "_ID_ASC"
	SortFindOneFeatInputIDDesc    SortFindOneFeatInput = "_ID_DESC"
	SortFindOneFeatInputIndexAsc  SortFindOneFeatInput = "INDEX_ASC"
	SortFindOneFeatInputIndexDesc SortFindOneFeatInput = "INDEX_DESC"
	SortFindOneFeatInputNameAsc   SortFindOneFeatInput = "NAME_ASC"
	SortFindOneFeatInputNameDesc  SortFindOneFeatInput = "NAME_DESC"
	SortFindOneFeatInputDescAsc   SortFindOneFeatInput = "DESC_ASC"
	SortFindOneFeatInputDescDesc  SortFindOneFeatInput = "DESC_DESC"
	SortFindOneFeatInputURLAsc    SortFindOneFeatInput = "URL_ASC"
	SortFindOneFeatInputURLDesc   SortFindOneFeatInput = "URL_DESC"
)

var AllSortFindOneFeatInput = []SortFindOneFeatInput{
	SortFindOneFeatInputIDAsc,
	SortFindOneFeatInputIDDesc,
	SortFindOneFeatInputIndexAsc,
	SortFindOneFeatInputIndexDesc,
	SortFindOneFeatInputNameAsc,
	SortFindOneFeatInputNameDesc,
	SortFindOneFeatInputDescAsc,
	SortFindOneFeatInputDescDesc,
	SortFindOneFeatInputURLAsc,
	SortFindOneFeatInputURLDesc,
}

func (e SortFindOneFeatInput) IsValid() bool {
	switch e {
	case SortFindOneFeatInputIDAsc, SortFindOneFeatInputIDDesc, SortFindOneFeatInputIndexAsc, SortFindOneFeatInputIndexDesc, SortFindOneFeatInputNameAsc, SortFindOneFeatInputNameDesc, SortFindOneFeatInputDescAsc, SortFindOneFeatInputDescDesc, SortFindOneFeatInputURLAsc, SortFindOneFeatInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneFeatInput) String() string {
	return string(e)
}

func (e *SortFindOneFeatInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneFeatInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneFeatInput", str)
	}
	return nil
}

func (e SortFindOneFeatInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneFeatureInput string

const (
	SortFindOneFeatureInputIDAsc                                      SortFindOneFeatureInput = "_ID_ASC"
	SortFindOneFeatureInputIDDesc                                     SortFindOneFeatureInput = "_ID_DESC"
	SortFindOneFeatureInputChoiceChooseAsc                            SortFindOneFeatureInput = "CHOICE__CHOOSE_ASC"
	SortFindOneFeatureInputChoiceChooseDesc                           SortFindOneFeatureInput = "CHOICE__CHOOSE_DESC"
	SortFindOneFeatureInputChoiceTypeAsc                              SortFindOneFeatureInput = "CHOICE__TYPE_ASC"
	SortFindOneFeatureInputChoiceTypeDesc                             SortFindOneFeatureInput = "CHOICE__TYPE_DESC"
	SortFindOneFeatureInputClassIndexAsc                              SortFindOneFeatureInput = "CLASS__INDEX_ASC"
	SortFindOneFeatureInputClassIndexDesc                             SortFindOneFeatureInput = "CLASS__INDEX_DESC"
	SortFindOneFeatureInputClassNameAsc                               SortFindOneFeatureInput = "CLASS__NAME_ASC"
	SortFindOneFeatureInputClassNameDesc                              SortFindOneFeatureInput = "CLASS__NAME_DESC"
	SortFindOneFeatureInputClassURLAsc                                SortFindOneFeatureInput = "CLASS__URL_ASC"
	SortFindOneFeatureInputClassURLDesc                               SortFindOneFeatureInput = "CLASS__URL_DESC"
	SortFindOneFeatureInputDescAsc                                    SortFindOneFeatureInput = "DESC_ASC"
	SortFindOneFeatureInputDescDesc                                   SortFindOneFeatureInput = "DESC_DESC"
	SortFindOneFeatureInputParentIndexAsc                             SortFindOneFeatureInput = "PARENT__INDEX_ASC"
	SortFindOneFeatureInputParentIndexDesc                            SortFindOneFeatureInput = "PARENT__INDEX_DESC"
	SortFindOneFeatureInputParentNameAsc                              SortFindOneFeatureInput = "PARENT__NAME_ASC"
	SortFindOneFeatureInputParentNameDesc                             SortFindOneFeatureInput = "PARENT__NAME_DESC"
	SortFindOneFeatureInputParentURLAsc                               SortFindOneFeatureInput = "PARENT__URL_ASC"
	SortFindOneFeatureInputParentURLDesc                              SortFindOneFeatureInput = "PARENT__URL_DESC"
	SortFindOneFeatureInputIndexAsc                                   SortFindOneFeatureInput = "INDEX_ASC"
	SortFindOneFeatureInputIndexDesc                                  SortFindOneFeatureInput = "INDEX_DESC"
	SortFindOneFeatureInputLevelAsc                                   SortFindOneFeatureInput = "LEVEL_ASC"
	SortFindOneFeatureInputLevelDesc                                  SortFindOneFeatureInput = "LEVEL_DESC"
	SortFindOneFeatureInputNameAsc                                    SortFindOneFeatureInput = "NAME_ASC"
	SortFindOneFeatureInputNameDesc                                   SortFindOneFeatureInput = "NAME_DESC"
	SortFindOneFeatureInputReferenceAsc                               SortFindOneFeatureInput = "REFERENCE_ASC"
	SortFindOneFeatureInputReferenceDesc                              SortFindOneFeatureInput = "REFERENCE_DESC"
	SortFindOneFeatureInputSubclassIndexAsc                           SortFindOneFeatureInput = "SUBCLASS__INDEX_ASC"
	SortFindOneFeatureInputSubclassIndexDesc                          SortFindOneFeatureInput = "SUBCLASS__INDEX_DESC"
	SortFindOneFeatureInputSubclassNameAsc                            SortFindOneFeatureInput = "SUBCLASS__NAME_ASC"
	SortFindOneFeatureInputSubclassNameDesc                           SortFindOneFeatureInput = "SUBCLASS__NAME_DESC"
	SortFindOneFeatureInputSubclassURLAsc                             SortFindOneFeatureInput = "SUBCLASS__URL_ASC"
	SortFindOneFeatureInputSubclassURLDesc                            SortFindOneFeatureInput = "SUBCLASS__URL_DESC"
	SortFindOneFeatureInputFeatureSpecificSubfeatureOptionsChooseAsc  SortFindOneFeatureInput = "FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__CHOOSE_ASC"
	SortFindOneFeatureInputFeatureSpecificSubfeatureOptionsChooseDesc SortFindOneFeatureInput = "FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__CHOOSE_DESC"
	SortFindOneFeatureInputFeatureSpecificSubfeatureOptionsTypeAsc    SortFindOneFeatureInput = "FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__TYPE_ASC"
	SortFindOneFeatureInputFeatureSpecificSubfeatureOptionsTypeDesc   SortFindOneFeatureInput = "FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__TYPE_DESC"
	SortFindOneFeatureInputFeatureSpecificExpertiseOptionsChooseAsc   SortFindOneFeatureInput = "FEATURE_SPECIFIC__EXPERTISE_OPTIONS__CHOOSE_ASC"
	SortFindOneFeatureInputFeatureSpecificExpertiseOptionsChooseDesc  SortFindOneFeatureInput = "FEATURE_SPECIFIC__EXPERTISE_OPTIONS__CHOOSE_DESC"
	SortFindOneFeatureInputFeatureSpecificExpertiseOptionsTypeAsc     SortFindOneFeatureInput = "FEATURE_SPECIFIC__EXPERTISE_OPTIONS__TYPE_ASC"
	SortFindOneFeatureInputFeatureSpecificExpertiseOptionsTypeDesc    SortFindOneFeatureInput = "FEATURE_SPECIFIC__EXPERTISE_OPTIONS__TYPE_DESC"
	SortFindOneFeatureInputURLAsc                                     SortFindOneFeatureInput = "URL_ASC"
	SortFindOneFeatureInputURLDesc                                    SortFindOneFeatureInput = "URL_DESC"
)

var AllSortFindOneFeatureInput = []SortFindOneFeatureInput{
	SortFindOneFeatureInputIDAsc,
	SortFindOneFeatureInputIDDesc,
	SortFindOneFeatureInputChoiceChooseAsc,
	SortFindOneFeatureInputChoiceChooseDesc,
	SortFindOneFeatureInputChoiceTypeAsc,
	SortFindOneFeatureInputChoiceTypeDesc,
	SortFindOneFeatureInputClassIndexAsc,
	SortFindOneFeatureInputClassIndexDesc,
	SortFindOneFeatureInputClassNameAsc,
	SortFindOneFeatureInputClassNameDesc,
	SortFindOneFeatureInputClassURLAsc,
	SortFindOneFeatureInputClassURLDesc,
	SortFindOneFeatureInputDescAsc,
	SortFindOneFeatureInputDescDesc,
	SortFindOneFeatureInputParentIndexAsc,
	SortFindOneFeatureInputParentIndexDesc,
	SortFindOneFeatureInputParentNameAsc,
	SortFindOneFeatureInputParentNameDesc,
	SortFindOneFeatureInputParentURLAsc,
	SortFindOneFeatureInputParentURLDesc,
	SortFindOneFeatureInputIndexAsc,
	SortFindOneFeatureInputIndexDesc,
	SortFindOneFeatureInputLevelAsc,
	SortFindOneFeatureInputLevelDesc,
	SortFindOneFeatureInputNameAsc,
	SortFindOneFeatureInputNameDesc,
	SortFindOneFeatureInputReferenceAsc,
	SortFindOneFeatureInputReferenceDesc,
	SortFindOneFeatureInputSubclassIndexAsc,
	SortFindOneFeatureInputSubclassIndexDesc,
	SortFindOneFeatureInputSubclassNameAsc,
	SortFindOneFeatureInputSubclassNameDesc,
	SortFindOneFeatureInputSubclassURLAsc,
	SortFindOneFeatureInputSubclassURLDesc,
	SortFindOneFeatureInputFeatureSpecificSubfeatureOptionsChooseAsc,
	SortFindOneFeatureInputFeatureSpecificSubfeatureOptionsChooseDesc,
	SortFindOneFeatureInputFeatureSpecificSubfeatureOptionsTypeAsc,
	SortFindOneFeatureInputFeatureSpecificSubfeatureOptionsTypeDesc,
	SortFindOneFeatureInputFeatureSpecificExpertiseOptionsChooseAsc,
	SortFindOneFeatureInputFeatureSpecificExpertiseOptionsChooseDesc,
	SortFindOneFeatureInputFeatureSpecificExpertiseOptionsTypeAsc,
	SortFindOneFeatureInputFeatureSpecificExpertiseOptionsTypeDesc,
	SortFindOneFeatureInputURLAsc,
	SortFindOneFeatureInputURLDesc,
}

func (e SortFindOneFeatureInput) IsValid() bool {
	switch e {
	case SortFindOneFeatureInputIDAsc, SortFindOneFeatureInputIDDesc, SortFindOneFeatureInputChoiceChooseAsc, SortFindOneFeatureInputChoiceChooseDesc, SortFindOneFeatureInputChoiceTypeAsc, SortFindOneFeatureInputChoiceTypeDesc, SortFindOneFeatureInputClassIndexAsc, SortFindOneFeatureInputClassIndexDesc, SortFindOneFeatureInputClassNameAsc, SortFindOneFeatureInputClassNameDesc, SortFindOneFeatureInputClassURLAsc, SortFindOneFeatureInputClassURLDesc, SortFindOneFeatureInputDescAsc, SortFindOneFeatureInputDescDesc, SortFindOneFeatureInputParentIndexAsc, SortFindOneFeatureInputParentIndexDesc, SortFindOneFeatureInputParentNameAsc, SortFindOneFeatureInputParentNameDesc, SortFindOneFeatureInputParentURLAsc, SortFindOneFeatureInputParentURLDesc, SortFindOneFeatureInputIndexAsc, SortFindOneFeatureInputIndexDesc, SortFindOneFeatureInputLevelAsc, SortFindOneFeatureInputLevelDesc, SortFindOneFeatureInputNameAsc, SortFindOneFeatureInputNameDesc, SortFindOneFeatureInputReferenceAsc, SortFindOneFeatureInputReferenceDesc, SortFindOneFeatureInputSubclassIndexAsc, SortFindOneFeatureInputSubclassIndexDesc, SortFindOneFeatureInputSubclassNameAsc, SortFindOneFeatureInputSubclassNameDesc, SortFindOneFeatureInputSubclassURLAsc, SortFindOneFeatureInputSubclassURLDesc, SortFindOneFeatureInputFeatureSpecificSubfeatureOptionsChooseAsc, SortFindOneFeatureInputFeatureSpecificSubfeatureOptionsChooseDesc, SortFindOneFeatureInputFeatureSpecificSubfeatureOptionsTypeAsc, SortFindOneFeatureInputFeatureSpecificSubfeatureOptionsTypeDesc, SortFindOneFeatureInputFeatureSpecificExpertiseOptionsChooseAsc, SortFindOneFeatureInputFeatureSpecificExpertiseOptionsChooseDesc, SortFindOneFeatureInputFeatureSpecificExpertiseOptionsTypeAsc, SortFindOneFeatureInputFeatureSpecificExpertiseOptionsTypeDesc, SortFindOneFeatureInputURLAsc, SortFindOneFeatureInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneFeatureInput) String() string {
	return string(e)
}

func (e *SortFindOneFeatureInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneFeatureInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneFeatureInput", str)
	}
	return nil
}

func (e SortFindOneFeatureInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneLanguageInput string

const (
	SortFindOneLanguageInputIDAsc               SortFindOneLanguageInput = "_ID_ASC"
	SortFindOneLanguageInputIDDesc              SortFindOneLanguageInput = "_ID_DESC"
	SortFindOneLanguageInputDescAsc             SortFindOneLanguageInput = "DESC_ASC"
	SortFindOneLanguageInputDescDesc            SortFindOneLanguageInput = "DESC_DESC"
	SortFindOneLanguageInputIndexAsc            SortFindOneLanguageInput = "INDEX_ASC"
	SortFindOneLanguageInputIndexDesc           SortFindOneLanguageInput = "INDEX_DESC"
	SortFindOneLanguageInputNameAsc             SortFindOneLanguageInput = "NAME_ASC"
	SortFindOneLanguageInputNameDesc            SortFindOneLanguageInput = "NAME_DESC"
	SortFindOneLanguageInputScriptAsc           SortFindOneLanguageInput = "SCRIPT_ASC"
	SortFindOneLanguageInputScriptDesc          SortFindOneLanguageInput = "SCRIPT_DESC"
	SortFindOneLanguageInputTypeAsc             SortFindOneLanguageInput = "TYPE_ASC"
	SortFindOneLanguageInputTypeDesc            SortFindOneLanguageInput = "TYPE_DESC"
	SortFindOneLanguageInputTypicalSpeakersAsc  SortFindOneLanguageInput = "TYPICAL_SPEAKERS_ASC"
	SortFindOneLanguageInputTypicalSpeakersDesc SortFindOneLanguageInput = "TYPICAL_SPEAKERS_DESC"
	SortFindOneLanguageInputURLAsc              SortFindOneLanguageInput = "URL_ASC"
	SortFindOneLanguageInputURLDesc             SortFindOneLanguageInput = "URL_DESC"
)

var AllSortFindOneLanguageInput = []SortFindOneLanguageInput{
	SortFindOneLanguageInputIDAsc,
	SortFindOneLanguageInputIDDesc,
	SortFindOneLanguageInputDescAsc,
	SortFindOneLanguageInputDescDesc,
	SortFindOneLanguageInputIndexAsc,
	SortFindOneLanguageInputIndexDesc,
	SortFindOneLanguageInputNameAsc,
	SortFindOneLanguageInputNameDesc,
	SortFindOneLanguageInputScriptAsc,
	SortFindOneLanguageInputScriptDesc,
	SortFindOneLanguageInputTypeAsc,
	SortFindOneLanguageInputTypeDesc,
	SortFindOneLanguageInputTypicalSpeakersAsc,
	SortFindOneLanguageInputTypicalSpeakersDesc,
	SortFindOneLanguageInputURLAsc,
	SortFindOneLanguageInputURLDesc,
}

func (e SortFindOneLanguageInput) IsValid() bool {
	switch e {
	case SortFindOneLanguageInputIDAsc, SortFindOneLanguageInputIDDesc, SortFindOneLanguageInputDescAsc, SortFindOneLanguageInputDescDesc, SortFindOneLanguageInputIndexAsc, SortFindOneLanguageInputIndexDesc, SortFindOneLanguageInputNameAsc, SortFindOneLanguageInputNameDesc, SortFindOneLanguageInputScriptAsc, SortFindOneLanguageInputScriptDesc, SortFindOneLanguageInputTypeAsc, SortFindOneLanguageInputTypeDesc, SortFindOneLanguageInputTypicalSpeakersAsc, SortFindOneLanguageInputTypicalSpeakersDesc, SortFindOneLanguageInputURLAsc, SortFindOneLanguageInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneLanguageInput) String() string {
	return string(e)
}

func (e *SortFindOneLanguageInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneLanguageInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneLanguageInput", str)
	}
	return nil
}

func (e SortFindOneLanguageInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneLevelInput string

const (
	SortFindOneLevelInputIDAsc                                              SortFindOneLevelInput = "_ID_ASC"
	SortFindOneLevelInputIDDesc                                             SortFindOneLevelInput = "_ID_DESC"
	SortFindOneLevelInputAbilityScoreBonusesAsc                             SortFindOneLevelInput = "ABILITY_SCORE_BONUSES_ASC"
	SortFindOneLevelInputAbilityScoreBonusesDesc                            SortFindOneLevelInput = "ABILITY_SCORE_BONUSES_DESC"
	SortFindOneLevelInputClassIndexAsc                                      SortFindOneLevelInput = "CLASS__INDEX_ASC"
	SortFindOneLevelInputClassIndexDesc                                     SortFindOneLevelInput = "CLASS__INDEX_DESC"
	SortFindOneLevelInputClassNameAsc                                       SortFindOneLevelInput = "CLASS__NAME_ASC"
	SortFindOneLevelInputClassNameDesc                                      SortFindOneLevelInput = "CLASS__NAME_DESC"
	SortFindOneLevelInputClassURLAsc                                        SortFindOneLevelInput = "CLASS__URL_ASC"
	SortFindOneLevelInputClassURLDesc                                       SortFindOneLevelInput = "CLASS__URL_DESC"
	SortFindOneLevelInputClassSpecificActionSurgesAsc                       SortFindOneLevelInput = "CLASS_SPECIFIC__ACTION_SURGES_ASC"
	SortFindOneLevelInputClassSpecificActionSurgesDesc                      SortFindOneLevelInput = "CLASS_SPECIFIC__ACTION_SURGES_DESC"
	SortFindOneLevelInputClassSpecificArcaneRecoveryLevelsAsc               SortFindOneLevelInput = "CLASS_SPECIFIC__ARCANE_RECOVERY_LEVELS_ASC"
	SortFindOneLevelInputClassSpecificArcaneRecoveryLevelsDesc              SortFindOneLevelInput = "CLASS_SPECIFIC__ARCANE_RECOVERY_LEVELS_DESC"
	SortFindOneLevelInputClassSpecificAuraRangeAsc                          SortFindOneLevelInput = "CLASS_SPECIFIC__AURA_RANGE_ASC"
	SortFindOneLevelInputClassSpecificAuraRangeDesc                         SortFindOneLevelInput = "CLASS_SPECIFIC__AURA_RANGE_DESC"
	SortFindOneLevelInputClassSpecificBardicInspirationDieAsc               SortFindOneLevelInput = "CLASS_SPECIFIC__BARDIC_INSPIRATION_DIE_ASC"
	SortFindOneLevelInputClassSpecificBardicInspirationDieDesc              SortFindOneLevelInput = "CLASS_SPECIFIC__BARDIC_INSPIRATION_DIE_DESC"
	SortFindOneLevelInputClassSpecificBrutalCriticalDiceAsc                 SortFindOneLevelInput = "CLASS_SPECIFIC__BRUTAL_CRITICAL_DICE_ASC"
	SortFindOneLevelInputClassSpecificBrutalCriticalDiceDesc                SortFindOneLevelInput = "CLASS_SPECIFIC__BRUTAL_CRITICAL_DICE_DESC"
	SortFindOneLevelInputClassSpecificChannelDivinityChargesAsc             SortFindOneLevelInput = "CLASS_SPECIFIC__CHANNEL_DIVINITY_CHARGES_ASC"
	SortFindOneLevelInputClassSpecificChannelDivinityChargesDesc            SortFindOneLevelInput = "CLASS_SPECIFIC__CHANNEL_DIVINITY_CHARGES_DESC"
	SortFindOneLevelInputClassSpecificDestroyUndeadCrAsc                    SortFindOneLevelInput = "CLASS_SPECIFIC__DESTROY_UNDEAD_CR_ASC"
	SortFindOneLevelInputClassSpecificDestroyUndeadCrDesc                   SortFindOneLevelInput = "CLASS_SPECIFIC__DESTROY_UNDEAD_CR_DESC"
	SortFindOneLevelInputClassSpecificExtraAttacksAsc                       SortFindOneLevelInput = "CLASS_SPECIFIC__EXTRA_ATTACKS_ASC"
	SortFindOneLevelInputClassSpecificExtraAttacksDesc                      SortFindOneLevelInput = "CLASS_SPECIFIC__EXTRA_ATTACKS_DESC"
	SortFindOneLevelInputClassSpecificFavoredEnemiesAsc                     SortFindOneLevelInput = "CLASS_SPECIFIC__FAVORED_ENEMIES_ASC"
	SortFindOneLevelInputClassSpecificFavoredEnemiesDesc                    SortFindOneLevelInput = "CLASS_SPECIFIC__FAVORED_ENEMIES_DESC"
	SortFindOneLevelInputClassSpecificFavoredTerrainAsc                     SortFindOneLevelInput = "CLASS_SPECIFIC__FAVORED_TERRAIN_ASC"
	SortFindOneLevelInputClassSpecificFavoredTerrainDesc                    SortFindOneLevelInput = "CLASS_SPECIFIC__FAVORED_TERRAIN_DESC"
	SortFindOneLevelInputClassSpecificIndomitableUsesAsc                    SortFindOneLevelInput = "CLASS_SPECIFIC__INDOMITABLE_USES_ASC"
	SortFindOneLevelInputClassSpecificIndomitableUsesDesc                   SortFindOneLevelInput = "CLASS_SPECIFIC__INDOMITABLE_USES_DESC"
	SortFindOneLevelInputClassSpecificInvocationsKnownAsc                   SortFindOneLevelInput = "CLASS_SPECIFIC__INVOCATIONS_KNOWN_ASC"
	SortFindOneLevelInputClassSpecificInvocationsKnownDesc                  SortFindOneLevelInput = "CLASS_SPECIFIC__INVOCATIONS_KNOWN_DESC"
	SortFindOneLevelInputClassSpecificKiPointsAsc                           SortFindOneLevelInput = "CLASS_SPECIFIC__KI_POINTS_ASC"
	SortFindOneLevelInputClassSpecificKiPointsDesc                          SortFindOneLevelInput = "CLASS_SPECIFIC__KI_POINTS_DESC"
	SortFindOneLevelInputClassSpecificMagicalSecretsMax5Asc                 SortFindOneLevelInput = "CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_5_ASC"
	SortFindOneLevelInputClassSpecificMagicalSecretsMax5Desc                SortFindOneLevelInput = "CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_5_DESC"
	SortFindOneLevelInputClassSpecificMagicalSecretsMax7Asc                 SortFindOneLevelInput = "CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_7_ASC"
	SortFindOneLevelInputClassSpecificMagicalSecretsMax7Desc                SortFindOneLevelInput = "CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_7_DESC"
	SortFindOneLevelInputClassSpecificMagicalSecretsMax9Asc                 SortFindOneLevelInput = "CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_9_ASC"
	SortFindOneLevelInputClassSpecificMagicalSecretsMax9Desc                SortFindOneLevelInput = "CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_9_DESC"
	SortFindOneLevelInputClassSpecificMartialArtsDiceCountAsc               SortFindOneLevelInput = "CLASS_SPECIFIC__MARTIAL_ARTS__DICE_COUNT_ASC"
	SortFindOneLevelInputClassSpecificMartialArtsDiceCountDesc              SortFindOneLevelInput = "CLASS_SPECIFIC__MARTIAL_ARTS__DICE_COUNT_DESC"
	SortFindOneLevelInputClassSpecificMartialArtsDiceValueAsc               SortFindOneLevelInput = "CLASS_SPECIFIC__MARTIAL_ARTS__DICE_VALUE_ASC"
	SortFindOneLevelInputClassSpecificMartialArtsDiceValueDesc              SortFindOneLevelInput = "CLASS_SPECIFIC__MARTIAL_ARTS__DICE_VALUE_DESC"
	SortFindOneLevelInputClassSpecificMetamagicKnownAsc                     SortFindOneLevelInput = "CLASS_SPECIFIC__METAMAGIC_KNOWN_ASC"
	SortFindOneLevelInputClassSpecificMetamagicKnownDesc                    SortFindOneLevelInput = "CLASS_SPECIFIC__METAMAGIC_KNOWN_DESC"
	SortFindOneLevelInputClassSpecificMysticArcanumLevel6Asc                SortFindOneLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_6_ASC"
	SortFindOneLevelInputClassSpecificMysticArcanumLevel6Desc               SortFindOneLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_6_DESC"
	SortFindOneLevelInputClassSpecificMysticArcanumLevel7Asc                SortFindOneLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_7_ASC"
	SortFindOneLevelInputClassSpecificMysticArcanumLevel7Desc               SortFindOneLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_7_DESC"
	SortFindOneLevelInputClassSpecificMysticArcanumLevel8Asc                SortFindOneLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_8_ASC"
	SortFindOneLevelInputClassSpecificMysticArcanumLevel8Desc               SortFindOneLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_8_DESC"
	SortFindOneLevelInputClassSpecificMysticArcanumLevel9Asc                SortFindOneLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_9_ASC"
	SortFindOneLevelInputClassSpecificMysticArcanumLevel9Desc               SortFindOneLevelInput = "CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_9_DESC"
	SortFindOneLevelInputClassSpecificRageCountAsc                          SortFindOneLevelInput = "CLASS_SPECIFIC__RAGE_COUNT_ASC"
	SortFindOneLevelInputClassSpecificRageCountDesc                         SortFindOneLevelInput = "CLASS_SPECIFIC__RAGE_COUNT_DESC"
	SortFindOneLevelInputClassSpecificRageDamageBonusAsc                    SortFindOneLevelInput = "CLASS_SPECIFIC__RAGE_DAMAGE_BONUS_ASC"
	SortFindOneLevelInputClassSpecificRageDamageBonusDesc                   SortFindOneLevelInput = "CLASS_SPECIFIC__RAGE_DAMAGE_BONUS_DESC"
	SortFindOneLevelInputClassSpecificSneakAttackDiceCountAsc               SortFindOneLevelInput = "CLASS_SPECIFIC__SNEAK_ATTACK__DICE_COUNT_ASC"
	SortFindOneLevelInputClassSpecificSneakAttackDiceCountDesc              SortFindOneLevelInput = "CLASS_SPECIFIC__SNEAK_ATTACK__DICE_COUNT_DESC"
	SortFindOneLevelInputClassSpecificSneakAttackDiceValueAsc               SortFindOneLevelInput = "CLASS_SPECIFIC__SNEAK_ATTACK__DICE_VALUE_ASC"
	SortFindOneLevelInputClassSpecificSneakAttackDiceValueDesc              SortFindOneLevelInput = "CLASS_SPECIFIC__SNEAK_ATTACK__DICE_VALUE_DESC"
	SortFindOneLevelInputClassSpecificSongOfRestDieAsc                      SortFindOneLevelInput = "CLASS_SPECIFIC__SONG_OF_REST_DIE_ASC"
	SortFindOneLevelInputClassSpecificSongOfRestDieDesc                     SortFindOneLevelInput = "CLASS_SPECIFIC__SONG_OF_REST_DIE_DESC"
	SortFindOneLevelInputClassSpecificSorceryPointsAsc                      SortFindOneLevelInput = "CLASS_SPECIFIC__SORCERY_POINTS_ASC"
	SortFindOneLevelInputClassSpecificSorceryPointsDesc                     SortFindOneLevelInput = "CLASS_SPECIFIC__SORCERY_POINTS_DESC"
	SortFindOneLevelInputClassSpecificUnarmoredMovementAsc                  SortFindOneLevelInput = "CLASS_SPECIFIC__UNARMORED_MOVEMENT_ASC"
	SortFindOneLevelInputClassSpecificUnarmoredMovementDesc                 SortFindOneLevelInput = "CLASS_SPECIFIC__UNARMORED_MOVEMENT_DESC"
	SortFindOneLevelInputClassSpecificWildShapeFlyAsc                       SortFindOneLevelInput = "CLASS_SPECIFIC__WILD_SHAPE_FLY_ASC"
	SortFindOneLevelInputClassSpecificWildShapeFlyDesc                      SortFindOneLevelInput = "CLASS_SPECIFIC__WILD_SHAPE_FLY_DESC"
	SortFindOneLevelInputClassSpecificWildShapeMaxCrAsc                     SortFindOneLevelInput = "CLASS_SPECIFIC__WILD_SHAPE_MAX_CR_ASC"
	SortFindOneLevelInputClassSpecificWildShapeMaxCrDesc                    SortFindOneLevelInput = "CLASS_SPECIFIC__WILD_SHAPE_MAX_CR_DESC"
	SortFindOneLevelInputClassSpecificWildShapeSwimAsc                      SortFindOneLevelInput = "CLASS_SPECIFIC__WILD_SHAPE_SWIM_ASC"
	SortFindOneLevelInputClassSpecificWildShapeSwimDesc                     SortFindOneLevelInput = "CLASS_SPECIFIC__WILD_SHAPE_SWIM_DESC"
	SortFindOneLevelInputIndexAsc                                           SortFindOneLevelInput = "INDEX_ASC"
	SortFindOneLevelInputIndexDesc                                          SortFindOneLevelInput = "INDEX_DESC"
	SortFindOneLevelInputLevelAsc                                           SortFindOneLevelInput = "LEVEL_ASC"
	SortFindOneLevelInputLevelDesc                                          SortFindOneLevelInput = "LEVEL_DESC"
	SortFindOneLevelInputProfBonusAsc                                       SortFindOneLevelInput = "PROF_BONUS_ASC"
	SortFindOneLevelInputProfBonusDesc                                      SortFindOneLevelInput = "PROF_BONUS_DESC"
	SortFindOneLevelInputSpellcastingCantripsKnownAsc                       SortFindOneLevelInput = "SPELLCASTING__CANTRIPS_KNOWN_ASC"
	SortFindOneLevelInputSpellcastingCantripsKnownDesc                      SortFindOneLevelInput = "SPELLCASTING__CANTRIPS_KNOWN_DESC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel1Asc                    SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_1_ASC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel1Desc                   SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_1_DESC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel2Asc                    SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_2_ASC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel2Desc                   SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_2_DESC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel3Asc                    SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_3_ASC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel3Desc                   SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_3_DESC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel4Asc                    SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_4_ASC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel4Desc                   SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_4_DESC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel5Asc                    SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_5_ASC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel5Desc                   SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_5_DESC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel6Asc                    SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_6_ASC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel6Desc                   SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_6_DESC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel7Asc                    SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_7_ASC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel7Desc                   SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_7_DESC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel8Asc                    SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_8_ASC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel8Desc                   SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_8_DESC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel9Asc                    SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_9_ASC"
	SortFindOneLevelInputSpellcastingSpellSlotsLevel9Desc                   SortFindOneLevelInput = "SPELLCASTING__SPELL_SLOTS_LEVEL_9_DESC"
	SortFindOneLevelInputSpellcastingSpellsKnownAsc                         SortFindOneLevelInput = "SPELLCASTING__SPELLS_KNOWN_ASC"
	SortFindOneLevelInputSpellcastingSpellsKnownDesc                        SortFindOneLevelInput = "SPELLCASTING__SPELLS_KNOWN_DESC"
	SortFindOneLevelInputSubclassIndexAsc                                   SortFindOneLevelInput = "SUBCLASS__INDEX_ASC"
	SortFindOneLevelInputSubclassIndexDesc                                  SortFindOneLevelInput = "SUBCLASS__INDEX_DESC"
	SortFindOneLevelInputSubclassNameAsc                                    SortFindOneLevelInput = "SUBCLASS__NAME_ASC"
	SortFindOneLevelInputSubclassNameDesc                                   SortFindOneLevelInput = "SUBCLASS__NAME_DESC"
	SortFindOneLevelInputSubclassURLAsc                                     SortFindOneLevelInput = "SUBCLASS__URL_ASC"
	SortFindOneLevelInputSubclassURLDesc                                    SortFindOneLevelInput = "SUBCLASS__URL_DESC"
	SortFindOneLevelInputSubclassSpecificAdditionalMagicalSecretsMaxLvlAsc  SortFindOneLevelInput = "SUBCLASS_SPECIFIC__ADDITIONAL_MAGICAL_SECRETS_MAX_LVL_ASC"
	SortFindOneLevelInputSubclassSpecificAdditionalMagicalSecretsMaxLvlDesc SortFindOneLevelInput = "SUBCLASS_SPECIFIC__ADDITIONAL_MAGICAL_SECRETS_MAX_LVL_DESC"
	SortFindOneLevelInputSubclassSpecificAuraRangeAsc                       SortFindOneLevelInput = "SUBCLASS_SPECIFIC__AURA_RANGE_ASC"
	SortFindOneLevelInputSubclassSpecificAuraRangeDesc                      SortFindOneLevelInput = "SUBCLASS_SPECIFIC__AURA_RANGE_DESC"
	SortFindOneLevelInputURLAsc                                             SortFindOneLevelInput = "URL_ASC"
	SortFindOneLevelInputURLDesc                                            SortFindOneLevelInput = "URL_DESC"
)

var AllSortFindOneLevelInput = []SortFindOneLevelInput{
	SortFindOneLevelInputIDAsc,
	SortFindOneLevelInputIDDesc,
	SortFindOneLevelInputAbilityScoreBonusesAsc,
	SortFindOneLevelInputAbilityScoreBonusesDesc,
	SortFindOneLevelInputClassIndexAsc,
	SortFindOneLevelInputClassIndexDesc,
	SortFindOneLevelInputClassNameAsc,
	SortFindOneLevelInputClassNameDesc,
	SortFindOneLevelInputClassURLAsc,
	SortFindOneLevelInputClassURLDesc,
	SortFindOneLevelInputClassSpecificActionSurgesAsc,
	SortFindOneLevelInputClassSpecificActionSurgesDesc,
	SortFindOneLevelInputClassSpecificArcaneRecoveryLevelsAsc,
	SortFindOneLevelInputClassSpecificArcaneRecoveryLevelsDesc,
	SortFindOneLevelInputClassSpecificAuraRangeAsc,
	SortFindOneLevelInputClassSpecificAuraRangeDesc,
	SortFindOneLevelInputClassSpecificBardicInspirationDieAsc,
	SortFindOneLevelInputClassSpecificBardicInspirationDieDesc,
	SortFindOneLevelInputClassSpecificBrutalCriticalDiceAsc,
	SortFindOneLevelInputClassSpecificBrutalCriticalDiceDesc,
	SortFindOneLevelInputClassSpecificChannelDivinityChargesAsc,
	SortFindOneLevelInputClassSpecificChannelDivinityChargesDesc,
	SortFindOneLevelInputClassSpecificDestroyUndeadCrAsc,
	SortFindOneLevelInputClassSpecificDestroyUndeadCrDesc,
	SortFindOneLevelInputClassSpecificExtraAttacksAsc,
	SortFindOneLevelInputClassSpecificExtraAttacksDesc,
	SortFindOneLevelInputClassSpecificFavoredEnemiesAsc,
	SortFindOneLevelInputClassSpecificFavoredEnemiesDesc,
	SortFindOneLevelInputClassSpecificFavoredTerrainAsc,
	SortFindOneLevelInputClassSpecificFavoredTerrainDesc,
	SortFindOneLevelInputClassSpecificIndomitableUsesAsc,
	SortFindOneLevelInputClassSpecificIndomitableUsesDesc,
	SortFindOneLevelInputClassSpecificInvocationsKnownAsc,
	SortFindOneLevelInputClassSpecificInvocationsKnownDesc,
	SortFindOneLevelInputClassSpecificKiPointsAsc,
	SortFindOneLevelInputClassSpecificKiPointsDesc,
	SortFindOneLevelInputClassSpecificMagicalSecretsMax5Asc,
	SortFindOneLevelInputClassSpecificMagicalSecretsMax5Desc,
	SortFindOneLevelInputClassSpecificMagicalSecretsMax7Asc,
	SortFindOneLevelInputClassSpecificMagicalSecretsMax7Desc,
	SortFindOneLevelInputClassSpecificMagicalSecretsMax9Asc,
	SortFindOneLevelInputClassSpecificMagicalSecretsMax9Desc,
	SortFindOneLevelInputClassSpecificMartialArtsDiceCountAsc,
	SortFindOneLevelInputClassSpecificMartialArtsDiceCountDesc,
	SortFindOneLevelInputClassSpecificMartialArtsDiceValueAsc,
	SortFindOneLevelInputClassSpecificMartialArtsDiceValueDesc,
	SortFindOneLevelInputClassSpecificMetamagicKnownAsc,
	SortFindOneLevelInputClassSpecificMetamagicKnownDesc,
	SortFindOneLevelInputClassSpecificMysticArcanumLevel6Asc,
	SortFindOneLevelInputClassSpecificMysticArcanumLevel6Desc,
	SortFindOneLevelInputClassSpecificMysticArcanumLevel7Asc,
	SortFindOneLevelInputClassSpecificMysticArcanumLevel7Desc,
	SortFindOneLevelInputClassSpecificMysticArcanumLevel8Asc,
	SortFindOneLevelInputClassSpecificMysticArcanumLevel8Desc,
	SortFindOneLevelInputClassSpecificMysticArcanumLevel9Asc,
	SortFindOneLevelInputClassSpecificMysticArcanumLevel9Desc,
	SortFindOneLevelInputClassSpecificRageCountAsc,
	SortFindOneLevelInputClassSpecificRageCountDesc,
	SortFindOneLevelInputClassSpecificRageDamageBonusAsc,
	SortFindOneLevelInputClassSpecificRageDamageBonusDesc,
	SortFindOneLevelInputClassSpecificSneakAttackDiceCountAsc,
	SortFindOneLevelInputClassSpecificSneakAttackDiceCountDesc,
	SortFindOneLevelInputClassSpecificSneakAttackDiceValueAsc,
	SortFindOneLevelInputClassSpecificSneakAttackDiceValueDesc,
	SortFindOneLevelInputClassSpecificSongOfRestDieAsc,
	SortFindOneLevelInputClassSpecificSongOfRestDieDesc,
	SortFindOneLevelInputClassSpecificSorceryPointsAsc,
	SortFindOneLevelInputClassSpecificSorceryPointsDesc,
	SortFindOneLevelInputClassSpecificUnarmoredMovementAsc,
	SortFindOneLevelInputClassSpecificUnarmoredMovementDesc,
	SortFindOneLevelInputClassSpecificWildShapeFlyAsc,
	SortFindOneLevelInputClassSpecificWildShapeFlyDesc,
	SortFindOneLevelInputClassSpecificWildShapeMaxCrAsc,
	SortFindOneLevelInputClassSpecificWildShapeMaxCrDesc,
	SortFindOneLevelInputClassSpecificWildShapeSwimAsc,
	SortFindOneLevelInputClassSpecificWildShapeSwimDesc,
	SortFindOneLevelInputIndexAsc,
	SortFindOneLevelInputIndexDesc,
	SortFindOneLevelInputLevelAsc,
	SortFindOneLevelInputLevelDesc,
	SortFindOneLevelInputProfBonusAsc,
	SortFindOneLevelInputProfBonusDesc,
	SortFindOneLevelInputSpellcastingCantripsKnownAsc,
	SortFindOneLevelInputSpellcastingCantripsKnownDesc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel1Asc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel1Desc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel2Asc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel2Desc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel3Asc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel3Desc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel4Asc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel4Desc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel5Asc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel5Desc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel6Asc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel6Desc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel7Asc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel7Desc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel8Asc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel8Desc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel9Asc,
	SortFindOneLevelInputSpellcastingSpellSlotsLevel9Desc,
	SortFindOneLevelInputSpellcastingSpellsKnownAsc,
	SortFindOneLevelInputSpellcastingSpellsKnownDesc,
	SortFindOneLevelInputSubclassIndexAsc,
	SortFindOneLevelInputSubclassIndexDesc,
	SortFindOneLevelInputSubclassNameAsc,
	SortFindOneLevelInputSubclassNameDesc,
	SortFindOneLevelInputSubclassURLAsc,
	SortFindOneLevelInputSubclassURLDesc,
	SortFindOneLevelInputSubclassSpecificAdditionalMagicalSecretsMaxLvlAsc,
	SortFindOneLevelInputSubclassSpecificAdditionalMagicalSecretsMaxLvlDesc,
	SortFindOneLevelInputSubclassSpecificAuraRangeAsc,
	SortFindOneLevelInputSubclassSpecificAuraRangeDesc,
	SortFindOneLevelInputURLAsc,
	SortFindOneLevelInputURLDesc,
}

func (e SortFindOneLevelInput) IsValid() bool {
	switch e {
	case SortFindOneLevelInputIDAsc, SortFindOneLevelInputIDDesc, SortFindOneLevelInputAbilityScoreBonusesAsc, SortFindOneLevelInputAbilityScoreBonusesDesc, SortFindOneLevelInputClassIndexAsc, SortFindOneLevelInputClassIndexDesc, SortFindOneLevelInputClassNameAsc, SortFindOneLevelInputClassNameDesc, SortFindOneLevelInputClassURLAsc, SortFindOneLevelInputClassURLDesc, SortFindOneLevelInputClassSpecificActionSurgesAsc, SortFindOneLevelInputClassSpecificActionSurgesDesc, SortFindOneLevelInputClassSpecificArcaneRecoveryLevelsAsc, SortFindOneLevelInputClassSpecificArcaneRecoveryLevelsDesc, SortFindOneLevelInputClassSpecificAuraRangeAsc, SortFindOneLevelInputClassSpecificAuraRangeDesc, SortFindOneLevelInputClassSpecificBardicInspirationDieAsc, SortFindOneLevelInputClassSpecificBardicInspirationDieDesc, SortFindOneLevelInputClassSpecificBrutalCriticalDiceAsc, SortFindOneLevelInputClassSpecificBrutalCriticalDiceDesc, SortFindOneLevelInputClassSpecificChannelDivinityChargesAsc, SortFindOneLevelInputClassSpecificChannelDivinityChargesDesc, SortFindOneLevelInputClassSpecificDestroyUndeadCrAsc, SortFindOneLevelInputClassSpecificDestroyUndeadCrDesc, SortFindOneLevelInputClassSpecificExtraAttacksAsc, SortFindOneLevelInputClassSpecificExtraAttacksDesc, SortFindOneLevelInputClassSpecificFavoredEnemiesAsc, SortFindOneLevelInputClassSpecificFavoredEnemiesDesc, SortFindOneLevelInputClassSpecificFavoredTerrainAsc, SortFindOneLevelInputClassSpecificFavoredTerrainDesc, SortFindOneLevelInputClassSpecificIndomitableUsesAsc, SortFindOneLevelInputClassSpecificIndomitableUsesDesc, SortFindOneLevelInputClassSpecificInvocationsKnownAsc, SortFindOneLevelInputClassSpecificInvocationsKnownDesc, SortFindOneLevelInputClassSpecificKiPointsAsc, SortFindOneLevelInputClassSpecificKiPointsDesc, SortFindOneLevelInputClassSpecificMagicalSecretsMax5Asc, SortFindOneLevelInputClassSpecificMagicalSecretsMax5Desc, SortFindOneLevelInputClassSpecificMagicalSecretsMax7Asc, SortFindOneLevelInputClassSpecificMagicalSecretsMax7Desc, SortFindOneLevelInputClassSpecificMagicalSecretsMax9Asc, SortFindOneLevelInputClassSpecificMagicalSecretsMax9Desc, SortFindOneLevelInputClassSpecificMartialArtsDiceCountAsc, SortFindOneLevelInputClassSpecificMartialArtsDiceCountDesc, SortFindOneLevelInputClassSpecificMartialArtsDiceValueAsc, SortFindOneLevelInputClassSpecificMartialArtsDiceValueDesc, SortFindOneLevelInputClassSpecificMetamagicKnownAsc, SortFindOneLevelInputClassSpecificMetamagicKnownDesc, SortFindOneLevelInputClassSpecificMysticArcanumLevel6Asc, SortFindOneLevelInputClassSpecificMysticArcanumLevel6Desc, SortFindOneLevelInputClassSpecificMysticArcanumLevel7Asc, SortFindOneLevelInputClassSpecificMysticArcanumLevel7Desc, SortFindOneLevelInputClassSpecificMysticArcanumLevel8Asc, SortFindOneLevelInputClassSpecificMysticArcanumLevel8Desc, SortFindOneLevelInputClassSpecificMysticArcanumLevel9Asc, SortFindOneLevelInputClassSpecificMysticArcanumLevel9Desc, SortFindOneLevelInputClassSpecificRageCountAsc, SortFindOneLevelInputClassSpecificRageCountDesc, SortFindOneLevelInputClassSpecificRageDamageBonusAsc, SortFindOneLevelInputClassSpecificRageDamageBonusDesc, SortFindOneLevelInputClassSpecificSneakAttackDiceCountAsc, SortFindOneLevelInputClassSpecificSneakAttackDiceCountDesc, SortFindOneLevelInputClassSpecificSneakAttackDiceValueAsc, SortFindOneLevelInputClassSpecificSneakAttackDiceValueDesc, SortFindOneLevelInputClassSpecificSongOfRestDieAsc, SortFindOneLevelInputClassSpecificSongOfRestDieDesc, SortFindOneLevelInputClassSpecificSorceryPointsAsc, SortFindOneLevelInputClassSpecificSorceryPointsDesc, SortFindOneLevelInputClassSpecificUnarmoredMovementAsc, SortFindOneLevelInputClassSpecificUnarmoredMovementDesc, SortFindOneLevelInputClassSpecificWildShapeFlyAsc, SortFindOneLevelInputClassSpecificWildShapeFlyDesc, SortFindOneLevelInputClassSpecificWildShapeMaxCrAsc, SortFindOneLevelInputClassSpecificWildShapeMaxCrDesc, SortFindOneLevelInputClassSpecificWildShapeSwimAsc, SortFindOneLevelInputClassSpecificWildShapeSwimDesc, SortFindOneLevelInputIndexAsc, SortFindOneLevelInputIndexDesc, SortFindOneLevelInputLevelAsc, SortFindOneLevelInputLevelDesc, SortFindOneLevelInputProfBonusAsc, SortFindOneLevelInputProfBonusDesc, SortFindOneLevelInputSpellcastingCantripsKnownAsc, SortFindOneLevelInputSpellcastingCantripsKnownDesc, SortFindOneLevelInputSpellcastingSpellSlotsLevel1Asc, SortFindOneLevelInputSpellcastingSpellSlotsLevel1Desc, SortFindOneLevelInputSpellcastingSpellSlotsLevel2Asc, SortFindOneLevelInputSpellcastingSpellSlotsLevel2Desc, SortFindOneLevelInputSpellcastingSpellSlotsLevel3Asc, SortFindOneLevelInputSpellcastingSpellSlotsLevel3Desc, SortFindOneLevelInputSpellcastingSpellSlotsLevel4Asc, SortFindOneLevelInputSpellcastingSpellSlotsLevel4Desc, SortFindOneLevelInputSpellcastingSpellSlotsLevel5Asc, SortFindOneLevelInputSpellcastingSpellSlotsLevel5Desc, SortFindOneLevelInputSpellcastingSpellSlotsLevel6Asc, SortFindOneLevelInputSpellcastingSpellSlotsLevel6Desc, SortFindOneLevelInputSpellcastingSpellSlotsLevel7Asc, SortFindOneLevelInputSpellcastingSpellSlotsLevel7Desc, SortFindOneLevelInputSpellcastingSpellSlotsLevel8Asc, SortFindOneLevelInputSpellcastingSpellSlotsLevel8Desc, SortFindOneLevelInputSpellcastingSpellSlotsLevel9Asc, SortFindOneLevelInputSpellcastingSpellSlotsLevel9Desc, SortFindOneLevelInputSpellcastingSpellsKnownAsc, SortFindOneLevelInputSpellcastingSpellsKnownDesc, SortFindOneLevelInputSubclassIndexAsc, SortFindOneLevelInputSubclassIndexDesc, SortFindOneLevelInputSubclassNameAsc, SortFindOneLevelInputSubclassNameDesc, SortFindOneLevelInputSubclassURLAsc, SortFindOneLevelInputSubclassURLDesc, SortFindOneLevelInputSubclassSpecificAdditionalMagicalSecretsMaxLvlAsc, SortFindOneLevelInputSubclassSpecificAdditionalMagicalSecretsMaxLvlDesc, SortFindOneLevelInputSubclassSpecificAuraRangeAsc, SortFindOneLevelInputSubclassSpecificAuraRangeDesc, SortFindOneLevelInputURLAsc, SortFindOneLevelInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneLevelInput) String() string {
	return string(e)
}

func (e *SortFindOneLevelInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneLevelInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneLevelInput", str)
	}
	return nil
}

func (e SortFindOneLevelInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneMagicItemInput string

const (
	SortFindOneMagicItemInputIDAsc                      SortFindOneMagicItemInput = "_ID_ASC"
	SortFindOneMagicItemInputIDDesc                     SortFindOneMagicItemInput = "_ID_DESC"
	SortFindOneMagicItemInputDescAsc                    SortFindOneMagicItemInput = "DESC_ASC"
	SortFindOneMagicItemInputDescDesc                   SortFindOneMagicItemInput = "DESC_DESC"
	SortFindOneMagicItemInputEquipmentCategoryIndexAsc  SortFindOneMagicItemInput = "EQUIPMENT_CATEGORY__INDEX_ASC"
	SortFindOneMagicItemInputEquipmentCategoryIndexDesc SortFindOneMagicItemInput = "EQUIPMENT_CATEGORY__INDEX_DESC"
	SortFindOneMagicItemInputEquipmentCategoryNameAsc   SortFindOneMagicItemInput = "EQUIPMENT_CATEGORY__NAME_ASC"
	SortFindOneMagicItemInputEquipmentCategoryNameDesc  SortFindOneMagicItemInput = "EQUIPMENT_CATEGORY__NAME_DESC"
	SortFindOneMagicItemInputEquipmentCategoryURLAsc    SortFindOneMagicItemInput = "EQUIPMENT_CATEGORY__URL_ASC"
	SortFindOneMagicItemInputEquipmentCategoryURLDesc   SortFindOneMagicItemInput = "EQUIPMENT_CATEGORY__URL_DESC"
	SortFindOneMagicItemInputIndexAsc                   SortFindOneMagicItemInput = "INDEX_ASC"
	SortFindOneMagicItemInputIndexDesc                  SortFindOneMagicItemInput = "INDEX_DESC"
	SortFindOneMagicItemInputNameAsc                    SortFindOneMagicItemInput = "NAME_ASC"
	SortFindOneMagicItemInputNameDesc                   SortFindOneMagicItemInput = "NAME_DESC"
	SortFindOneMagicItemInputURLAsc                     SortFindOneMagicItemInput = "URL_ASC"
	SortFindOneMagicItemInputURLDesc                    SortFindOneMagicItemInput = "URL_DESC"
)

var AllSortFindOneMagicItemInput = []SortFindOneMagicItemInput{
	SortFindOneMagicItemInputIDAsc,
	SortFindOneMagicItemInputIDDesc,
	SortFindOneMagicItemInputDescAsc,
	SortFindOneMagicItemInputDescDesc,
	SortFindOneMagicItemInputEquipmentCategoryIndexAsc,
	SortFindOneMagicItemInputEquipmentCategoryIndexDesc,
	SortFindOneMagicItemInputEquipmentCategoryNameAsc,
	SortFindOneMagicItemInputEquipmentCategoryNameDesc,
	SortFindOneMagicItemInputEquipmentCategoryURLAsc,
	SortFindOneMagicItemInputEquipmentCategoryURLDesc,
	SortFindOneMagicItemInputIndexAsc,
	SortFindOneMagicItemInputIndexDesc,
	SortFindOneMagicItemInputNameAsc,
	SortFindOneMagicItemInputNameDesc,
	SortFindOneMagicItemInputURLAsc,
	SortFindOneMagicItemInputURLDesc,
}

func (e SortFindOneMagicItemInput) IsValid() bool {
	switch e {
	case SortFindOneMagicItemInputIDAsc, SortFindOneMagicItemInputIDDesc, SortFindOneMagicItemInputDescAsc, SortFindOneMagicItemInputDescDesc, SortFindOneMagicItemInputEquipmentCategoryIndexAsc, SortFindOneMagicItemInputEquipmentCategoryIndexDesc, SortFindOneMagicItemInputEquipmentCategoryNameAsc, SortFindOneMagicItemInputEquipmentCategoryNameDesc, SortFindOneMagicItemInputEquipmentCategoryURLAsc, SortFindOneMagicItemInputEquipmentCategoryURLDesc, SortFindOneMagicItemInputIndexAsc, SortFindOneMagicItemInputIndexDesc, SortFindOneMagicItemInputNameAsc, SortFindOneMagicItemInputNameDesc, SortFindOneMagicItemInputURLAsc, SortFindOneMagicItemInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneMagicItemInput) String() string {
	return string(e)
}

func (e *SortFindOneMagicItemInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneMagicItemInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneMagicItemInput", str)
	}
	return nil
}

func (e SortFindOneMagicItemInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneMagicSchoolInput string

const (
	SortFindOneMagicSchoolInputIDAsc     SortFindOneMagicSchoolInput = "_ID_ASC"
	SortFindOneMagicSchoolInputIDDesc    SortFindOneMagicSchoolInput = "_ID_DESC"
	SortFindOneMagicSchoolInputDescAsc   SortFindOneMagicSchoolInput = "DESC_ASC"
	SortFindOneMagicSchoolInputDescDesc  SortFindOneMagicSchoolInput = "DESC_DESC"
	SortFindOneMagicSchoolInputIndexAsc  SortFindOneMagicSchoolInput = "INDEX_ASC"
	SortFindOneMagicSchoolInputIndexDesc SortFindOneMagicSchoolInput = "INDEX_DESC"
	SortFindOneMagicSchoolInputNameAsc   SortFindOneMagicSchoolInput = "NAME_ASC"
	SortFindOneMagicSchoolInputNameDesc  SortFindOneMagicSchoolInput = "NAME_DESC"
	SortFindOneMagicSchoolInputURLAsc    SortFindOneMagicSchoolInput = "URL_ASC"
	SortFindOneMagicSchoolInputURLDesc   SortFindOneMagicSchoolInput = "URL_DESC"
)

var AllSortFindOneMagicSchoolInput = []SortFindOneMagicSchoolInput{
	SortFindOneMagicSchoolInputIDAsc,
	SortFindOneMagicSchoolInputIDDesc,
	SortFindOneMagicSchoolInputDescAsc,
	SortFindOneMagicSchoolInputDescDesc,
	SortFindOneMagicSchoolInputIndexAsc,
	SortFindOneMagicSchoolInputIndexDesc,
	SortFindOneMagicSchoolInputNameAsc,
	SortFindOneMagicSchoolInputNameDesc,
	SortFindOneMagicSchoolInputURLAsc,
	SortFindOneMagicSchoolInputURLDesc,
}

func (e SortFindOneMagicSchoolInput) IsValid() bool {
	switch e {
	case SortFindOneMagicSchoolInputIDAsc, SortFindOneMagicSchoolInputIDDesc, SortFindOneMagicSchoolInputDescAsc, SortFindOneMagicSchoolInputDescDesc, SortFindOneMagicSchoolInputIndexAsc, SortFindOneMagicSchoolInputIndexDesc, SortFindOneMagicSchoolInputNameAsc, SortFindOneMagicSchoolInputNameDesc, SortFindOneMagicSchoolInputURLAsc, SortFindOneMagicSchoolInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneMagicSchoolInput) String() string {
	return string(e)
}

func (e *SortFindOneMagicSchoolInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneMagicSchoolInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneMagicSchoolInput", str)
	}
	return nil
}

func (e SortFindOneMagicSchoolInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneMonsterInput string

const (
	SortFindOneMonsterInputIDAsc                       SortFindOneMonsterInput = "_ID_ASC"
	SortFindOneMonsterInputIDDesc                      SortFindOneMonsterInput = "_ID_DESC"
	SortFindOneMonsterInputAlignmentAsc                SortFindOneMonsterInput = "ALIGNMENT_ASC"
	SortFindOneMonsterInputAlignmentDesc               SortFindOneMonsterInput = "ALIGNMENT_DESC"
	SortFindOneMonsterInputArmorClassAsc               SortFindOneMonsterInput = "ARMOR_CLASS_ASC"
	SortFindOneMonsterInputArmorClassDesc              SortFindOneMonsterInput = "ARMOR_CLASS_DESC"
	SortFindOneMonsterInputChallengeRatingAsc          SortFindOneMonsterInput = "CHALLENGE_RATING_ASC"
	SortFindOneMonsterInputChallengeRatingDesc         SortFindOneMonsterInput = "CHALLENGE_RATING_DESC"
	SortFindOneMonsterInputCharismaAsc                 SortFindOneMonsterInput = "CHARISMA_ASC"
	SortFindOneMonsterInputCharismaDesc                SortFindOneMonsterInput = "CHARISMA_DESC"
	SortFindOneMonsterInputConstitutionAsc             SortFindOneMonsterInput = "CONSTITUTION_ASC"
	SortFindOneMonsterInputConstitutionDesc            SortFindOneMonsterInput = "CONSTITUTION_DESC"
	SortFindOneMonsterInputDexterityAsc                SortFindOneMonsterInput = "DEXTERITY_ASC"
	SortFindOneMonsterInputDexterityDesc               SortFindOneMonsterInput = "DEXTERITY_DESC"
	SortFindOneMonsterInputHitDiceAsc                  SortFindOneMonsterInput = "HIT_DICE_ASC"
	SortFindOneMonsterInputHitDiceDesc                 SortFindOneMonsterInput = "HIT_DICE_DESC"
	SortFindOneMonsterInputHitPointsAsc                SortFindOneMonsterInput = "HIT_POINTS_ASC"
	SortFindOneMonsterInputHitPointsDesc               SortFindOneMonsterInput = "HIT_POINTS_DESC"
	SortFindOneMonsterInputIndexAsc                    SortFindOneMonsterInput = "INDEX_ASC"
	SortFindOneMonsterInputIndexDesc                   SortFindOneMonsterInput = "INDEX_DESC"
	SortFindOneMonsterInputIntelligenceAsc             SortFindOneMonsterInput = "INTELLIGENCE_ASC"
	SortFindOneMonsterInputIntelligenceDesc            SortFindOneMonsterInput = "INTELLIGENCE_DESC"
	SortFindOneMonsterInputLanguagesAsc                SortFindOneMonsterInput = "LANGUAGES_ASC"
	SortFindOneMonsterInputLanguagesDesc               SortFindOneMonsterInput = "LANGUAGES_DESC"
	SortFindOneMonsterInputNameAsc                     SortFindOneMonsterInput = "NAME_ASC"
	SortFindOneMonsterInputNameDesc                    SortFindOneMonsterInput = "NAME_DESC"
	SortFindOneMonsterInputSensesBlindsightAsc         SortFindOneMonsterInput = "SENSES__BLINDSIGHT_ASC"
	SortFindOneMonsterInputSensesBlindsightDesc        SortFindOneMonsterInput = "SENSES__BLINDSIGHT_DESC"
	SortFindOneMonsterInputSensesDarkvisionAsc         SortFindOneMonsterInput = "SENSES__DARKVISION_ASC"
	SortFindOneMonsterInputSensesDarkvisionDesc        SortFindOneMonsterInput = "SENSES__DARKVISION_DESC"
	SortFindOneMonsterInputSensesPassivePerceptionAsc  SortFindOneMonsterInput = "SENSES__PASSIVE_PERCEPTION_ASC"
	SortFindOneMonsterInputSensesPassivePerceptionDesc SortFindOneMonsterInput = "SENSES__PASSIVE_PERCEPTION_DESC"
	SortFindOneMonsterInputSensesTremorsenseAsc        SortFindOneMonsterInput = "SENSES__TREMORSENSE_ASC"
	SortFindOneMonsterInputSensesTremorsenseDesc       SortFindOneMonsterInput = "SENSES__TREMORSENSE_DESC"
	SortFindOneMonsterInputSensesTruesightAsc          SortFindOneMonsterInput = "SENSES__TRUESIGHT_ASC"
	SortFindOneMonsterInputSensesTruesightDesc         SortFindOneMonsterInput = "SENSES__TRUESIGHT_DESC"
	SortFindOneMonsterInputSizeAsc                     SortFindOneMonsterInput = "SIZE_ASC"
	SortFindOneMonsterInputSizeDesc                    SortFindOneMonsterInput = "SIZE_DESC"
	SortFindOneMonsterInputSpeedBurrowAsc              SortFindOneMonsterInput = "SPEED__BURROW_ASC"
	SortFindOneMonsterInputSpeedBurrowDesc             SortFindOneMonsterInput = "SPEED__BURROW_DESC"
	SortFindOneMonsterInputSpeedClimbAsc               SortFindOneMonsterInput = "SPEED__CLIMB_ASC"
	SortFindOneMonsterInputSpeedClimbDesc              SortFindOneMonsterInput = "SPEED__CLIMB_DESC"
	SortFindOneMonsterInputSpeedFlyAsc                 SortFindOneMonsterInput = "SPEED__FLY_ASC"
	SortFindOneMonsterInputSpeedFlyDesc                SortFindOneMonsterInput = "SPEED__FLY_DESC"
	SortFindOneMonsterInputSpeedHoverAsc               SortFindOneMonsterInput = "SPEED__HOVER_ASC"
	SortFindOneMonsterInputSpeedHoverDesc              SortFindOneMonsterInput = "SPEED__HOVER_DESC"
	SortFindOneMonsterInputSpeedSwimAsc                SortFindOneMonsterInput = "SPEED__SWIM_ASC"
	SortFindOneMonsterInputSpeedSwimDesc               SortFindOneMonsterInput = "SPEED__SWIM_DESC"
	SortFindOneMonsterInputSpeedWalkAsc                SortFindOneMonsterInput = "SPEED__WALK_ASC"
	SortFindOneMonsterInputSpeedWalkDesc               SortFindOneMonsterInput = "SPEED__WALK_DESC"
	SortFindOneMonsterInputStrengthAsc                 SortFindOneMonsterInput = "STRENGTH_ASC"
	SortFindOneMonsterInputStrengthDesc                SortFindOneMonsterInput = "STRENGTH_DESC"
	SortFindOneMonsterInputSubtypeAsc                  SortFindOneMonsterInput = "SUBTYPE_ASC"
	SortFindOneMonsterInputSubtypeDesc                 SortFindOneMonsterInput = "SUBTYPE_DESC"
	SortFindOneMonsterInputTypeAsc                     SortFindOneMonsterInput = "TYPE_ASC"
	SortFindOneMonsterInputTypeDesc                    SortFindOneMonsterInput = "TYPE_DESC"
	SortFindOneMonsterInputURLAsc                      SortFindOneMonsterInput = "URL_ASC"
	SortFindOneMonsterInputURLDesc                     SortFindOneMonsterInput = "URL_DESC"
	SortFindOneMonsterInputWisdomAsc                   SortFindOneMonsterInput = "WISDOM_ASC"
	SortFindOneMonsterInputWisdomDesc                  SortFindOneMonsterInput = "WISDOM_DESC"
	SortFindOneMonsterInputXpAsc                       SortFindOneMonsterInput = "XP_ASC"
	SortFindOneMonsterInputXpDesc                      SortFindOneMonsterInput = "XP_DESC"
)

var AllSortFindOneMonsterInput = []SortFindOneMonsterInput{
	SortFindOneMonsterInputIDAsc,
	SortFindOneMonsterInputIDDesc,
	SortFindOneMonsterInputAlignmentAsc,
	SortFindOneMonsterInputAlignmentDesc,
	SortFindOneMonsterInputArmorClassAsc,
	SortFindOneMonsterInputArmorClassDesc,
	SortFindOneMonsterInputChallengeRatingAsc,
	SortFindOneMonsterInputChallengeRatingDesc,
	SortFindOneMonsterInputCharismaAsc,
	SortFindOneMonsterInputCharismaDesc,
	SortFindOneMonsterInputConstitutionAsc,
	SortFindOneMonsterInputConstitutionDesc,
	SortFindOneMonsterInputDexterityAsc,
	SortFindOneMonsterInputDexterityDesc,
	SortFindOneMonsterInputHitDiceAsc,
	SortFindOneMonsterInputHitDiceDesc,
	SortFindOneMonsterInputHitPointsAsc,
	SortFindOneMonsterInputHitPointsDesc,
	SortFindOneMonsterInputIndexAsc,
	SortFindOneMonsterInputIndexDesc,
	SortFindOneMonsterInputIntelligenceAsc,
	SortFindOneMonsterInputIntelligenceDesc,
	SortFindOneMonsterInputLanguagesAsc,
	SortFindOneMonsterInputLanguagesDesc,
	SortFindOneMonsterInputNameAsc,
	SortFindOneMonsterInputNameDesc,
	SortFindOneMonsterInputSensesBlindsightAsc,
	SortFindOneMonsterInputSensesBlindsightDesc,
	SortFindOneMonsterInputSensesDarkvisionAsc,
	SortFindOneMonsterInputSensesDarkvisionDesc,
	SortFindOneMonsterInputSensesPassivePerceptionAsc,
	SortFindOneMonsterInputSensesPassivePerceptionDesc,
	SortFindOneMonsterInputSensesTremorsenseAsc,
	SortFindOneMonsterInputSensesTremorsenseDesc,
	SortFindOneMonsterInputSensesTruesightAsc,
	SortFindOneMonsterInputSensesTruesightDesc,
	SortFindOneMonsterInputSizeAsc,
	SortFindOneMonsterInputSizeDesc,
	SortFindOneMonsterInputSpeedBurrowAsc,
	SortFindOneMonsterInputSpeedBurrowDesc,
	SortFindOneMonsterInputSpeedClimbAsc,
	SortFindOneMonsterInputSpeedClimbDesc,
	SortFindOneMonsterInputSpeedFlyAsc,
	SortFindOneMonsterInputSpeedFlyDesc,
	SortFindOneMonsterInputSpeedHoverAsc,
	SortFindOneMonsterInputSpeedHoverDesc,
	SortFindOneMonsterInputSpeedSwimAsc,
	SortFindOneMonsterInputSpeedSwimDesc,
	SortFindOneMonsterInputSpeedWalkAsc,
	SortFindOneMonsterInputSpeedWalkDesc,
	SortFindOneMonsterInputStrengthAsc,
	SortFindOneMonsterInputStrengthDesc,
	SortFindOneMonsterInputSubtypeAsc,
	SortFindOneMonsterInputSubtypeDesc,
	SortFindOneMonsterInputTypeAsc,
	SortFindOneMonsterInputTypeDesc,
	SortFindOneMonsterInputURLAsc,
	SortFindOneMonsterInputURLDesc,
	SortFindOneMonsterInputWisdomAsc,
	SortFindOneMonsterInputWisdomDesc,
	SortFindOneMonsterInputXpAsc,
	SortFindOneMonsterInputXpDesc,
}

func (e SortFindOneMonsterInput) IsValid() bool {
	switch e {
	case SortFindOneMonsterInputIDAsc, SortFindOneMonsterInputIDDesc, SortFindOneMonsterInputAlignmentAsc, SortFindOneMonsterInputAlignmentDesc, SortFindOneMonsterInputArmorClassAsc, SortFindOneMonsterInputArmorClassDesc, SortFindOneMonsterInputChallengeRatingAsc, SortFindOneMonsterInputChallengeRatingDesc, SortFindOneMonsterInputCharismaAsc, SortFindOneMonsterInputCharismaDesc, SortFindOneMonsterInputConstitutionAsc, SortFindOneMonsterInputConstitutionDesc, SortFindOneMonsterInputDexterityAsc, SortFindOneMonsterInputDexterityDesc, SortFindOneMonsterInputHitDiceAsc, SortFindOneMonsterInputHitDiceDesc, SortFindOneMonsterInputHitPointsAsc, SortFindOneMonsterInputHitPointsDesc, SortFindOneMonsterInputIndexAsc, SortFindOneMonsterInputIndexDesc, SortFindOneMonsterInputIntelligenceAsc, SortFindOneMonsterInputIntelligenceDesc, SortFindOneMonsterInputLanguagesAsc, SortFindOneMonsterInputLanguagesDesc, SortFindOneMonsterInputNameAsc, SortFindOneMonsterInputNameDesc, SortFindOneMonsterInputSensesBlindsightAsc, SortFindOneMonsterInputSensesBlindsightDesc, SortFindOneMonsterInputSensesDarkvisionAsc, SortFindOneMonsterInputSensesDarkvisionDesc, SortFindOneMonsterInputSensesPassivePerceptionAsc, SortFindOneMonsterInputSensesPassivePerceptionDesc, SortFindOneMonsterInputSensesTremorsenseAsc, SortFindOneMonsterInputSensesTremorsenseDesc, SortFindOneMonsterInputSensesTruesightAsc, SortFindOneMonsterInputSensesTruesightDesc, SortFindOneMonsterInputSizeAsc, SortFindOneMonsterInputSizeDesc, SortFindOneMonsterInputSpeedBurrowAsc, SortFindOneMonsterInputSpeedBurrowDesc, SortFindOneMonsterInputSpeedClimbAsc, SortFindOneMonsterInputSpeedClimbDesc, SortFindOneMonsterInputSpeedFlyAsc, SortFindOneMonsterInputSpeedFlyDesc, SortFindOneMonsterInputSpeedHoverAsc, SortFindOneMonsterInputSpeedHoverDesc, SortFindOneMonsterInputSpeedSwimAsc, SortFindOneMonsterInputSpeedSwimDesc, SortFindOneMonsterInputSpeedWalkAsc, SortFindOneMonsterInputSpeedWalkDesc, SortFindOneMonsterInputStrengthAsc, SortFindOneMonsterInputStrengthDesc, SortFindOneMonsterInputSubtypeAsc, SortFindOneMonsterInputSubtypeDesc, SortFindOneMonsterInputTypeAsc, SortFindOneMonsterInputTypeDesc, SortFindOneMonsterInputURLAsc, SortFindOneMonsterInputURLDesc, SortFindOneMonsterInputWisdomAsc, SortFindOneMonsterInputWisdomDesc, SortFindOneMonsterInputXpAsc, SortFindOneMonsterInputXpDesc:
		return true
	}
	return false
}

func (e SortFindOneMonsterInput) String() string {
	return string(e)
}

func (e *SortFindOneMonsterInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneMonsterInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneMonsterInput", str)
	}
	return nil
}

func (e SortFindOneMonsterInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneProficiencyInput string

const (
	SortFindOneProficiencyInputIDAsc     SortFindOneProficiencyInput = "_ID_ASC"
	SortFindOneProficiencyInputIDDesc    SortFindOneProficiencyInput = "_ID_DESC"
	SortFindOneProficiencyInputIndexAsc  SortFindOneProficiencyInput = "INDEX_ASC"
	SortFindOneProficiencyInputIndexDesc SortFindOneProficiencyInput = "INDEX_DESC"
	SortFindOneProficiencyInputNameAsc   SortFindOneProficiencyInput = "NAME_ASC"
	SortFindOneProficiencyInputNameDesc  SortFindOneProficiencyInput = "NAME_DESC"
	SortFindOneProficiencyInputTypeAsc   SortFindOneProficiencyInput = "TYPE_ASC"
	SortFindOneProficiencyInputTypeDesc  SortFindOneProficiencyInput = "TYPE_DESC"
	SortFindOneProficiencyInputURLAsc    SortFindOneProficiencyInput = "URL_ASC"
	SortFindOneProficiencyInputURLDesc   SortFindOneProficiencyInput = "URL_DESC"
)

var AllSortFindOneProficiencyInput = []SortFindOneProficiencyInput{
	SortFindOneProficiencyInputIDAsc,
	SortFindOneProficiencyInputIDDesc,
	SortFindOneProficiencyInputIndexAsc,
	SortFindOneProficiencyInputIndexDesc,
	SortFindOneProficiencyInputNameAsc,
	SortFindOneProficiencyInputNameDesc,
	SortFindOneProficiencyInputTypeAsc,
	SortFindOneProficiencyInputTypeDesc,
	SortFindOneProficiencyInputURLAsc,
	SortFindOneProficiencyInputURLDesc,
}

func (e SortFindOneProficiencyInput) IsValid() bool {
	switch e {
	case SortFindOneProficiencyInputIDAsc, SortFindOneProficiencyInputIDDesc, SortFindOneProficiencyInputIndexAsc, SortFindOneProficiencyInputIndexDesc, SortFindOneProficiencyInputNameAsc, SortFindOneProficiencyInputNameDesc, SortFindOneProficiencyInputTypeAsc, SortFindOneProficiencyInputTypeDesc, SortFindOneProficiencyInputURLAsc, SortFindOneProficiencyInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneProficiencyInput) String() string {
	return string(e)
}

func (e *SortFindOneProficiencyInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneProficiencyInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneProficiencyInput", str)
	}
	return nil
}

func (e SortFindOneProficiencyInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneRaceInput string

const (
	SortFindOneRaceInputIDAsc                                SortFindOneRaceInput = "_ID_ASC"
	SortFindOneRaceInputIDDesc                               SortFindOneRaceInput = "_ID_DESC"
	SortFindOneRaceInputAbilityBonusOptionsChooseAsc         SortFindOneRaceInput = "ABILITY_BONUS_OPTIONS__CHOOSE_ASC"
	SortFindOneRaceInputAbilityBonusOptionsChooseDesc        SortFindOneRaceInput = "ABILITY_BONUS_OPTIONS__CHOOSE_DESC"
	SortFindOneRaceInputAbilityBonusOptionsTypeAsc           SortFindOneRaceInput = "ABILITY_BONUS_OPTIONS__TYPE_ASC"
	SortFindOneRaceInputAbilityBonusOptionsTypeDesc          SortFindOneRaceInput = "ABILITY_BONUS_OPTIONS__TYPE_DESC"
	SortFindOneRaceInputAgeAsc                               SortFindOneRaceInput = "AGE_ASC"
	SortFindOneRaceInputAgeDesc                              SortFindOneRaceInput = "AGE_DESC"
	SortFindOneRaceInputAlignmentAsc                         SortFindOneRaceInput = "ALIGNMENT_ASC"
	SortFindOneRaceInputAlignmentDesc                        SortFindOneRaceInput = "ALIGNMENT_DESC"
	SortFindOneRaceInputIndexAsc                             SortFindOneRaceInput = "INDEX_ASC"
	SortFindOneRaceInputIndexDesc                            SortFindOneRaceInput = "INDEX_DESC"
	SortFindOneRaceInputLanguageDescAsc                      SortFindOneRaceInput = "LANGUAGE_DESC_ASC"
	SortFindOneRaceInputLanguageDescDesc                     SortFindOneRaceInput = "LANGUAGE_DESC_DESC"
	SortFindOneRaceInputLanguageOptionsChooseAsc             SortFindOneRaceInput = "LANGUAGE_OPTIONS__CHOOSE_ASC"
	SortFindOneRaceInputLanguageOptionsChooseDesc            SortFindOneRaceInput = "LANGUAGE_OPTIONS__CHOOSE_DESC"
	SortFindOneRaceInputLanguageOptionsTypeAsc               SortFindOneRaceInput = "LANGUAGE_OPTIONS__TYPE_ASC"
	SortFindOneRaceInputLanguageOptionsTypeDesc              SortFindOneRaceInput = "LANGUAGE_OPTIONS__TYPE_DESC"
	SortFindOneRaceInputNameAsc                              SortFindOneRaceInput = "NAME_ASC"
	SortFindOneRaceInputNameDesc                             SortFindOneRaceInput = "NAME_DESC"
	SortFindOneRaceInputSizeAsc                              SortFindOneRaceInput = "SIZE_ASC"
	SortFindOneRaceInputSizeDesc                             SortFindOneRaceInput = "SIZE_DESC"
	SortFindOneRaceInputSizeDescriptionAsc                   SortFindOneRaceInput = "SIZE_DESCRIPTION_ASC"
	SortFindOneRaceInputSizeDescriptionDesc                  SortFindOneRaceInput = "SIZE_DESCRIPTION_DESC"
	SortFindOneRaceInputSpeedAsc                             SortFindOneRaceInput = "SPEED_ASC"
	SortFindOneRaceInputSpeedDesc                            SortFindOneRaceInput = "SPEED_DESC"
	SortFindOneRaceInputStartingProficiencyOptionsChooseAsc  SortFindOneRaceInput = "STARTING_PROFICIENCY_OPTIONS__CHOOSE_ASC"
	SortFindOneRaceInputStartingProficiencyOptionsChooseDesc SortFindOneRaceInput = "STARTING_PROFICIENCY_OPTIONS__CHOOSE_DESC"
	SortFindOneRaceInputStartingProficiencyOptionsTypeAsc    SortFindOneRaceInput = "STARTING_PROFICIENCY_OPTIONS__TYPE_ASC"
	SortFindOneRaceInputStartingProficiencyOptionsTypeDesc   SortFindOneRaceInput = "STARTING_PROFICIENCY_OPTIONS__TYPE_DESC"
	SortFindOneRaceInputURLAsc                               SortFindOneRaceInput = "URL_ASC"
	SortFindOneRaceInputURLDesc                              SortFindOneRaceInput = "URL_DESC"
)

var AllSortFindOneRaceInput = []SortFindOneRaceInput{
	SortFindOneRaceInputIDAsc,
	SortFindOneRaceInputIDDesc,
	SortFindOneRaceInputAbilityBonusOptionsChooseAsc,
	SortFindOneRaceInputAbilityBonusOptionsChooseDesc,
	SortFindOneRaceInputAbilityBonusOptionsTypeAsc,
	SortFindOneRaceInputAbilityBonusOptionsTypeDesc,
	SortFindOneRaceInputAgeAsc,
	SortFindOneRaceInputAgeDesc,
	SortFindOneRaceInputAlignmentAsc,
	SortFindOneRaceInputAlignmentDesc,
	SortFindOneRaceInputIndexAsc,
	SortFindOneRaceInputIndexDesc,
	SortFindOneRaceInputLanguageDescAsc,
	SortFindOneRaceInputLanguageDescDesc,
	SortFindOneRaceInputLanguageOptionsChooseAsc,
	SortFindOneRaceInputLanguageOptionsChooseDesc,
	SortFindOneRaceInputLanguageOptionsTypeAsc,
	SortFindOneRaceInputLanguageOptionsTypeDesc,
	SortFindOneRaceInputNameAsc,
	SortFindOneRaceInputNameDesc,
	SortFindOneRaceInputSizeAsc,
	SortFindOneRaceInputSizeDesc,
	SortFindOneRaceInputSizeDescriptionAsc,
	SortFindOneRaceInputSizeDescriptionDesc,
	SortFindOneRaceInputSpeedAsc,
	SortFindOneRaceInputSpeedDesc,
	SortFindOneRaceInputStartingProficiencyOptionsChooseAsc,
	SortFindOneRaceInputStartingProficiencyOptionsChooseDesc,
	SortFindOneRaceInputStartingProficiencyOptionsTypeAsc,
	SortFindOneRaceInputStartingProficiencyOptionsTypeDesc,
	SortFindOneRaceInputURLAsc,
	SortFindOneRaceInputURLDesc,
}

func (e SortFindOneRaceInput) IsValid() bool {
	switch e {
	case SortFindOneRaceInputIDAsc, SortFindOneRaceInputIDDesc, SortFindOneRaceInputAbilityBonusOptionsChooseAsc, SortFindOneRaceInputAbilityBonusOptionsChooseDesc, SortFindOneRaceInputAbilityBonusOptionsTypeAsc, SortFindOneRaceInputAbilityBonusOptionsTypeDesc, SortFindOneRaceInputAgeAsc, SortFindOneRaceInputAgeDesc, SortFindOneRaceInputAlignmentAsc, SortFindOneRaceInputAlignmentDesc, SortFindOneRaceInputIndexAsc, SortFindOneRaceInputIndexDesc, SortFindOneRaceInputLanguageDescAsc, SortFindOneRaceInputLanguageDescDesc, SortFindOneRaceInputLanguageOptionsChooseAsc, SortFindOneRaceInputLanguageOptionsChooseDesc, SortFindOneRaceInputLanguageOptionsTypeAsc, SortFindOneRaceInputLanguageOptionsTypeDesc, SortFindOneRaceInputNameAsc, SortFindOneRaceInputNameDesc, SortFindOneRaceInputSizeAsc, SortFindOneRaceInputSizeDesc, SortFindOneRaceInputSizeDescriptionAsc, SortFindOneRaceInputSizeDescriptionDesc, SortFindOneRaceInputSpeedAsc, SortFindOneRaceInputSpeedDesc, SortFindOneRaceInputStartingProficiencyOptionsChooseAsc, SortFindOneRaceInputStartingProficiencyOptionsChooseDesc, SortFindOneRaceInputStartingProficiencyOptionsTypeAsc, SortFindOneRaceInputStartingProficiencyOptionsTypeDesc, SortFindOneRaceInputURLAsc, SortFindOneRaceInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneRaceInput) String() string {
	return string(e)
}

func (e *SortFindOneRaceInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneRaceInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneRaceInput", str)
	}
	return nil
}

func (e SortFindOneRaceInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneRuleInput string

const (
	SortFindOneRuleInputIDAsc     SortFindOneRuleInput = "_ID_ASC"
	SortFindOneRuleInputIDDesc    SortFindOneRuleInput = "_ID_DESC"
	SortFindOneRuleInputDescAsc   SortFindOneRuleInput = "DESC_ASC"
	SortFindOneRuleInputDescDesc  SortFindOneRuleInput = "DESC_DESC"
	SortFindOneRuleInputIndexAsc  SortFindOneRuleInput = "INDEX_ASC"
	SortFindOneRuleInputIndexDesc SortFindOneRuleInput = "INDEX_DESC"
	SortFindOneRuleInputNameAsc   SortFindOneRuleInput = "NAME_ASC"
	SortFindOneRuleInputNameDesc  SortFindOneRuleInput = "NAME_DESC"
	SortFindOneRuleInputURLAsc    SortFindOneRuleInput = "URL_ASC"
	SortFindOneRuleInputURLDesc   SortFindOneRuleInput = "URL_DESC"
)

var AllSortFindOneRuleInput = []SortFindOneRuleInput{
	SortFindOneRuleInputIDAsc,
	SortFindOneRuleInputIDDesc,
	SortFindOneRuleInputDescAsc,
	SortFindOneRuleInputDescDesc,
	SortFindOneRuleInputIndexAsc,
	SortFindOneRuleInputIndexDesc,
	SortFindOneRuleInputNameAsc,
	SortFindOneRuleInputNameDesc,
	SortFindOneRuleInputURLAsc,
	SortFindOneRuleInputURLDesc,
}

func (e SortFindOneRuleInput) IsValid() bool {
	switch e {
	case SortFindOneRuleInputIDAsc, SortFindOneRuleInputIDDesc, SortFindOneRuleInputDescAsc, SortFindOneRuleInputDescDesc, SortFindOneRuleInputIndexAsc, SortFindOneRuleInputIndexDesc, SortFindOneRuleInputNameAsc, SortFindOneRuleInputNameDesc, SortFindOneRuleInputURLAsc, SortFindOneRuleInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneRuleInput) String() string {
	return string(e)
}

func (e *SortFindOneRuleInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneRuleInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneRuleInput", str)
	}
	return nil
}

func (e SortFindOneRuleInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneRuleSectionInput string

const (
	SortFindOneRuleSectionInputIDAsc     SortFindOneRuleSectionInput = "_ID_ASC"
	SortFindOneRuleSectionInputIDDesc    SortFindOneRuleSectionInput = "_ID_DESC"
	SortFindOneRuleSectionInputDescAsc   SortFindOneRuleSectionInput = "DESC_ASC"
	SortFindOneRuleSectionInputDescDesc  SortFindOneRuleSectionInput = "DESC_DESC"
	SortFindOneRuleSectionInputIndexAsc  SortFindOneRuleSectionInput = "INDEX_ASC"
	SortFindOneRuleSectionInputIndexDesc SortFindOneRuleSectionInput = "INDEX_DESC"
	SortFindOneRuleSectionInputNameAsc   SortFindOneRuleSectionInput = "NAME_ASC"
	SortFindOneRuleSectionInputNameDesc  SortFindOneRuleSectionInput = "NAME_DESC"
	SortFindOneRuleSectionInputURLAsc    SortFindOneRuleSectionInput = "URL_ASC"
	SortFindOneRuleSectionInputURLDesc   SortFindOneRuleSectionInput = "URL_DESC"
)

var AllSortFindOneRuleSectionInput = []SortFindOneRuleSectionInput{
	SortFindOneRuleSectionInputIDAsc,
	SortFindOneRuleSectionInputIDDesc,
	SortFindOneRuleSectionInputDescAsc,
	SortFindOneRuleSectionInputDescDesc,
	SortFindOneRuleSectionInputIndexAsc,
	SortFindOneRuleSectionInputIndexDesc,
	SortFindOneRuleSectionInputNameAsc,
	SortFindOneRuleSectionInputNameDesc,
	SortFindOneRuleSectionInputURLAsc,
	SortFindOneRuleSectionInputURLDesc,
}

func (e SortFindOneRuleSectionInput) IsValid() bool {
	switch e {
	case SortFindOneRuleSectionInputIDAsc, SortFindOneRuleSectionInputIDDesc, SortFindOneRuleSectionInputDescAsc, SortFindOneRuleSectionInputDescDesc, SortFindOneRuleSectionInputIndexAsc, SortFindOneRuleSectionInputIndexDesc, SortFindOneRuleSectionInputNameAsc, SortFindOneRuleSectionInputNameDesc, SortFindOneRuleSectionInputURLAsc, SortFindOneRuleSectionInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneRuleSectionInput) String() string {
	return string(e)
}

func (e *SortFindOneRuleSectionInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneRuleSectionInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneRuleSectionInput", str)
	}
	return nil
}

func (e SortFindOneRuleSectionInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneSkillInput string

const (
	SortFindOneSkillInputIDAsc                 SortFindOneSkillInput = "_ID_ASC"
	SortFindOneSkillInputIDDesc                SortFindOneSkillInput = "_ID_DESC"
	SortFindOneSkillInputAbilityScoreIndexAsc  SortFindOneSkillInput = "ABILITY_SCORE__INDEX_ASC"
	SortFindOneSkillInputAbilityScoreIndexDesc SortFindOneSkillInput = "ABILITY_SCORE__INDEX_DESC"
	SortFindOneSkillInputAbilityScoreNameAsc   SortFindOneSkillInput = "ABILITY_SCORE__NAME_ASC"
	SortFindOneSkillInputAbilityScoreNameDesc  SortFindOneSkillInput = "ABILITY_SCORE__NAME_DESC"
	SortFindOneSkillInputAbilityScoreURLAsc    SortFindOneSkillInput = "ABILITY_SCORE__URL_ASC"
	SortFindOneSkillInputAbilityScoreURLDesc   SortFindOneSkillInput = "ABILITY_SCORE__URL_DESC"
	SortFindOneSkillInputDescAsc               SortFindOneSkillInput = "DESC_ASC"
	SortFindOneSkillInputDescDesc              SortFindOneSkillInput = "DESC_DESC"
	SortFindOneSkillInputIndexAsc              SortFindOneSkillInput = "INDEX_ASC"
	SortFindOneSkillInputIndexDesc             SortFindOneSkillInput = "INDEX_DESC"
	SortFindOneSkillInputNameAsc               SortFindOneSkillInput = "NAME_ASC"
	SortFindOneSkillInputNameDesc              SortFindOneSkillInput = "NAME_DESC"
	SortFindOneSkillInputURLAsc                SortFindOneSkillInput = "URL_ASC"
	SortFindOneSkillInputURLDesc               SortFindOneSkillInput = "URL_DESC"
)

var AllSortFindOneSkillInput = []SortFindOneSkillInput{
	SortFindOneSkillInputIDAsc,
	SortFindOneSkillInputIDDesc,
	SortFindOneSkillInputAbilityScoreIndexAsc,
	SortFindOneSkillInputAbilityScoreIndexDesc,
	SortFindOneSkillInputAbilityScoreNameAsc,
	SortFindOneSkillInputAbilityScoreNameDesc,
	SortFindOneSkillInputAbilityScoreURLAsc,
	SortFindOneSkillInputAbilityScoreURLDesc,
	SortFindOneSkillInputDescAsc,
	SortFindOneSkillInputDescDesc,
	SortFindOneSkillInputIndexAsc,
	SortFindOneSkillInputIndexDesc,
	SortFindOneSkillInputNameAsc,
	SortFindOneSkillInputNameDesc,
	SortFindOneSkillInputURLAsc,
	SortFindOneSkillInputURLDesc,
}

func (e SortFindOneSkillInput) IsValid() bool {
	switch e {
	case SortFindOneSkillInputIDAsc, SortFindOneSkillInputIDDesc, SortFindOneSkillInputAbilityScoreIndexAsc, SortFindOneSkillInputAbilityScoreIndexDesc, SortFindOneSkillInputAbilityScoreNameAsc, SortFindOneSkillInputAbilityScoreNameDesc, SortFindOneSkillInputAbilityScoreURLAsc, SortFindOneSkillInputAbilityScoreURLDesc, SortFindOneSkillInputDescAsc, SortFindOneSkillInputDescDesc, SortFindOneSkillInputIndexAsc, SortFindOneSkillInputIndexDesc, SortFindOneSkillInputNameAsc, SortFindOneSkillInputNameDesc, SortFindOneSkillInputURLAsc, SortFindOneSkillInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneSkillInput) String() string {
	return string(e)
}

func (e *SortFindOneSkillInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneSkillInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneSkillInput", str)
	}
	return nil
}

func (e SortFindOneSkillInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneSpellInput string

const (
	SortFindOneSpellInputIDAsc           SortFindOneSpellInput = "_ID_ASC"
	SortFindOneSpellInputIDDesc          SortFindOneSpellInput = "_ID_DESC"
	SortFindOneSpellInputSchoolIndexAsc  SortFindOneSpellInput = "SCHOOL__INDEX_ASC"
	SortFindOneSpellInputSchoolIndexDesc SortFindOneSpellInput = "SCHOOL__INDEX_DESC"
	SortFindOneSpellInputSchoolNameAsc   SortFindOneSpellInput = "SCHOOL__NAME_ASC"
	SortFindOneSpellInputSchoolNameDesc  SortFindOneSpellInput = "SCHOOL__NAME_DESC"
	SortFindOneSpellInputSchoolURLAsc    SortFindOneSpellInput = "SCHOOL__URL_ASC"
	SortFindOneSpellInputSchoolURLDesc   SortFindOneSpellInput = "SCHOOL__URL_DESC"
)

var AllSortFindOneSpellInput = []SortFindOneSpellInput{
	SortFindOneSpellInputIDAsc,
	SortFindOneSpellInputIDDesc,
	SortFindOneSpellInputSchoolIndexAsc,
	SortFindOneSpellInputSchoolIndexDesc,
	SortFindOneSpellInputSchoolNameAsc,
	SortFindOneSpellInputSchoolNameDesc,
	SortFindOneSpellInputSchoolURLAsc,
	SortFindOneSpellInputSchoolURLDesc,
}

func (e SortFindOneSpellInput) IsValid() bool {
	switch e {
	case SortFindOneSpellInputIDAsc, SortFindOneSpellInputIDDesc, SortFindOneSpellInputSchoolIndexAsc, SortFindOneSpellInputSchoolIndexDesc, SortFindOneSpellInputSchoolNameAsc, SortFindOneSpellInputSchoolNameDesc, SortFindOneSpellInputSchoolURLAsc, SortFindOneSpellInputSchoolURLDesc:
		return true
	}
	return false
}

func (e SortFindOneSpellInput) String() string {
	return string(e)
}

func (e *SortFindOneSpellInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneSpellInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneSpellInput", str)
	}
	return nil
}

func (e SortFindOneSpellInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneSubclassInput string

const (
	SortFindOneSubclassInputIDAsc              SortFindOneSubclassInput = "_ID_ASC"
	SortFindOneSubclassInputIDDesc             SortFindOneSubclassInput = "_ID_DESC"
	SortFindOneSubclassInputClassIndexAsc      SortFindOneSubclassInput = "CLASS__INDEX_ASC"
	SortFindOneSubclassInputClassIndexDesc     SortFindOneSubclassInput = "CLASS__INDEX_DESC"
	SortFindOneSubclassInputClassNameAsc       SortFindOneSubclassInput = "CLASS__NAME_ASC"
	SortFindOneSubclassInputClassNameDesc      SortFindOneSubclassInput = "CLASS__NAME_DESC"
	SortFindOneSubclassInputClassURLAsc        SortFindOneSubclassInput = "CLASS__URL_ASC"
	SortFindOneSubclassInputClassURLDesc       SortFindOneSubclassInput = "CLASS__URL_DESC"
	SortFindOneSubclassInputDescAsc            SortFindOneSubclassInput = "DESC_ASC"
	SortFindOneSubclassInputDescDesc           SortFindOneSubclassInput = "DESC_DESC"
	SortFindOneSubclassInputIndexAsc           SortFindOneSubclassInput = "INDEX_ASC"
	SortFindOneSubclassInputIndexDesc          SortFindOneSubclassInput = "INDEX_DESC"
	SortFindOneSubclassInputNameAsc            SortFindOneSubclassInput = "NAME_ASC"
	SortFindOneSubclassInputNameDesc           SortFindOneSubclassInput = "NAME_DESC"
	SortFindOneSubclassInputSubclassFlavorAsc  SortFindOneSubclassInput = "SUBCLASS_FLAVOR_ASC"
	SortFindOneSubclassInputSubclassFlavorDesc SortFindOneSubclassInput = "SUBCLASS_FLAVOR_DESC"
	SortFindOneSubclassInputSubclassLevelsAsc  SortFindOneSubclassInput = "SUBCLASS_LEVELS_ASC"
	SortFindOneSubclassInputSubclassLevelsDesc SortFindOneSubclassInput = "SUBCLASS_LEVELS_DESC"
	SortFindOneSubclassInputURLAsc             SortFindOneSubclassInput = "URL_ASC"
	SortFindOneSubclassInputURLDesc            SortFindOneSubclassInput = "URL_DESC"
)

var AllSortFindOneSubclassInput = []SortFindOneSubclassInput{
	SortFindOneSubclassInputIDAsc,
	SortFindOneSubclassInputIDDesc,
	SortFindOneSubclassInputClassIndexAsc,
	SortFindOneSubclassInputClassIndexDesc,
	SortFindOneSubclassInputClassNameAsc,
	SortFindOneSubclassInputClassNameDesc,
	SortFindOneSubclassInputClassURLAsc,
	SortFindOneSubclassInputClassURLDesc,
	SortFindOneSubclassInputDescAsc,
	SortFindOneSubclassInputDescDesc,
	SortFindOneSubclassInputIndexAsc,
	SortFindOneSubclassInputIndexDesc,
	SortFindOneSubclassInputNameAsc,
	SortFindOneSubclassInputNameDesc,
	SortFindOneSubclassInputSubclassFlavorAsc,
	SortFindOneSubclassInputSubclassFlavorDesc,
	SortFindOneSubclassInputSubclassLevelsAsc,
	SortFindOneSubclassInputSubclassLevelsDesc,
	SortFindOneSubclassInputURLAsc,
	SortFindOneSubclassInputURLDesc,
}

func (e SortFindOneSubclassInput) IsValid() bool {
	switch e {
	case SortFindOneSubclassInputIDAsc, SortFindOneSubclassInputIDDesc, SortFindOneSubclassInputClassIndexAsc, SortFindOneSubclassInputClassIndexDesc, SortFindOneSubclassInputClassNameAsc, SortFindOneSubclassInputClassNameDesc, SortFindOneSubclassInputClassURLAsc, SortFindOneSubclassInputClassURLDesc, SortFindOneSubclassInputDescAsc, SortFindOneSubclassInputDescDesc, SortFindOneSubclassInputIndexAsc, SortFindOneSubclassInputIndexDesc, SortFindOneSubclassInputNameAsc, SortFindOneSubclassInputNameDesc, SortFindOneSubclassInputSubclassFlavorAsc, SortFindOneSubclassInputSubclassFlavorDesc, SortFindOneSubclassInputSubclassLevelsAsc, SortFindOneSubclassInputSubclassLevelsDesc, SortFindOneSubclassInputURLAsc, SortFindOneSubclassInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneSubclassInput) String() string {
	return string(e)
}

func (e *SortFindOneSubclassInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneSubclassInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneSubclassInput", str)
	}
	return nil
}

func (e SortFindOneSubclassInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneSubraceInput string

const (
	SortFindOneSubraceInputIDAsc                     SortFindOneSubraceInput = "_ID_ASC"
	SortFindOneSubraceInputIDDesc                    SortFindOneSubraceInput = "_ID_DESC"
	SortFindOneSubraceInputDescAsc                   SortFindOneSubraceInput = "DESC_ASC"
	SortFindOneSubraceInputDescDesc                  SortFindOneSubraceInput = "DESC_DESC"
	SortFindOneSubraceInputIndexAsc                  SortFindOneSubraceInput = "INDEX_ASC"
	SortFindOneSubraceInputIndexDesc                 SortFindOneSubraceInput = "INDEX_DESC"
	SortFindOneSubraceInputLanguageOptionsChooseAsc  SortFindOneSubraceInput = "LANGUAGE_OPTIONS__CHOOSE_ASC"
	SortFindOneSubraceInputLanguageOptionsChooseDesc SortFindOneSubraceInput = "LANGUAGE_OPTIONS__CHOOSE_DESC"
	SortFindOneSubraceInputLanguageOptionsTypeAsc    SortFindOneSubraceInput = "LANGUAGE_OPTIONS__TYPE_ASC"
	SortFindOneSubraceInputLanguageOptionsTypeDesc   SortFindOneSubraceInput = "LANGUAGE_OPTIONS__TYPE_DESC"
	SortFindOneSubraceInputNameAsc                   SortFindOneSubraceInput = "NAME_ASC"
	SortFindOneSubraceInputNameDesc                  SortFindOneSubraceInput = "NAME_DESC"
	SortFindOneSubraceInputRaceIndexAsc              SortFindOneSubraceInput = "RACE__INDEX_ASC"
	SortFindOneSubraceInputRaceIndexDesc             SortFindOneSubraceInput = "RACE__INDEX_DESC"
	SortFindOneSubraceInputRaceNameAsc               SortFindOneSubraceInput = "RACE__NAME_ASC"
	SortFindOneSubraceInputRaceNameDesc              SortFindOneSubraceInput = "RACE__NAME_DESC"
	SortFindOneSubraceInputRaceURLAsc                SortFindOneSubraceInput = "RACE__URL_ASC"
	SortFindOneSubraceInputRaceURLDesc               SortFindOneSubraceInput = "RACE__URL_DESC"
	SortFindOneSubraceInputURLAsc                    SortFindOneSubraceInput = "URL_ASC"
	SortFindOneSubraceInputURLDesc                   SortFindOneSubraceInput = "URL_DESC"
)

var AllSortFindOneSubraceInput = []SortFindOneSubraceInput{
	SortFindOneSubraceInputIDAsc,
	SortFindOneSubraceInputIDDesc,
	SortFindOneSubraceInputDescAsc,
	SortFindOneSubraceInputDescDesc,
	SortFindOneSubraceInputIndexAsc,
	SortFindOneSubraceInputIndexDesc,
	SortFindOneSubraceInputLanguageOptionsChooseAsc,
	SortFindOneSubraceInputLanguageOptionsChooseDesc,
	SortFindOneSubraceInputLanguageOptionsTypeAsc,
	SortFindOneSubraceInputLanguageOptionsTypeDesc,
	SortFindOneSubraceInputNameAsc,
	SortFindOneSubraceInputNameDesc,
	SortFindOneSubraceInputRaceIndexAsc,
	SortFindOneSubraceInputRaceIndexDesc,
	SortFindOneSubraceInputRaceNameAsc,
	SortFindOneSubraceInputRaceNameDesc,
	SortFindOneSubraceInputRaceURLAsc,
	SortFindOneSubraceInputRaceURLDesc,
	SortFindOneSubraceInputURLAsc,
	SortFindOneSubraceInputURLDesc,
}

func (e SortFindOneSubraceInput) IsValid() bool {
	switch e {
	case SortFindOneSubraceInputIDAsc, SortFindOneSubraceInputIDDesc, SortFindOneSubraceInputDescAsc, SortFindOneSubraceInputDescDesc, SortFindOneSubraceInputIndexAsc, SortFindOneSubraceInputIndexDesc, SortFindOneSubraceInputLanguageOptionsChooseAsc, SortFindOneSubraceInputLanguageOptionsChooseDesc, SortFindOneSubraceInputLanguageOptionsTypeAsc, SortFindOneSubraceInputLanguageOptionsTypeDesc, SortFindOneSubraceInputNameAsc, SortFindOneSubraceInputNameDesc, SortFindOneSubraceInputRaceIndexAsc, SortFindOneSubraceInputRaceIndexDesc, SortFindOneSubraceInputRaceNameAsc, SortFindOneSubraceInputRaceNameDesc, SortFindOneSubraceInputRaceURLAsc, SortFindOneSubraceInputRaceURLDesc, SortFindOneSubraceInputURLAsc, SortFindOneSubraceInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneSubraceInput) String() string {
	return string(e)
}

func (e *SortFindOneSubraceInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneSubraceInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneSubraceInput", str)
	}
	return nil
}

func (e SortFindOneSubraceInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneTraitInput string

const (
	SortFindOneTraitInputIDAsc                                      SortFindOneTraitInput = "_ID_ASC"
	SortFindOneTraitInputIDDesc                                     SortFindOneTraitInput = "_ID_DESC"
	SortFindOneTraitInputDescAsc                                    SortFindOneTraitInput = "DESC_ASC"
	SortFindOneTraitInputDescDesc                                   SortFindOneTraitInput = "DESC_DESC"
	SortFindOneTraitInputIndexAsc                                   SortFindOneTraitInput = "INDEX_ASC"
	SortFindOneTraitInputIndexDesc                                  SortFindOneTraitInput = "INDEX_DESC"
	SortFindOneTraitInputNameAsc                                    SortFindOneTraitInput = "NAME_ASC"
	SortFindOneTraitInputNameDesc                                   SortFindOneTraitInput = "NAME_DESC"
	SortFindOneTraitInputProficiencyChoicesChooseAsc                SortFindOneTraitInput = "PROFICIENCY_CHOICES__CHOOSE_ASC"
	SortFindOneTraitInputProficiencyChoicesChooseDesc               SortFindOneTraitInput = "PROFICIENCY_CHOICES__CHOOSE_DESC"
	SortFindOneTraitInputProficiencyChoicesTypeAsc                  SortFindOneTraitInput = "PROFICIENCY_CHOICES__TYPE_ASC"
	SortFindOneTraitInputProficiencyChoicesTypeDesc                 SortFindOneTraitInput = "PROFICIENCY_CHOICES__TYPE_DESC"
	SortFindOneTraitInputParentIndexAsc                             SortFindOneTraitInput = "PARENT__INDEX_ASC"
	SortFindOneTraitInputParentIndexDesc                            SortFindOneTraitInput = "PARENT__INDEX_DESC"
	SortFindOneTraitInputParentNameAsc                              SortFindOneTraitInput = "PARENT__NAME_ASC"
	SortFindOneTraitInputParentNameDesc                             SortFindOneTraitInput = "PARENT__NAME_DESC"
	SortFindOneTraitInputParentURLAsc                               SortFindOneTraitInput = "PARENT__URL_ASC"
	SortFindOneTraitInputParentURLDesc                              SortFindOneTraitInput = "PARENT__URL_DESC"
	SortFindOneTraitInputTraitSpecificSubtraitOptionsChooseAsc      SortFindOneTraitInput = "TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__CHOOSE_ASC"
	SortFindOneTraitInputTraitSpecificSubtraitOptionsChooseDesc     SortFindOneTraitInput = "TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__CHOOSE_DESC"
	SortFindOneTraitInputTraitSpecificSubtraitOptionsTypeAsc        SortFindOneTraitInput = "TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__TYPE_ASC"
	SortFindOneTraitInputTraitSpecificSubtraitOptionsTypeDesc       SortFindOneTraitInput = "TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__TYPE_DESC"
	SortFindOneTraitInputTraitSpecificSpellOptionsChooseAsc         SortFindOneTraitInput = "TRAIT_SPECIFIC__SPELL_OPTIONS__CHOOSE_ASC"
	SortFindOneTraitInputTraitSpecificSpellOptionsChooseDesc        SortFindOneTraitInput = "TRAIT_SPECIFIC__SPELL_OPTIONS__CHOOSE_DESC"
	SortFindOneTraitInputTraitSpecificSpellOptionsTypeAsc           SortFindOneTraitInput = "TRAIT_SPECIFIC__SPELL_OPTIONS__TYPE_ASC"
	SortFindOneTraitInputTraitSpecificSpellOptionsTypeDesc          SortFindOneTraitInput = "TRAIT_SPECIFIC__SPELL_OPTIONS__TYPE_DESC"
	SortFindOneTraitInputTraitSpecificDamageTypeIndexAsc            SortFindOneTraitInput = "TRAIT_SPECIFIC__DAMAGE_TYPE__INDEX_ASC"
	SortFindOneTraitInputTraitSpecificDamageTypeIndexDesc           SortFindOneTraitInput = "TRAIT_SPECIFIC__DAMAGE_TYPE__INDEX_DESC"
	SortFindOneTraitInputTraitSpecificDamageTypeNameAsc             SortFindOneTraitInput = "TRAIT_SPECIFIC__DAMAGE_TYPE__NAME_ASC"
	SortFindOneTraitInputTraitSpecificDamageTypeNameDesc            SortFindOneTraitInput = "TRAIT_SPECIFIC__DAMAGE_TYPE__NAME_DESC"
	SortFindOneTraitInputTraitSpecificDamageTypeURLAsc              SortFindOneTraitInput = "TRAIT_SPECIFIC__DAMAGE_TYPE__URL_ASC"
	SortFindOneTraitInputTraitSpecificDamageTypeURLDesc             SortFindOneTraitInput = "TRAIT_SPECIFIC__DAMAGE_TYPE__URL_DESC"
	SortFindOneTraitInputTraitSpecificBreathWeaponNameAsc           SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__NAME_ASC"
	SortFindOneTraitInputTraitSpecificBreathWeaponNameDesc          SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__NAME_DESC"
	SortFindOneTraitInputTraitSpecificBreathWeaponDescAsc           SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DESC_ASC"
	SortFindOneTraitInputTraitSpecificBreathWeaponDescDesc          SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DESC_DESC"
	SortFindOneTraitInputTraitSpecificBreathWeaponUsageTypeAsc      SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TYPE_ASC"
	SortFindOneTraitInputTraitSpecificBreathWeaponUsageTypeDesc     SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TYPE_DESC"
	SortFindOneTraitInputTraitSpecificBreathWeaponUsageTimesAsc     SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TIMES_ASC"
	SortFindOneTraitInputTraitSpecificBreathWeaponUsageTimesDesc    SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TIMES_DESC"
	SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeIndexAsc  SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__INDEX_ASC"
	SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeIndexDesc SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__INDEX_DESC"
	SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeNameAsc   SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__NAME_ASC"
	SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeNameDesc  SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__NAME_DESC"
	SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeURLAsc    SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__URL_ASC"
	SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeURLDesc   SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__URL_DESC"
	SortFindOneTraitInputTraitSpecificBreathWeaponDcSuccessTypeAsc  SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__SUCCESS_TYPE_ASC"
	SortFindOneTraitInputTraitSpecificBreathWeaponDcSuccessTypeDesc SortFindOneTraitInput = "TRAIT_SPECIFIC__BREATH_WEAPON__DC__SUCCESS_TYPE_DESC"
	SortFindOneTraitInputURLAsc                                     SortFindOneTraitInput = "URL_ASC"
	SortFindOneTraitInputURLDesc                                    SortFindOneTraitInput = "URL_DESC"
)

var AllSortFindOneTraitInput = []SortFindOneTraitInput{
	SortFindOneTraitInputIDAsc,
	SortFindOneTraitInputIDDesc,
	SortFindOneTraitInputDescAsc,
	SortFindOneTraitInputDescDesc,
	SortFindOneTraitInputIndexAsc,
	SortFindOneTraitInputIndexDesc,
	SortFindOneTraitInputNameAsc,
	SortFindOneTraitInputNameDesc,
	SortFindOneTraitInputProficiencyChoicesChooseAsc,
	SortFindOneTraitInputProficiencyChoicesChooseDesc,
	SortFindOneTraitInputProficiencyChoicesTypeAsc,
	SortFindOneTraitInputProficiencyChoicesTypeDesc,
	SortFindOneTraitInputParentIndexAsc,
	SortFindOneTraitInputParentIndexDesc,
	SortFindOneTraitInputParentNameAsc,
	SortFindOneTraitInputParentNameDesc,
	SortFindOneTraitInputParentURLAsc,
	SortFindOneTraitInputParentURLDesc,
	SortFindOneTraitInputTraitSpecificSubtraitOptionsChooseAsc,
	SortFindOneTraitInputTraitSpecificSubtraitOptionsChooseDesc,
	SortFindOneTraitInputTraitSpecificSubtraitOptionsTypeAsc,
	SortFindOneTraitInputTraitSpecificSubtraitOptionsTypeDesc,
	SortFindOneTraitInputTraitSpecificSpellOptionsChooseAsc,
	SortFindOneTraitInputTraitSpecificSpellOptionsChooseDesc,
	SortFindOneTraitInputTraitSpecificSpellOptionsTypeAsc,
	SortFindOneTraitInputTraitSpecificSpellOptionsTypeDesc,
	SortFindOneTraitInputTraitSpecificDamageTypeIndexAsc,
	SortFindOneTraitInputTraitSpecificDamageTypeIndexDesc,
	SortFindOneTraitInputTraitSpecificDamageTypeNameAsc,
	SortFindOneTraitInputTraitSpecificDamageTypeNameDesc,
	SortFindOneTraitInputTraitSpecificDamageTypeURLAsc,
	SortFindOneTraitInputTraitSpecificDamageTypeURLDesc,
	SortFindOneTraitInputTraitSpecificBreathWeaponNameAsc,
	SortFindOneTraitInputTraitSpecificBreathWeaponNameDesc,
	SortFindOneTraitInputTraitSpecificBreathWeaponDescAsc,
	SortFindOneTraitInputTraitSpecificBreathWeaponDescDesc,
	SortFindOneTraitInputTraitSpecificBreathWeaponUsageTypeAsc,
	SortFindOneTraitInputTraitSpecificBreathWeaponUsageTypeDesc,
	SortFindOneTraitInputTraitSpecificBreathWeaponUsageTimesAsc,
	SortFindOneTraitInputTraitSpecificBreathWeaponUsageTimesDesc,
	SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeIndexAsc,
	SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeIndexDesc,
	SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeNameAsc,
	SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeNameDesc,
	SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeURLAsc,
	SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeURLDesc,
	SortFindOneTraitInputTraitSpecificBreathWeaponDcSuccessTypeAsc,
	SortFindOneTraitInputTraitSpecificBreathWeaponDcSuccessTypeDesc,
	SortFindOneTraitInputURLAsc,
	SortFindOneTraitInputURLDesc,
}

func (e SortFindOneTraitInput) IsValid() bool {
	switch e {
	case SortFindOneTraitInputIDAsc, SortFindOneTraitInputIDDesc, SortFindOneTraitInputDescAsc, SortFindOneTraitInputDescDesc, SortFindOneTraitInputIndexAsc, SortFindOneTraitInputIndexDesc, SortFindOneTraitInputNameAsc, SortFindOneTraitInputNameDesc, SortFindOneTraitInputProficiencyChoicesChooseAsc, SortFindOneTraitInputProficiencyChoicesChooseDesc, SortFindOneTraitInputProficiencyChoicesTypeAsc, SortFindOneTraitInputProficiencyChoicesTypeDesc, SortFindOneTraitInputParentIndexAsc, SortFindOneTraitInputParentIndexDesc, SortFindOneTraitInputParentNameAsc, SortFindOneTraitInputParentNameDesc, SortFindOneTraitInputParentURLAsc, SortFindOneTraitInputParentURLDesc, SortFindOneTraitInputTraitSpecificSubtraitOptionsChooseAsc, SortFindOneTraitInputTraitSpecificSubtraitOptionsChooseDesc, SortFindOneTraitInputTraitSpecificSubtraitOptionsTypeAsc, SortFindOneTraitInputTraitSpecificSubtraitOptionsTypeDesc, SortFindOneTraitInputTraitSpecificSpellOptionsChooseAsc, SortFindOneTraitInputTraitSpecificSpellOptionsChooseDesc, SortFindOneTraitInputTraitSpecificSpellOptionsTypeAsc, SortFindOneTraitInputTraitSpecificSpellOptionsTypeDesc, SortFindOneTraitInputTraitSpecificDamageTypeIndexAsc, SortFindOneTraitInputTraitSpecificDamageTypeIndexDesc, SortFindOneTraitInputTraitSpecificDamageTypeNameAsc, SortFindOneTraitInputTraitSpecificDamageTypeNameDesc, SortFindOneTraitInputTraitSpecificDamageTypeURLAsc, SortFindOneTraitInputTraitSpecificDamageTypeURLDesc, SortFindOneTraitInputTraitSpecificBreathWeaponNameAsc, SortFindOneTraitInputTraitSpecificBreathWeaponNameDesc, SortFindOneTraitInputTraitSpecificBreathWeaponDescAsc, SortFindOneTraitInputTraitSpecificBreathWeaponDescDesc, SortFindOneTraitInputTraitSpecificBreathWeaponUsageTypeAsc, SortFindOneTraitInputTraitSpecificBreathWeaponUsageTypeDesc, SortFindOneTraitInputTraitSpecificBreathWeaponUsageTimesAsc, SortFindOneTraitInputTraitSpecificBreathWeaponUsageTimesDesc, SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeIndexAsc, SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeIndexDesc, SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeNameAsc, SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeNameDesc, SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeURLAsc, SortFindOneTraitInputTraitSpecificBreathWeaponDcDcTypeURLDesc, SortFindOneTraitInputTraitSpecificBreathWeaponDcSuccessTypeAsc, SortFindOneTraitInputTraitSpecificBreathWeaponDcSuccessTypeDesc, SortFindOneTraitInputURLAsc, SortFindOneTraitInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneTraitInput) String() string {
	return string(e)
}

func (e *SortFindOneTraitInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneTraitInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneTraitInput", str)
	}
	return nil
}

func (e SortFindOneTraitInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortFindOneWeaponPropertyInput string

const (
	SortFindOneWeaponPropertyInputIDAsc     SortFindOneWeaponPropertyInput = "_ID_ASC"
	SortFindOneWeaponPropertyInputIDDesc    SortFindOneWeaponPropertyInput = "_ID_DESC"
	SortFindOneWeaponPropertyInputDescAsc   SortFindOneWeaponPropertyInput = "DESC_ASC"
	SortFindOneWeaponPropertyInputDescDesc  SortFindOneWeaponPropertyInput = "DESC_DESC"
	SortFindOneWeaponPropertyInputIndexAsc  SortFindOneWeaponPropertyInput = "INDEX_ASC"
	SortFindOneWeaponPropertyInputIndexDesc SortFindOneWeaponPropertyInput = "INDEX_DESC"
	SortFindOneWeaponPropertyInputNameAsc   SortFindOneWeaponPropertyInput = "NAME_ASC"
	SortFindOneWeaponPropertyInputNameDesc  SortFindOneWeaponPropertyInput = "NAME_DESC"
	SortFindOneWeaponPropertyInputURLAsc    SortFindOneWeaponPropertyInput = "URL_ASC"
	SortFindOneWeaponPropertyInputURLDesc   SortFindOneWeaponPropertyInput = "URL_DESC"
)

var AllSortFindOneWeaponPropertyInput = []SortFindOneWeaponPropertyInput{
	SortFindOneWeaponPropertyInputIDAsc,
	SortFindOneWeaponPropertyInputIDDesc,
	SortFindOneWeaponPropertyInputDescAsc,
	SortFindOneWeaponPropertyInputDescDesc,
	SortFindOneWeaponPropertyInputIndexAsc,
	SortFindOneWeaponPropertyInputIndexDesc,
	SortFindOneWeaponPropertyInputNameAsc,
	SortFindOneWeaponPropertyInputNameDesc,
	SortFindOneWeaponPropertyInputURLAsc,
	SortFindOneWeaponPropertyInputURLDesc,
}

func (e SortFindOneWeaponPropertyInput) IsValid() bool {
	switch e {
	case SortFindOneWeaponPropertyInputIDAsc, SortFindOneWeaponPropertyInputIDDesc, SortFindOneWeaponPropertyInputDescAsc, SortFindOneWeaponPropertyInputDescDesc, SortFindOneWeaponPropertyInputIndexAsc, SortFindOneWeaponPropertyInputIndexDesc, SortFindOneWeaponPropertyInputNameAsc, SortFindOneWeaponPropertyInputNameDesc, SortFindOneWeaponPropertyInputURLAsc, SortFindOneWeaponPropertyInputURLDesc:
		return true
	}
	return false
}

func (e SortFindOneWeaponPropertyInput) String() string {
	return string(e)
}

func (e *SortFindOneWeaponPropertyInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortFindOneWeaponPropertyInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortFindOneWeaponPropertyInput", str)
	}
	return nil
}

func (e SortFindOneWeaponPropertyInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
